import { createDebugLogger } from '@aztec/foundation/log';
import { fileURLToPath } from '@aztec/foundation/url';
import isNode from 'detect-node';
import { existsSync } from 'fs';
import { mkdir, open } from 'fs/promises';
import { dirname, join } from 'path';
/**
 * Downloader for CRS from the web or local.
 */
export class NetCrs {
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints) {
        this.numPoints = numPoints;
    }
    /**
     * Download the data.
     */
    async init() {
        // We need numPoints number of g1 points.
        const g1Start = 28;
        const g1End = g1Start + this.numPoints * 64 - 1;
        // Download required range of data.
        const response = await fetch('https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/monomial/transcript00.dat', {
            headers: {
                Range: `bytes=${g1Start}-${g1End}`,
            },
        });
        this.data = new Uint8Array(await response.arrayBuffer());
        await this.downloadG2Data();
    }
    /**
     * Download the G2 points data.
     */
    async downloadG2Data() {
        const g2Start = 28 + 5040001 * 64; // = 322_560_092
        const g2End = g2Start + 128 - 1;
        const response2 = await fetch('https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/monomial/transcript00.dat', {
            headers: {
                Range: `bytes=${g2Start}-${g2End}`,
            },
        });
        this.g2Data = new Uint8Array(await response2.arrayBuffer());
    }
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data() {
        return this.data;
    }
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data() {
        return this.g2Data;
    }
}
/**
 * Downloader for CRS from a local file (for Node).
 */
export class FileCrs {
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints, path, offsetStart = true) {
        this.numPoints = numPoints;
        this.path = path;
        this.offsetStart = offsetStart;
    }
    /**
     * Read the data file.
     */
    async init() {
        // We need numPoints number of g1 points.
        const g1Start = this.offsetStart ? 28 : 0;
        const g1Length = this.numPoints * 64;
        const g2Start = 28 + 5040001 * 64; // = 322_560_092
        const g2Length = 128;
        // Lazily seek our data
        const fileHandle = await open(this.path, 'r');
        try {
            this.data = Buffer.alloc(g1Length);
            await fileHandle.read(this.data, 0, g1Length, g1Start);
            this.g2Data = Buffer.alloc(g2Length);
            await fileHandle.read(this.g2Data, 0, g2Length, this.offsetStart ? g2Start : g1Start + g1Length);
        }
        finally {
            await fileHandle.close();
        }
    }
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data() {
        return this.data;
    }
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data() {
        return this.g2Data;
    }
}
/**
 * Generic CRS finder utility class.
 */
export class Crs {
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints, 
    /**
     * Option to save downloaded SRS on file.
     */
    saveOnFile = true) {
        this.numPoints = numPoints;
        this.saveOnFile = saveOnFile;
        this.logger = createDebugLogger('circuits:crs');
        /**
         * The path to our SRS object, assuming that we are in the aztec3-packages folder structure.
         */
        this.devPath = '/../../../../barretenberg/cpp/srs_db/ignition/monomial/transcript00.dat';
        /**
         * The path of our SRS object, if we downloaded on init.
         */
        this.localPath = `/../../resources/ignition/monomial/transcript00.dat`;
        if (isNode) {
            const devPath = join(fileURLToPath(import.meta.url), this.devPath);
            const localPath = join(dirname(fileURLToPath(import.meta.url)), this.localPath);
            const existsDev = existsSync(devPath);
            const existsLocal = existsSync(localPath);
            if (existsDev) {
                this.crs = new FileCrs(numPoints, devPath);
            }
            else if (existsLocal) {
                this.crs = new FileCrs(numPoints, localPath, false);
            }
            else {
                this.crs = new NetCrs(numPoints);
            }
        }
        else {
            this.crs = new NetCrs(numPoints);
        }
    }
    /**
     * Read CRS from our chosen source.
     */
    async init() {
        await this.crs.init();
        if (isNode) {
            const localPath = dirname(fileURLToPath(import.meta.url)) + this.localPath;
            const devPath = join(fileURLToPath(import.meta.url), this.devPath);
            // save downloaded CRS on file if we don't have a local or dev version
            if (this.saveOnFile && !existsSync(localPath) && !existsSync(devPath)) {
                const dir = localPath.substring(0, localPath.lastIndexOf('/'));
                await mkdir(dir, { recursive: true });
                const fileHandle = await open(localPath, 'w');
                const g1Data = Buffer.from(this.crs.getG1Data());
                try {
                    await fileHandle.write(g1Data);
                }
                catch (err) {
                    this.logger.warn('Failed to save CRS data: ', err.message);
                }
                const g2Data = Buffer.from(this.crs.getG2Data());
                try {
                    await fileHandle.write(g2Data, 0, g2Data.length, g1Data.length);
                    // appendFileSync(localPath, Buffer.from(g2Data));
                }
                catch (err) {
                    this.logger.warn('Failed to append G2 data: ', err.message);
                }
                finally {
                    await fileHandle.close();
                }
            }
        }
    }
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data() {
        return this.crs.getG1Data();
    }
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data() {
        return this.crs.getG2Data();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3JzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RCxPQUFPLE1BQU0sTUFBTSxhQUFhLENBQUM7QUFDakMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksQ0FBQztBQUNoQyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQzs7R0FFRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBSWpCO0lBQ0U7O09BRUc7SUFDYSxTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQ2hDLENBQUM7SUFFSjs7T0FFRztJQUNILEtBQUssQ0FBQyxJQUFJO1FBQ1IseUNBQXlDO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixNQUFNLEtBQUssR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELG1DQUFtQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxtRkFBbUYsRUFBRTtZQUNoSCxPQUFPLEVBQUU7Z0JBQ1AsS0FBSyxFQUFFLFNBQVMsT0FBTyxJQUFJLEtBQUssRUFBRTthQUNuQztTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUV6RCxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsY0FB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