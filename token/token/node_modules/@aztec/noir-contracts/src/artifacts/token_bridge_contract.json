{
  "name": "TokenBridge",
  "functions": [
    {
      "name": "_assert_token_is_same",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_call_mint_on_token",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "claim_private",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_hash_for_redeeming_minted_notes",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_for_L1_to_L2_message_consumption",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "claim_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "to",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "exit_to_l1_private",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "exit_to_l1_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "recipient",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_token",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "token",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWwrCMBDcvI2C/356g3qDnsEbFCx+Cur9scEMHWPwx2Sh7DZJZyazWyUiSt5hZA1V1Mdce1ofcx7+DE98rTDdguEyViTNOud9votuy3vaVTz05G0rHu4P4wpxRfnsI9ZM4UWkGnvJuwPt28o3OGsr5/jursPdmWekd3BtSYMlLb6tliFhBFnDEBd0QFMgn0Khl3sQKPeYnR494d4jfs0o+DfLg3/m8bzdp+t8nqeLIohypDTBcM1jD/t5NHEWe0G+JTbzo8RVRU7xAo43T8Z8BQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "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4dOv8odPv8ofPv0qf/j0q/zh0u/ka1F5+lX+8OlX+cOnX+UPn36VP3z6Vf7w6Vf5w6df5Q+ffpU/fPpV/nDpd/L14Dz9Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0+/yh8+/Sp/uPTj3H/eSb/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0+/yh8u/Tj3n3fSr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0s/zv3nnfSr/OHTD5M/3v7u28jrsp+mHyZ/dNIPkz866YfJH530w+SPTvph8kcn/TD5o5N+mPzRRz/O/eed9MPkj076Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT88+u2c+8876Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+8OlX+cOlH+f+8076Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+cOnHuf+8k36VP3z6Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT9c+nHuP++kX+UPn36VP3z6Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD5d+nPvPO+lX+cOnX+UPn36VP3z6Vf7w6Vf5w6df5Q+ffpz8sb3r90GUbP04+aOPfpz80UU/zv3nnfTj5I8++nHyRx/9OPmjj36c/NFHP07+6KMfJ3/00a/yh0+/yh8+/Sp/uPTj3H/eSb/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0+/yh8u/Tj3n3fSr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0s/zv3nnfSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh0g90/3kf/Sp/+PSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf3j0O0D3n/fRr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0s/0P3nffSr/OHTD5M/2rzdRm5tPU0/TP7opB8mf3TSD5M/OumHyR+d9MPkj076YfJHJ/0w+aOPfpz7zzvph8kfnfSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf7j049x/3km/yh8+/Sp/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",
      "",
      "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",
      "",
      "",
      "eJzN1EEKgzAQBdC7zDoUZyaT2FyldCGtBUFsqe4kd2+lagumuBGZXQL/w1skv4f6fim66t60EHrIDgLh1EP7KJrh3nbFs4PgBMVA2VyHI0s0cKvqEgJGs8giORqzyMxz1nMizN6NWYt+jjqJZ/O2OEUWr8iSK7IcFVkw04RBTRjShGFNGKsJo2l9UdP8oqb9RU0DjPsusCWeMJZ+Mcso4eQm+gpy+rhp37Hezr3vrm/nTm4LYT51RBZvi5ITsNJJ/tSVTvJDrXSS7/5/J8YXZ7or7w=="
    ],
    "fileMap": {
      "1": {
        "source": "// docs:start:token_bridge_imports\nmod token_interface;\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::{\n        context::{Context},\n        hash::{compute_secret_hash},\n        state_vars::{public_state::PublicState},\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n        types::address::{AztecAddress, EthereumAddress},\n        selector::compute_selector,\n    };\n    // docs:end:token_bridge_imports\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use crate::token_interface::Token;\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    struct Storage {\n        token: PublicState<Field, 1>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                token: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(token: AztecAddress) {\n        let selector = compute_selector(\"_initialize((Field))\");\n        context.call_public_function(context.this_address(), selector, [token.address]);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(\n        to: AztecAddress,\n        amount: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        secret: Field,\n    ) -> Field {\n        let content_hash = get_mint_public_content_hash(to.address, amount, canceller.address);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(context, to.address, amount);\n\n        1\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field, // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) -> Field {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(context, context.msg_sender(), amount, nonce);\n\n        1\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        canceller: EthereumAddress,\n        msg_key: Field, // L1 to L2 message key as derived from the inbox contract\n        secret_for_L1_to_L2_message_consumption: Field, // secret used to consume the L1 to L2 message\n    ) -> Field {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount, canceller.address);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_call_mint_on_token(Field,Field)\"),\n            [amount, secret_hash_for_redeeming_minted_notes],\n        );\n\n        1\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field, // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) -> Field {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // Assert that user provided token address is same as seen in storage.\n        context.call_public_function(context.this_address(), compute_selector(\"_assert_token_is_same(Field)\"), [token.address]);\n\n        // Burn tokens\n        Token::at(token.address).burn(&mut context, context.msg_sender(), amount, nonce);\n\n        1\n    }\n    /// docs:end:exit_to_l1_private\n\n    // View function that is callable by other contracts.\n    // Unconstrained can't be called by others since it isn't safe.\n    #[aztec(public)]\n    fn get_token() -> Field {\n        storage.token.read()\n    }\n\n    // /// Unconstrained ///\n\n    unconstrained fn token() -> Field {\n        storage.token.read()\n    }\n\n    #[aztec(public)]\n    internal fn _initialize(token: AztecAddress) {\n        storage.token.write(token.address);\n    }\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    internal fn _call_mint_on_token(amount: Field, secret_hash: Field){\n        Token::at(storage.token.read()).mint_private(context, amount, secret_hash);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    internal fn _assert_token_is_same(token: Field) {\n        assert(storage.token.read() == token, \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/main.nr"
      },
      "3": {
        "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_portal_content_hash_lib/src/lib.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "41": {
        "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(l1_to_l2_root: Field, storage_contract_address: Field, msg_key: Field, content: Field, secret: Field) -> Field{\n\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging.nr"
      },
      "42": {
        "source": "use crate::constants_gen::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr"
      },
      "43": {
        "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse crate::constants_gen::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start), secret, fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields, [0; L1_TO_L2_MSG_TREE_HEIGHT], L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1],\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message_getter_data.nr"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "58": {
        "source": "\nuse crate::constants_gen::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_l1_to_l2_message.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "63": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "69": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n    \n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/selector.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "82": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "86": {
        "source": "// docs:start:token_brodge_token_interface\nuse dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn mint_public(self: Self, context: PublicContext, to: Field, amount: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_public((Field),Field)\"),\n      [to, amount]\n    );\n  }\n\n  // docs:start:public_burn_interface\n  pub fn burn_public(self: Self, context: PublicContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"burn_public((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:public_burn_interface\n\n  pub fn mint_private(self: Self, context: PublicContext, amount: Field, secret_hash: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_private(Field,Field)\"),\n      [amount, secret_hash]\n    );\n  }\n\n\n  // docs:start:private_burn_interface\n  pub fn burn(self: Self, context: &mut PrivateContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_private_function(\n      self.address,\n      compute_selector(\"burn((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:private_burn_interface\n}\n// docs:end:token_brodge_token_interface\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/token_interface.nr"
      }
    }
  }
}
