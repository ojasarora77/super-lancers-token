/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import EscrowContractArtifactJson from '../artifacts/escrow_contract.json' assert { type: 'json' };

export const EscrowContractArtifact = EscrowContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Escrow;
 */
export class EscrowContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, EscrowContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, EscrowContract.artifact, wallet) as Promise<EscrowContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, owner: FieldLike) {
    return new DeployMethod<EscrowContract>(Point.ZERO, wallet, EscrowContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, owner: FieldLike) {
    return new DeployMethod<EscrowContract>(publicKey, wallet, EscrowContractArtifact, Array.from(arguments).slice(2));
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return EscrowContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** withdraw(token: field, amount: field, recipient: field) */
    withdraw: ((token: FieldLike, amount: FieldLike, recipient: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
