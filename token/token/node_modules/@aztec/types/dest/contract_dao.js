import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { EncodedContractFunction } from './contract_data.js';
/**
 * Converts the given contract artifact into a ContractDao object that includes additional properties
 * such as the address, portal contract, and function selectors.
 *
 * @param artifact - The contract artifact.
 * @param completeAddress - The AztecAddress representing the contract's address.
 * @param portalContract - The EthAddress representing the address of the associated portal contract.
 * @returns A ContractDao object containing the provided information along with generated function selectors.
 */
export function toContractDao(artifact, completeAddress, portalContract) {
    const functions = artifact.functions.map(f => ({
        ...f,
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
    }));
    return {
        ...artifact,
        completeAddress,
        functions,
        portalContract,
    };
}
/**
 * Return public functions from the newly deployed contract to be injected into the tx object.
 * @param newContract - The new contract
 * @returns List of EncodedContractFunction.
 */
export function getNewContractPublicFunctions(newContract) {
    return newContract.functions
        .filter(c => c.functionType === FunctionType.OPEN)
        .map(fn => new EncodedContractFunction(FunctionSelector.fromNameAndParameters(fn.name, fn.parameters), fn.isInternal ?? false, Buffer.from(fn.bytecode, 'base64')));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRyYWN0X2Rhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQW9CLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBc0I3RDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQzNCLFFBQTBCLEVBQzFCLGVBQWdDLEVBQ2hDLGNBQTBCO0lBRTFCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QyxHQUFHLENBQUM7UUFDSixRQUFRLEVBQUUsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDO0tBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBQ0osT0FBTztRQUNMLEdBQUcsUUFBUTtRQUNYLGVBQWU7UUFDZixTQUFTO1FBQ1QsY0FBYztLQUNmLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxXQUF3QjtJQUNwRSxPQUFPLFdBQVcsQ0FBQyxTQUFTO1NBQ3pCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssWUFBWSxDQUFDLElBQUksQ0FBQztTQUNqRCxHQUFHLENBQ0YsRUFBRSxDQUFDLEVBQUUsQ0FDSCxJQUFJLHVCQUF1QixDQUN6QixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFDOUQsRUFBRSxDQUFDLFVBQVUsSUFBSSxLQUFLLEVBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FDbkMsQ0FDSixDQUFDO0FBQ04sQ0FBQyJ9