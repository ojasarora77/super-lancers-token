/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import SchnorrHardcodedAccountContractArtifactJson from '../artifacts/schnorr_hardcoded_account_contract.json' assert { type: 'json' };

export const SchnorrHardcodedAccountContractArtifact = SchnorrHardcodedAccountContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract SchnorrHardcodedAccount;
 */
export class SchnorrHardcodedAccountContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, SchnorrHardcodedAccountContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(
      address,
      SchnorrHardcodedAccountContract.artifact,
      wallet,
    ) as Promise<SchnorrHardcodedAccountContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<SchnorrHardcodedAccountContract>(
      Point.ZERO,
      wallet,
      SchnorrHardcodedAccountContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<SchnorrHardcodedAccountContract>(
      publicKey,
      wallet,
      SchnorrHardcodedAccountContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return SchnorrHardcodedAccountContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** entrypoint(payload: struct) */
    entrypoint: ((payload: {
      function_calls: {
        args_hash: FieldLike;
        function_selector: FieldLike;
        target_address: FieldLike;
        is_public: boolean;
      }[];
      nonce: FieldLike;
    }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** is_valid(message_hash: field) */
    is_valid: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_public(message_hash: field) */
    is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** set_is_valid_storage(message_hash: field, value: boolean) */
    set_is_valid_storage: ((message_hash: FieldLike, value: boolean) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
