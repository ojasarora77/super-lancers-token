import { DeployMethod, Point } from '../index.js';
import { ContractBase } from './contract_base.js';
/**
 * The Contract class represents a contract and provides utility methods for interacting with it.
 * It enables the creation of ContractFunctionInteraction instances for each function in the contract's ABI,
 * allowing users to call or send transactions to these functions. Additionally, the Contract class can be used
 * to attach the contract instance to a deployed contract on-chain through the PXE, which facilitates
 * interaction with Aztec's privacy protocol.
 */
export class Contract extends ContractBase {
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param artifact - Build artifact of the contract.
     * @param wallet - The wallet to use when interacting with the contract.
     * @param portalContract - The portal contract address on L1, if any.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, artifact, wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new Contract(extendedContractData.getCompleteAddress(), artifact, wallet, extendedContractData.contractData.portalContractAddress);
    }
    /**
     * Creates a tx to deploy a new instance of a contract.
     * @param wallet - The wallet for executing the deployment.
     * @param artifact - Build artifact of the contract to deploy
     * @param args - Arguments for the constructor.
     */
    static deploy(wallet, artifact, args) {
        return new DeployMethod(Point.ZERO, wallet, artifact, args);
    }
    /**
     * Creates a tx to deploy a new instance of a contract using the specified public key to derive the address.
     * @param publicKey - Public key for deriving the address.
     * @param wallet - The wallet for executing the deployment.
     * @param artifact - Build artifact of the contract.
     * @param args - Arguments for the constructor.
     */
    static deployWithPublicKey(publicKey, wallet, artifact, args) {
        return new DeployMethod(publicKey, wallet, artifact, args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxEOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQUN4Qzs7Ozs7OztPQU9HO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxRQUEwQixFQUFFLE1BQWM7UUFDdEYsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRSxJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztTQUN4RTtRQUNELE9BQU8sSUFBSSxRQUFRLENBQ2pCLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLEVBQ3pDLFFBQVEsRUFDUixNQUFNLEVBQ04sb0JBQW9CLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUN4RCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsUUFBMEIsRUFBRSxJQUFXO1FBQzFFLE9BQU8sSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBb0IsRUFBRSxNQUFjLEVBQUUsUUFBMEIsRUFBRSxJQUFXO1FBQzdHLE9BQU8sSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNGIn0=