{
  "name": "SchnorrAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+2dB3wVxRPHN3lp9N57R0B9l4QUFAgg2FAQReyahARRilR77x177733ggVs2LBh7733hl38z8Q52VyekPzfzLnzubvPZz6/l/cuezO7s7vfu9t37/XGxmzTyPyzZZCWkSbT27xsKCM7RbkFyaLCwqri/CqvwCtP5pdWlAxNFg6tKCrxSryhJUOn5pcUFFSVFJYUl1aUFidLvcKCKq96aGlBNRWczedjUiLuHCgjRyDuHMfjzoUycgXiznU87s5QRmeBuDs7Hnd3KKO7QNzdHY+7N5TRWyDu3o7H3R/K6C8Qd3/muP2N28+BjH6ibziu9aTyOoCtAutI2om0M2kX0q6k3Ui7k/Yg7Unai7Q3aR/SvqT9SPuTDiAd+B/pELB1qM2wXlpSvazjgF+DLL9aOdZeuP9gsARYnvn3rYw0md7myZVdVChY9lDBsosEyy4WLLtEsOxSwbLLc60yh5CuS7oe6fr+sUj9xM0H6574+3UjMtz8MvFvvx/lWO/5n2db7/mfZ1nv+Z8nrPf8zzOt9/zPM6z3/M9N4Pi4lZEm09xSnZck09ww5jZWHCZFvBkp6iUzRf35n2enqD+7PfzP7XbzP/fbrzm911igDpsyl4n+NzG1t4zA32XW66ZWnTQTiK+5QHzNGhBfcyu+FgLxtRSIr0UD4mtpxddKIL7WAvG1akB8ra342gjEx1xmzTWbtgJ+tuctswTboZ2pfzu0t9qhg0B8HZnLxDI6Wf77sfq+N7E+72jF1onXDy/DOqZfrv93J7nj1sTfeS3xd07hR+cQ47f9i32NfY19/W997fgf+8p/XK+4UeC4uK1pnrN96cLqy99jclfrWL5f/nGaWJ/bedOV14+atugSiN//2/Yv9jX2NfY19jX2NfY19jX2NfY19jX2NfY19jX2VYuv9r2wTMsX5nN7b03XFLqk8KWRQ77kOORLwiFfch3yJcshX/Ic8iXbIV8y/mNf7PURxnrP/9xeR+GPj/Y6im702l5H0Z1e2+soelhx+u/1pNf2Oope9DrPeq+39drXPvS6sfVeX3rdxHqvH71uZr3Xn163sN4bQK9bWe8NpNf2+pJ16HVb671B9Lqd9d5get3Bes+vS7vu/brsar3n12U36z2/Lrtb7/l12cN6z6/LntZ7fl32st7z69KuW78u+1jv+XXZ13rPX//Rz3rPr9/+1nv+OooB1nt+nQ+03rPXW/rv+e0wyHrPv6/v1y3WSWHG6s/9fe2cHZyiHP+13ff8Y5eRJtPbavqefZwy62//WI0tHwY54Eu2Q77kOeRLlkO+5DrkS8IhX3Ic8qWRQ75kpvBlIK8vNfco/TEeN3/MHWj54fs0wPKjP3OdYBn9UvjR3/LDP34/y4++vH7gMt9/5lDbj76WH/7x+1h+9Ob1owDL6JXCj96WH/7xe1l+9OT1o2ZtfY8UfvS0/PCPb3Nid14/atbhd0vhR3fLD//43Sw/mK9B1KzZ75LCj66WH/7xu1h+DOH1oxjLWDeFH0MsP/zjr2v5sR6vHzVjmV++/51df7zwj5Ww9ulH0ITM2ch63+ZMfw2+zaj+enybb/21+TYb59Nrm6sL6LXN5P6XRmye98fbda33/Hlyfes9nymS1ns+f3nWe/68lm+95zNAgfWez0u+T7n0v8xrQPP/3zWg9poa//8F1nCucc2Qf6wmlg+t5HwpafIvx/Y3+9oi8/rYNZ77d0jhSxuHfGnpkC/NHPKlsUO+5DrkS5ZDvrRzyJfWDvnSwiFfmjrkSyOHfMlxyJeEQ760dciX5g750sQhX/Ic8iXbIV8y/mNf/u3+kv+5fa3eZ2T7nk6nQEz4nr/evqn1nn8OZt/n8c+nm1vv+edv9r0f//y/pfWef+7X2novM0Vs/jjV0XrP55FO1nt+TnS23vPHW/v80ecq+36Qn9v2uac/b9j3g/x6833HY7ZP1I0zM0Wcdjn+azt3/GOXkSbT22pyxz5OmfW3fyz7/kh3B3zJdsiXPId8aeKQL80d8qWtQ74kHPIlxyFfGjnkS1OHfGnhkC+tHfKlnUO+ZDnkS65DvjR2yJdmDvnS0iFf2jjkS2YKX5jv+dXc5rHv+fncvbZ7fszfqU4G1z/3tI5rf4+Z+5kWWEbHFPF3suIPfqcc5+Y2gXrCMe/ljNV+SuYMln+w5YN/rIS1z9sZq/16PWN1LP59L3tNoH/eaN8TC55T5srElbTjwq1nirgyTO373j2t/+lixe7v84EV+w+Zq/+P2fea+/b2uWvQb4F8rbndan9fwS/frkP7PmOq/twxsJ/A/Vgv6Id//PbWe71S+NnB8rNnYD+BtSg1+Wf7kWEdt7f1fu8UsdjfB+Feq2OvJbZ9s7cy63Vfy5f+vL4U2OuV6+NLf8uXAby+JKXWia1j+e/H6vvexPp8oBWbxNq5AYE69f+2/Yt95fe1kfVen//YlyaWD/3kfClo8i/10DbQJjiPNrXmUeb1bwX2mOuzTfAaVcLa5+fM1X61pNc4X/hjtN1+zL7WjBX2Wr3eAT/teUtwrV7N/NophR+puN2ep5jvtdTwSPsUftjzuH98+7l7EvOl7Qdu/9F8mZ/OfMk8t+Xb41p9fLHH4UECvqzTAF/steHMa0zz7e/g1MeXIZYvzOtM8+21ovXxZT3Ll6SAL+s3wBd7nai/PtTu5/m8/tXMn17AF/s51rg1sXzoKehLkxTHtuuhnwP14PvQ7T+shwEO1IPvQ6f/sB7WcaAefB86/4f1MNiBevB96Pgf1sO6DtSD70Pmf1gP6ztQD74PvUKuh8bWe/Ya3QLeY5fYx7SvVRZYxyxkjhfLLGKOA/Mm+MMla+KTIiu+El5faq4dllrll1nHsI87jLle7eNmkPnH8N9PWK9n+J3b2g83P+98nzEXi1PsZ78eGvifJtbnxcIx2z/OUmb97R8LrweUW7EWp/Db7vP+5/aP7Ng/XOPv29WKizmHavLZ9hO3NeVzieULcx3X5PMGVvll1jHs427Ie1zPPq6fz/4x/PcT1uuDrDbecPXLf9rY9xnzuTTFfvbrYL43sT4vFY7Z7ldl1t/+sTCf51mxlqbwu8jy2/+8p7Wf3Wf8fe18Zs6hmnwO/tDRmvJ5mOULcx3X5PNwq/wy6xj2cUfwHtezj+vns38M//2E9XqR1cYjVr/8p419nzGfN0ixn/06mO9NrM83EI7Z7ldl1t/+sTCfj7Ri3SCF3/a84n9uX2+1+4y/r53PzDlUk8+2n7itKZ83tHxhruOafB5plV9mHWPDwPuMx/Xs4/r57Jftv5+wXl+ambpu/Db2fcZ8Hp5iP/t1MN+bWJ8H+zZ3zCMCPgXbE/P5LCvW4Sn8tucV/3P7ur3dZ/x97XxmzqGafLb9xG1N+TzC8qWM15eafB4VKL8sxXFH8x7Xs4/r57N/DP/9hPX6dquNR69++U8bl5FiPo9MsZ/9OpjvTazPRwrHXGb5UWb97R8L8/kaK9aRKfy25xX/c/s3Oew+4+9r53MZb1w1+Wz7idua8rnM8oW5jmvyeUwg1tEpjrsR73E9+7h+PvvH8N9PWK8ftdp4o9Uv/2lj32fM51Ep9rNfB/O9ifX5KOGY7X5VZv3tHwvz+V4r1lEp/LbnFf/zjoFyTWBfO5+Zc6gmn20/cVtTPo+2fGGu45p8HmuVX2Ydwz7uON7jevZx/Xz2j+G/n7Bev2q18bjVL/9pY99nzOcxKfazXwfzvYn1+RjhmO1+VWb97R8L8/lpK9YxKfwus/z2P7f+pU6fwc3OZ+Ycqsln20/c1pTPG1m+MNdxTT5vbJVfZh3DPu4mvMf17OP6+ewfw38/Yb3+3GqwTVa//KeNfZ8xn8em2M9+Hcz3JtbnY4VjtvtVmfW3fyzM53esWMem8NueV/zPe5FibvntZl87HysQy7/1zbGWf+0Cvgv4UtIkxbGF1znXXCa21xcH1znb6+G7Wz69bK0770nv22ta7TL99V69rffsdc7B7wPb65vs8Yt5vXVBo4AfuK1p/LLvLzOvqa4Zv+x1S2XWMezj9uM9rmcf1x+//GP47yes1439L3Wa2uugepL6PmMbdkixn/06uG7cXtPQQThmez1ZmfW3fyzM8b+s8SvVeve2lt/+5/ZaDO5nH2AZ9vWFtgHf7HVy9jpJ5vV4a6w/+3nYfQL1JeBLQZMUx7bXufr1FVzn2oTVD68Yy2zGXKb93Gt/W9P45B8/z6z+rv60qvlbzp5fNS/D+n+/THsdp7/ZPJmw/ifL1PUjO8V7OSneyzV1tzzrdSPrdRPr/xoH/LSf720/h8P32f8s19StJ9ZO6G+ZgbILkkWFhVXF+VVegVeezC+tKBmaLBxaUVTilXhDS4ZOzS8pKKgqKSwpLq0oLU6WeoUFVV710NKCaio8k9HP9fnKStoxZzDXp8dYf36y+YmLCztXmb8XwqCuR1pzLFN7y2Buy0LDO+DmWvlWSHEUWPEMpbjrJL5AmyUNL/j4G97E9AeaVANRjkAsJnCcYP01N8KDiUTjFAmUW2z4OodU3MX8bVRr8OMe8PMZyyox/ANOfQbSUrN6lg8OUKXWfsNS7JdJnw8jxc4fvCPLXeecebzhf1Tnw9dQ58Ot/Uasoc5HWHU+MsV+Sfp8JGnCilVibNnA8E/C7+TxjgPccfv5wx33u3ky41+C2c9RjHXJ2NYeZ/2FBWWD+cpK2meLfpl4tRavfuIVSrw6iVd88ao2XvHdFGwzsM3BxoNtAbYl2ASwiWBbgU0C2xpsG7DJYNuCTQHbDmx7sB3AdgTbCWxnsF3AdgXbDawcrAKsEmwqWBVYNdg0sN3BpoPtAbYn2AywmWCzwGaD7QU2B2wu2Dyw+WALwBaC7Q22D9i+YPuB7Q92ANiBYAeZv7+tegjYoab2Ux5tOMXNPustY2oDAdhNZlu+2mfd9hk0fp7FetzCpP3USn9b05UM//h5ZvVZPVzJGLVg/u5Tps+fVTWv1vWM4KiUkSIy+3mY9m/J+Z/7n4leO0iYuqljO8x1nNFGZvhnrQ/v7+sd/nYY6eFWY2RY9VVzQTZFnWVYrzNpn8w17JPxL+X8W3cQSwY/OAz8JytYrIC8wDETzMe2E+T/ncOrqnFLeocZPh443MgkbiZz/XHGfEStsmDf8vzCoqqhyaKqktKSqtLi6qHFycry6uqpxcnCyopkRUVhUbLAK6iuKM5PVuSXwmFLq4ZWejV+hcUaRxh+1sDtSBNfAGJpnCMFyj3KuH0BCOM+ir+NUvrKMdAdJVDu0Ya3Y2InxDJ9gAuDXsYYmUmANS8C9HIM6bEmYvSCgdv0ghUgTS92gqRLL8cYvs53rNFBL5wxH2f00ctxhneQ9LfjTUwvLI1zvEC5Jxi36QXjPoG/jUTo5VjylbvcEw1vx8ROiGWGSS8bGZlJgDUvAvRyEunJJmL0goHb9IIVIE0vdoKkSy8nGb7Od7LRQS+cMS8y+uhlkeEdJP3tFBPTC0vjnCJQ7qnGbXrBuE/lbyMRejmZfOUu9zTD2zGxE2KZYdLLWCMzCbDmRYBeTic9w0SMXjBwm16wAqTpxU6QdOnldMPX+c4wOuiFM+YzjT56OdPwDpL+dpaJ6YWlcc4SKPds4za9YNxn87eRCL2cQb5yl3uO4e2Y2AmxzDDpZZyRmQRY8yJAL+eSnmciRi8YuE0vWAHS9GInSLr0cq7h63znGR30whnz+UYfvZxveAdJf7vAxPTC0jgXCJR7oXGbXjDuC/nbSIReziNfucu9yPB2TOyEWGaY9LKxkZkEWPMiQC8Xk15iIkYvF5va9IIVIE0vdoKkSy8XG77Od4nRQS+cMV9q9NHLpYZ3kPS3y0xMLyyNc5lAuZcbt+kF476cv41E6OUS8pW73CsMb8fETohlhkkvmxiZSYA1LwL0ciXpVSZi9IKB2/SCFSBNL3aCpEsvVxq+zneV0UEvnDFfbfTRy9WGd5D0t2tMTC8sjXONQLnXGrfpBeO+lr+NROjlKvKVu9zrDG/HxE6IZYZJL5samUmANS8C9HI96Q0mYvSCgdv0ghUgTS92gqRLL9cbvs53g9FBL5wx32j00cuNhneQ9LebTEwvLI1zk0C5Nxu36QXjvpm/jUTo5QbylbvcWwxvx8ROiGWGSS+bGZlJgDUvAvRyK+ltJmL0goHb9IIVIE0vdoKkSy+3Gr7Od5vRQS+cMd9u9NHL7YZ3kPS3O0xMLyyNc4dAuXcat+kF476Tv41E6OU28pW73LsMb8fETohlhkkvmxuZSYA1LwL0cjfpYhMxesHAbXrBCpCmFztB0qWXuw1f51tsdNALZ8z3GH30co/hHST97V4T0wtL49wrUO59xm16wbjv428jEXpZTL5yl3u/4e2Y2AmxzDDpZbyRmQRY8yJAL0tIl5qI0QsGbtMLVoA0vdgJki69LDF8nW+p0UEvnDE/YPTRywOGd5D0twdNTC8sjfOgQLkPGbfpBeN+iL+NROhlKfnKXe7DhrdjYifEMsOkly2MzCTAmhcBenmEdJmJGL1g4Da9YAVI04udIOnSyyOGr/MtMzrohTPmR40+ennU8A6S/vaYiemFpXEeEyj3ceM2vWDcj/O3kQi9LCNfuct9wvB2TOyEWGaY9LKlkZkEWPMiQC9Pki43EaMXDNymF6wAaXqxEyRdennS8HW+5UYHvXDG/JTRRy9PGd5B0t+eNjG9sDTO0wLlPmPcpheM+xn+NhKhl+XkK3e5zxrejomdEMsMk14mGJlJgDUvAvTyHOkKEzF6wcBtesEKkKYXO0HSpZfnDF/nW2F00AtnzM8bffTyvOEdJP3tBRPTC0vjvCBQ7ovGbXrBuF/kbyMRellBvnKX+5Lh7ZjYCbHMMOllopGZBFjzIkAvL5O+YiJGLxi4TS9YAdL0YidIuvTysuHrfK8YHfTCGfOrRh+9vGp4B0l/e83E9MLSOK8JlPu6cZteMO7X+dtIhF5eIV+5y33D8HZM7IRYZpj0spWRmQRY8yJAL2+SvmUiRi8YuE0vWAHS9GInSLr08qbh63xvGR30whnz20YfvbxteAdJf3vHxPTC0jjvCJT7rnGbXjDud/nbSIRe3iJfuct9z/B2TOyEWGaY9DLJyEwCrHkRoJf3ST8wEaMXDNymF6wAaXqxEyRdennf8HW+D4wOeuGM+UOjj14+NLyDpL99ZGJ6YWmcjwTK/di4TS8Y98f8bSRCLx+Qr9zlfmJ4OyZ2QiwzTHrZ2shMAqx5EaCXT0k/MxGjFwzcphesAGl6sRMkXXr51PB1vs+MDnrhjPlzo49ePje8g6S/fWFiemFpnC8Eyv3SuE0vGPeX/G0kQi+fka/c5X5leDsmdkIsM0x62cbITAKseRGgl69JvzERoxcM3KYXrABperETJF16+drwdb5vjA564Yz5W6OPXr41vIOkv31nYnphaZzvBMr93rhNLxj39/xtJEIv35Cv3OX+YHg7JnZCLDNMeplsZCYB1rwI0MuPpCtNxOgFA7fpBStAml7sBEmXXn40fJ1vpdFBL5wx/2T00ctPhneQ9LefTUwvLI3zs0C5vxi36QXj/oW/jUToZSX5yl3ur4a3Y2InxDLDpJdtjcwkwJoXAXr5jfR3EzF6wcBtesEKkKYXO0HSpZffDF/n+93ooBfOmP8w+ujlD8M7SPrbnyamF5bG+VOg3FXGbXrBuFfxt5EIvfxOvnKX+5fh7Zj+jBomvUwxMpMAa14E6MWvhIyMiNELHsGmF6wAaXqxEyRdekHH0y3L73wZGTrohTPmzAx99JKZwTtI/pPnGTG9sDQOViR3uVmMSS8Vd1YGexuJ0EsG+cpdbjZzx8ROiGWGSS/bGZlJgDUvAvSSQ5WQGzV6yQnQS24I9GInSLr0ksM4qOUqoRfOmPMU0kueEL00iumFp3EaCdBLY8fpBeNurIRecslX7nKbCNBLk5DpZXsjMwmw5kWAXppSJTSLGr00DdBLsxDoxU6QdOmlKeOg1kwJvXDG3FwhvTQXopcWMb3wNE4LAXpp6Ti9YNwtldBLM/KVu9xWAvTSKmR62cHITAKseRGgl9ZUCW2iRi+tA/TSJgR6sRMkXXppzTiotVFCL5wxt1VIL22F6KVdTC88jdNOgF7aO04vGHd7JfTShnzlLreDAL10CJledjQykwBrXgTopSNVQqeo0UvHAL10CoFe7ARJl146Mg5qnZTQC2fMnRXSS2cheukS0wtP43QRoJeujtMLxt1VCb10Il+5y+0mQC/dQqaXnYzMJMCaFwF66U6V0CNq9NI9QC89QqAXO0HSpZfujINaDyX0whlzT4X00lOIXnrF9MLTOL0E6KW34/SCcfdWQi89yFfucvsI0EufkOllZyMzCbDmRYBe+lIl9IsavfQN0Eu/EOjFTpB06aUv46DWTwm9cMbcXyG99BeilwExvfA0zgABehnoOL1g3AOV0Es/8pW73HUE6GWdkOllFyMzCbDmRYBeBlElDI4avQwK0MvgEOjFTpB06WUQ46A2WAm9cMY8RCG9DBGil3VjeuFpnHUF6GU9x+kF415PCb0MJl+5y11fgF7WD5ledjUykwBrXgToxR/FvKjRSzJAL14I9GInSLr0kmQc1Dwl9MIZc75CeskXopeCmF54GqdAgF4KHacXjLtQCb145Ct3uUMF6GVoyPSym5GZBFjzIkAvRVQJxVGjl6IAvRSHQC+7GT56KWIc1IqV0AtnzCUK6aVEiF5KY3rhaZxSAXoZ5ji9YNzDlNBLMfnKXe4GAvSyQcj0Um5kJgHWvAjQy4ZUCcOjRi8bBuhleAj0YidIuvSyIeOgNlwJvXDGPEIhvYwQopeRMb3wNM5IAXopc5xeapJSCb0MJ1+5yx0lQC+jQqaXCiMzCbDmRYBeRlMljIkavYwO0MuYEOjFTpB06WU046A2Rgm9cMa8kUJ62UiIXsbG9MLTOGMF6GWc4/SCcY9TQi9jyFfucjcWoJeNQ6aXSiMzCbDmRYBeNqFK2DRq9LJJgF42DYFe7ARJl142YRzUNlVCL5wxb6aQXjYTopfNY3rhaZzNBehlvOP0gnGPV0Ivm5Kv3OVuIUAvW4RML1ONzCTAmhcBetmSKmFC1OhlywC9TAiBXuwESZdetmQc1CYooRfOmCcqpJeJQvSyVUwvPI2zlQC9THKcXjDuSUroZQL5yl3u1gL0snXI9FJlZCYB1rwI0Ms2VAmTo0Yv2wToZXII9GInSLr0sg3joDZZCb1wxrytQnrZVohepsT0wtM4UwToZTvH6QXj3k4JvUwmX7nL3V6AXrYPmV6qjcwkwJoXAXrZgSphx6jRyw4BetkxBHqxEyRdetmBcVDbUQm9cMa8k0J62UmIXnaO6YWncXYWoJddHKcXjHsXJfSyI/nKXe6uAvSya8j0Ms3ITAKseRGgl92oEsqjRi+7BeilPAR6sRMkXXrZjXFQK1dCL5wxVyiklwoheqmM6YWncSoF6GWq4/SCcU9VQi/l5Ct3uVUC9FIVMr3sbmQmAda8CNBLNVXCtKjRS3WAXqaFQC92gqRLL9WMg9o0JfTCGfPuCulldyF6mR7TC0/jTBeglz0cpxeMew8l9DKNfOUud08BetkzZHqZbmQmAda8CNDLDKqEmVGjlxkBepkZAr3YCZIuvcxgHNRmKqEXzphnKaSXWUL0MjumF57GmS1AL3s5Ti8Y915K6GUm+cpd7hwBepkTMr3sYWQmAda8CNDLXKqEeVGjl7kBepkXAr3YCZIuvcxlHNTmKaEXzpjnK6SX+UL0siCmF57GWSBALwsdpxeMe6ESeplHvnKXu7cAvewdMr3saWQmAda8CNDLPlQJ+0aNXvYJ0Mu+IdCLnSDp0ss+jIPavkrohTPm/RTSy35C9LJ/TC88jbO/AL0c4Di9YNwHKKGXfclX7nIPFKCXA0OmlxlGZhJgzYsAvRxElXBw1OjloAC9HBwCvdgJki69HMQ4qB2shF44Yz5EIb0cIkQvh8b0wtM4hwrQy2GO0wvGfZgSejmYfOUu93ABejk8ZHqZaWQmAda8CNDLEVQJR0aNXo4I0MuRIdCLnSDp0ssRjIPakUrohTPmoxTSy1FC9HJ0TC88jXO0AL0c4zi9YNzHKKGXI8lX7nKPFaCXY0Oml1lGZhJgzYsAvRxHlXB81OjluAC9HB8CvdgJki69HMc4qB2vhF44Yz5BIb2cIEQvJ8b0wtM4JwrQy0mO0wvGfZISejmefOUu92QBejk5ZHqZbWQmAda8CNDLIqqEU6JGL4sC9HJKCPRiJ0i69LKIcVA7RQm9cMZ8qkJ6OVWIXk6L6YWncU4ToJfTHacXjPt0JfRyCvnKXe4ZAvRyRsj0speRmQRY8yJAL2dSJZwVNXo5M0AvZ4VAL3aCpEsvZzIOamcpoRfOmM9WSC9nC9HLOTG98DTOOQL0cq7j9IJxn6uEXs4iX7nLPU+AXs4LmV7mGJlJgDUvAvRyPlXCBVGjl/MD9HJBCPRiJ0i69HI+46B2gRJ64Yz5QoX0cqEQvVwU0wtP41wkQC8XO04vGPfFSujlAvKVu9xLBOjlkpDpZa6RmQRY8yJAL5dSJVwWNXq5NEAvl4VAL3aCpEsvlzIOapcpoRfOmC9XSC+XC9HLFTG98DTOFQL0cqXj9IJxX6mEXi4jX7nLvUqAXq4KmV7mGZlJgDUvAvRyNVXCNVGjl6sD9HJNCPRiJ0i69HI146B2jRJ64Yz5WoX0cq0QvVwX0wtP41wnQC/XO04vGPf1SujlGvKVu9wbBOjlhpDpZb6RmQRY8yJALzdSJdwUNXq5MUAvN4VAL3aCpEsvNzIOajcpoRfOmG9WSC83C9HLLTG98DTOLQL0cqvj9IJx36qEXm4iX7nLvU2AXm4LmV4WGJlJgDUvAvRyO1XCHVGjl9sD9HJHCPRiJ0i69HI746B2hxJ64Yz5ToX0cqcQvdwV0wtP49wlQC93O04vGPfdSujlDvKVu9zFAvSyOGR6WWhkJgHWvAjQyz1UCfdGjV7uCdDLvSHQi50g6dLLPYyD2r1K6IUz5vsU0st9QvRyf0wvPI1zvwC9LHGcXjDuJUro5V7ylbvcpQL0sjRketnbyEwCrHkRoJcHqBIejBq9PBCglwdDoBc7QdKllwcYB7UHldALZ8wPKaSXh4To5eGYXnga52EBennEcXrBuB9RQi8Pkq/c5S4ToJdlIdPLPkZmEmDNiwC9PEqV8FjU6OXRAL08FgK92AmSLr08yjioPaaEXjhjflwhvTwuRC9PxPTC0zhPCNDLk47TC8b9pBJ6eYx85S53uQC9LA+ZXvY1MpMAa14E6OUpqoSno0YvTwXo5ekQ6MVOkHTp5SnGQe1pJfTCGfMzCunlGSF6eTamF57GeVaAXp5znF4w7ueU0MvT5Ct3uSsE6GVFyPSyn5GZBFjzIkAvz1MlvBA1enk+QC8vhEAvdoKkSy/PMw5qLyihF86YX1RILy8K0ctLMb3wNM5LAvTysuP0gnG/rIReXiBfuct9RYBeXgmZXvY3MpMAa14E6OVVqoTXokYvrwbo5bUQ6MVOkHTp5VXGQe01JfTCGfPrCunldSF6eSOmF57GeUOAXt50nF4w7jeV0Mtr5Ct3uW8J0MtbIdPLAUZmEmDNiwC9vE2V8E7U6OXtAL28EwK92AmSLr28zTiovaOEXjhjflchvbwrRC/vxfTC0zjvCdDL+47TC8b9vhJ6eYd85S73AwF6+SBkejnQyEwCrHkRoJcPqRI+ihq9fBigl49CoBc7QdKllw8ZB7WPlNALZ8wfK6SXj4Xo5ZOYXnga5xMBevnUcXrBuD9VQi8fka/c5X4mQC+fhUwvBxmZSYA1LwL08jlVwhdRo5fPA/TyRQj0YidIuvTyOeOg9oUSeuGM+UuF9PKlEL18FdMLT+N8JUAvXztOLxj310ro5QvylbvcbwTo5ZuQ6eVgIzMJsOZFgF6+pUr4Lmr08m2AXr4LgV7sBEmXXr5lHNS+U0IvnDF/r5Bevheilx9ieuFpnB8E6OVHx+kF4/5RCb18R75yl7tSgF5WhkwvhxiZSYA1LwL08hNVws9Ro5efAvTycwj0cojho5efGAe1n5XQC2fMvyikl1+E6OXXmF54GudXAXr5zXF6wbh/U0IvP5Ov3OX+LkAvv4dML4camUmANS8C9PIHVcKfUaOXPwL08mcI9GInSLr08gfjoPanEnrhjHmVQnpZJUQvf8X0wtM4fwnQC7aIX5aL9LLKni4M70DCTRl/kq/c5WZk8tMLltnIf726etnbbzBjm/WkcjLB6QRYFlg2WA5YLlgexgTWGKwJWFOwZmDNwVqAtQRrBdYarA1YW7B2YO3BOoB1BOsE1hmsC1hXsG5g3cF6gPUE60UV5tcj+pJnVv+dCPydFfg7O/B3TuDv3MDfeYG/GwX+bhz4u0ng76aBv5sF/m4e+LtF4O+Wgb9bBf5uHfi7TeDvtoG/2wX+bh/4u0Pg746BvzsF/u4c+LtL4O+ugb+7Bf7uHvi7R+DvnoG/e2XKg5zdZ9IdOzIZx/cP8mRALlh/6cJrIpOnLGyLLMb6+9D5+qsp2stOP+Z8itnLYay/j1yuv8J//PRy04s5acXs5THW38eu1l9+LT+9Rv9/zMlAzF5jxvr7xMH6K6qu46fX5P+LuSRFzF5Txvr71LX6K0npp9es4TEX/0vMXnPG+vvMpfor/lc/vRYNizl/DTF7LRnr73NX6q94jX56reofc+VaYvZaM9bfFy7UX/Fa/fTa1C/mZD1i9toy1t+X/3X9Jevlp9du7TEPrWfMXnvG+vvqv6y/wnr76XVYY8yF1Q2I2evIWH9f/1f1V9wgP71O/x5zSQNj9joz1t83/0H9lVY32E+vS+qYk/9HzF5Xxvr7Nuz6S/5ffnrd6sbs/Z8xe90Z6++7MOtv6v/tp9ejdswFacTs9WSsv+9Dqr/86rT89Hpl8l1LtK/ZpVt/P4RUf8n0No/xOpv3EWP9/aik/hivE3mfMNbfSiX1x3idw/uMsf5+UlJ/jOfp3heM9fezkvpjPM/0vmKsv1+U1B/jeZL3DWP9/aqk/hg53/uOsf5+U1J/jJzq/cBYf78rqT9GzvJWMtbfH0rqj5ETvJ8Z6+9PJfXHOM95vzLW3yol9cc4Tnu/M9bfX0rqj3Gc8f5krD9ccKih/hj7iceYMx5n/eF6NvxGxhCwVWDrkvrlH27+Xud2LOnJpGeQnkd6CelVpDeQ3ka6mHQp6TLS5aQrSF8hfYv0A9LPSL8hXUn6O2kGfbEil7QZaRvSTqQ9SPuRDib1SItJh5OOId2UdALpZNIdSctJp5HOJJ1Hui/pwaRHkh5PegrpWaQXkF5Geg3pTaR3kN5L+iDpY6T+Dwv7P9Hn/9iN/9h4/wGs/qPM/IeC+F+v9b+o0pPywF/v2JPUXx/pr5v011P66yz99Zf+ukx/vaa/jtNf3+mv+/TXg/rrRP31o/66Un+9qb8O1V+f6q9b9dez+utc/fWv/rpYf72sv47WX1/rr7v11+P663T99bv+ut7emabWxr0+ujfj9e2wvijSyfCOQ/7WJzP+oghL42BFcpfblzFRpeLum8neRmv8xlm69cBZp/0YbxolzOpOZ28uDySSfnZU4mcHwz8wozaj1/0hxwaADQRbB2wQ2GCwIWDrgq0Htj4YfgfYA8sHa0H/i182Cg7u/ten7bpoZOp+nTrHel3GFJ/AZJJEoM6z4jCBeJtTLDm8x52Kx8o2tbfgpFWWoj5rAI1eV82as6BqQdXEBRUzpleOWzCrcv702bPGlM+YYSeCfxA/IRIpggy+n2VVSC69zrbe8/8v19IM7p6Bo2NnU7c2kmluYX35f2CmzAjEXB/5dl0U0B+FmRH78j8G/mfAGa5jYGUWZvJ/x7RQKMG4r80MZECmv78nVl1dkOl+/WUy1x9nzEOtsrySgvz84gLcr2QqpOnUyvyS/PypFYXJymR5ZX5VaaFXWl2YX1hQObWyAsos96qT1eWVpdUlf/sV1rnrUMZ2sv0tis9deRqnSODctdjxc1eMu1jo3FVioigWmIBKmDsmVieWmWnCe0TTOgoprZT+GBY1SisVpDSszGECnWSYEkpbh5HSSjPdrz9uSuOMeQOFlLaBEKVtGFMaT+NsKEBpwx2nNIx7uBJKG0a+cpc7QoDSRoRMaYMUUtpI+qMsapQ2UpDSsDLLBDpJmRJKG8RIaSMz3a8/bkrjjHmUQkobJURpo2NK42mc0QKUNsZxSsO4xyihtDLylbvcjQQobaOQKW19hZQ2lv4YFzVKGytIaViZ4wQ6yTgllLY+I6WNzXS//rgpjTPmjRVS2sZClLZJTGk8jbOJAKVt6jilYdybKqG0ceQrd7mbCVDaZiFTWlIhpW1Of4yPGqVtLkhpWJnjBTrJeCWUlmSktM0z3a8/bkrjjHkLhZS2hRClbRlTGk/jbClAaRMcpzSMe4ISShtPvnKXO1GA0iaGTGmeQkrbiv6YFDVK20qQ0rAyJwl0kklKKM1jpLStMt2vP25K44x5a4WUtrUQpW0TUxpP42wjQGmTHac0jHuyEkqbRL5yl7utAKVtm1mXHLjaDL+L2k+gHqZkyrZ/Mr2t5hv/UwTi7tHI7bzHb85LxN2zkQ5wYGwfr2cjt3O8o1CO93E8xwcI5XhfJTnO2D5eX8dzvINQjg9wPMfzhXJ8oJIcZ2wfb6DjOT6O2trwlivi63hFvk4K0de0fz7ZyPT3wY7n/mChcW6IknGOsX28IY639RChtl4/pLZ26NzR44wZ2wMfhuVfGES+xkf0FpIOIy0jbQy2HbVjrln9QK3B9PkQ0nVJ1yMdRzqedBJpK7DtrfL8i5EDzd+fBxXvmOzQwP13bOD+OzVw/50buP8uDdx/1wbuv1sD9y9v4P4VDdy/soH7T23g/lUN3L+6gftPa+D+uzdw/+nW/pn/sn8e2B713G/Peu43o577zaznfrPqud/seu63Vz33m1PP/ebWc7959dxvfj33W1DP/RbWc7+967nfPvXcb19rvym03/Y0Pudnps7boO5A++1IuhPpzqS7kO5KuhtpOWkFaSXpVNIq0mrSaaS7k04n3YN0T9IZpDNJZ5HOJt2LdA7pXNJ5pPNJF5AuJN2bdB/SfetZP7GGo4PB9ksx/vandtqOdD/S1mD7+52DNm7268xY1gGZfBwZP4G5tp9RfwLzJfT6QMixg8AOBjsE7FCww8AOBzsC7Eiwo8COBjsG7Fiw48COBzsB7ESwk8BOBlsEdgrYqWCngZ0OdgbYmWBngZ0Ndg7YuWDngZ0PdgHYhWAXgV0MdgnYpWCXgV0OdgXYlWBXgV0Ndg3YtWDXgV0PdgPYjWA3gd0MdgvYrWC3gd0OdgfYnWB3gd0NthjsHrB7we4Dux9sCdhSsAfAHgR7COxhsEfAloE9CvYY2ONgT4A9CbYc7Cmwp8GeAXsW7DmwFWDPg70A9iLYS2Avg70C9irYa2Cvg70B9ibYW2Bvg70D9i7Ye2Dvg30A9iHYR2Afg30C9inYZ2Cfg30B9iXYV2Bfg30D9i3Yd2Dfg/0A9iPYSrCfwH4G+wXsV7DfwH4H+wPsT7BVYH9l/j1AZIBlgiXAssCywXLAcsHywBqBNQZrAtYUrBlYc7AWYC3BWoG1BmsD1hasHVh7sA5gHcE6gXUG6wLWFaxbIn6itx2vzBO9y710nujdhl5Xls+YMXHu9IXl86v853nbQ4pfvD+0qHqW9wGZdeshmeYW1mpcHLu5fE7hLlfZtVbjdqcs6JGI2GpcDFxqNS5WJhr7YpiETIJxr8a1O0K6q3G7J9yvv0zm+uOMuadVlpbVuD0Z28n2t1ciXo3L0ji9Evzl9mZMeqm4eyfY20jk7nYP8pV9pRpzx8ROiGXSSU8olHaIQkrrS3nXL2qU1leQ0rAy+wl0kn5KKO0QRkrrm3C//rgpjTPm/goprb8QpQ2IKY2ncQYIUNpAxykN4x6ohNL6ka/c5a4jQGnrhExphyqktEGUd4OjRmmDBCkNK3OwQCcZrITSDmWktEEJ9+uPm9I4Yx6ikNKGCFHaujGl8TTOugKUtp7jlIZxr6eE0gaTr+yr6AUobf2QKe0ohZSWpLzzokZpSUFKw8r0BDqJp4TSjmKktGTC/frjpjTOmPMVUlq+EKUVxJTG0zgFApRW6DilYdyFSijNI1+5yx0qQGlDQ6a0oxVSWhHlXXHUKK1IkNKwMosFOkmxEko7mpHSihLu1x83pXHGXKKQ0kqEKK00pjSexikVoLRhjlMaxj1MCaUVk6/c5W4gQGkbhExpxyiktA0p74ZHjdI2FKQ0rMzhAp1kuBJKO4aR0jZMuF9/3JTGGfMIhZQ2QojSRsaUxtM4IwUorcxxSqtJSiWUNpx85S53lACljQqZ0roJTQLMeVGL0kZT3o2JGqWNFqQ0rMwxAp1kjBJK68Yw4PqUNjrhfv1xUxpnzBsppLSNhChtbExpPI0zVoDSxjlOaRj3OCWUNoZ85S53YwFK2zgh94sr/lNDuOthk4Rs+yfT22qe8LWJxJIrx5/Uj0/Kkog7X8kTrBnbx8tv5HaOdxTK8aGO5/hBQjlepCTHGdvHK3I8xzsI5Xip4zl+rFCOD1OS44zt4w1zPMeRVTcJiauT6W01S9m1+FqsyNfhIfrK8eswEmPTcMf76WFCY/IIJWMyY/t4Ixxv68OF2nqUkl+H4TyP4owZ28P+dRg8F8CnpuMzvVD7kQ4mxV+H2ZTa0f51mMPo/w4nPYL0SFKP/r+YdDgp/jrMZlZ5/hNo29Hn7Uk7kHYk7UTambQp2OZWOYuonM3o82PJj+NIjyc9gfRE0pNITyZdRHoK6amkp5GeTnoG6ZmkZ5GeTXoO6bmk55GeT3oB6YWkF5FeTHoJ6aWkl5FeTnoF6ZWkV5FeTXoN6bWk15FeT3oD6Y2kN5HeTHoL6a2kt5HeTnoH6Z2kd5HeTbqY9B7Se0nvI72fdAnpUtIHSB8kfYj0YdJHSJeRPkr6GOnjpE+QPkm6nPQp0qdJnyF9lvQ50hWkz5O+QPoi6UukL5O+Qvoq6Wukr5O+Qfom6Vukb5O+Q/ou6Xuk75N+QPoh6UekH5N+Qvop6Wekn5N+Qfol6VekX5N+Q/ot6Xek35P+QPoj6UrSn0h/Jv2F9FfS30h/J/2D9E/SVaR/kRrqvxmkmaQJ0izSbNIc0lzSPNJG/vhF2sQfN0ibkTYnbUHa0h+nSFuTtiFtS7o5aRfSrqSDwMZb45KPpAdSfJvSfuP98sG2oJ2452C8br2FwBy8pePXrvHXOfAXQLjjnsAYd1g3QrsZXnbwt4nxjVCexpkocCN0K8dvhGLcWwmdrPtbZqDsdOuBs04n8Q0kof3kD+dAIulnVyV+djH8AzNqM3q9NSTFNmCTwbYFmwK2Hdj2YDuA7Qi2E9jOYLuA7ZqIf6LFjlfmJ1qSU9P5iZZO9Lpq1pwFVQuqJi6omDG90v+RljHlM2bYieAfxE+IRIogg+878UMtODp2N3VrI5nmFtYi3skJmRGIuT5qLeLdjbKgPGqLeHcTXMSLlVkucP5VrmQR72TGRby7Jdyvv0zm+uOMuULhIt4KoUW8lfG5K0/jVAqcu051/NwV454qdO4qMVFMFZiAqgQW8VYlwv2q1bYKKa2a8m5a1CitWpDSsDKnCXSSaUoobVtGSqtOuF9/3JTGGfPuCiltdyFKmx5TGk/jTBegtD0cpzSMew8llDaNfOUud08BStszZEqbopDSZlDezYwapc0QpDSszJkCnWSmEkqbwkhpMxLu1x83pXHGPEshpc0SorTZMaXxNM5sAUrby3FKw7j3UkJpM8lX7nLnCFDanJApbSeFlDaX8m5e1ChtriClYWXOE+gk85RQ2k6MlDY34X79cVMaZ8zzFVLafCFKWxBTGk/jLBCgtIWOUxrGvVAJpc0jX7nL3VuA0vYOmdJ2Vkhp+1De7Rs1SttHkNKwMvcV6CT7KqG0nRkpbZ+E+/XHTWmcMe+nkNL2E6K0/WNK42mc/QUo7QDHKQ3jPkAJpe1LvnKXe6AApR0YMqXtopDSDqK8OzhqlHaQIKVhZR4s0EkOVkJpuzBS2kEJ9+uPm9I4Yz5EIaUdIkRph8aUxtM4hwpQ2mGOUxrGfZgSSjuYfOUu93ABSjs8IfcIcPwu6iSBejgiIdv+yfS2mm/8HyEQ9xjHHx2L35yXiHsjJY8pZGwfbyPHH1PYVSjHN3Y8x7cRyvFNlOQ4Y/t4mzie412Ecnxzx3N8V6EcH68kxxnbxxvveI7Po7Y2vOWK+LqvIl8PDtFXjsdqS/T3CY7n/nZC49xEJeMcY/t4Ex1v6+2F2nprJY/V5jw32VrwsdrI1/h413LSaaQzSfGx2kdSO9qP1d6OPt+edAfSHUnnke5LejApPlb7KKs8f8geaP7+PKh4x+ToBu5/TAP3P7aB+x/XwP2Pb+D+JzRw/xMbuP9JDdz/5Abuv6iB+5/SwP1PbeD+pzVw/9MbuP8ZDdz/TGv/zH/ZPw/srHrud3Y99zunnvudW8/9zqvnfufXc78L6rnfhfXc76J67ndxPfe7pJ77XVrP/S6r536X13O/K+q535XWflNov6NofN41kTpvg3o07XcM6bGkx5EeT3oC6YmkJ5GeTLqI9BTSU0lPIz2d9AzSM0nPIj2b9BzSc0nPIz2f9ALSC0kvIr2Y9BLSS0kvI72c9ArSK+tZP7GGo4PBrkox/m5N7XQk6VWk+Bj7qxN1V8lw8y/+HGtnq3ymcjlXynjBN+z6uIYq8tpExFbKYOBLrGCvtW5+cScJJggmCvdJ0mShk6REen4mA3561yT4Yr6W7yalN1nJBQXO+rtuDWWVFFdVVBcXFpQnC6sroJyi6qqC8vxSr7qkAIovKPQqyquSUwsriosKi0qqi0P7zYjr+Nq81sqZ6xPxyhmWxrk+wV/uDYxJLxX3DQn2NhK5En0t+cpd7pSQJqBkA7egn5y5dCPjBDSF+YofDmLo3ygT3vrwdCbk6tpbZQp3Raj3Jkqwm9dAvaNT1FmQekebtVNvqnLWSr3cjeT60i5skJsEBqibEvwd7GbqYPaW7oAV2Djby7uZcfC7ha+zV/v1eQt/fdbp/Dc5Wp+3MvdLf+M+A7mWMebbmCcMiWWwtwqMRds7fisX475NIO4dlJxlM7aPt4OS29c3Mfbr2xnHWKn8vj0hM15wtrXEJeoJAnHfwRg3QjhebfGvxmDZeOnfN/w8eLur0MSX91P5bNfHnQRSd63hRKdXivoLnuj0Mms/0UlVjuoTHb+isBJ7CvmLDXOXQOe8SwgsXT7RuYtxMrvb8UEd/btbIG/uVpI3dzqaN4sdzxupW5H3CMfNAWmLBfrLzgpO6u4RiHsXJSd1jO3jccYc1tX5e4TGc8Psp10X99JkcV8MrQ3f/Iq6VxBasWHuExhU7osgtN7HCB/3Ow4f6N/9Anlzv5K8udfRvFmiAN6WCORNuRKIYQQPjzNmnIhzTd2Nu04l5i/XfVzK6aPWhipU4OMD3MnE7SBeKnlAYPSsdHTxV2Cr1ZPSjflBxhm8UsGlgwcF8uahBO8MlGPqbpz1KlG3DymYgR6WunTAfRP7CMYO/oiCm9gSnXKZ46eOGPfVAnFXOT4IYyd8RCDuaje/OlTHz0cZ+yNjW3vVjdRMYv985YQ7N5cpmMQe1TKJdWcs6zHGToMdOmHqbtwN1c3INBS3n12V+NmF0U/7hskl9PpxSIonwJ4EWw72FNjTYM+APQv2HNgKsOfBXgB7EewlsJfBXgF7Few1sNfB3gB7E+wtsLfB3gF7F+w9sPfBPgD7EOwjsI/BPgH7FOwzsM/BvgD7EuwrsK/BvgH7Fuw7sO/BfgD7EWwl2E9gP4P9AvYr2G9gv4P9AfYn2CqwvzDhYVTOAMsES4BlgWWD5YDlguWBNQJrDNYErClYM7DmYC3AWoK1AmsN1gasLVg7sPZgHcA6gnUC6wzWBawrWDew7mA9wHqC9QLrDdYHrC9YP7D+YAPABoKtAzYIbDDYELB1wdYDWx8MZxUPLB+sAKwQbChYEVgxWAlYKdgwsA3ANgQbDjYCbCRYGdgosNFgY8A2AhsLNg5sY7BNwDYF2wxsc7DxYFuAbQk2AWwi2FZgk8C2BtsGbDLYtmBTwLYD2x5sB7AdwXYC2xlsF7BdwXYDKwerAKsEmwpWBVYNNg1sd6xnysVGpu73OBtZ45Z9Yy/T1N7sibeMqb8IfG+0ZoVknhWHCcTbnGLJYT1uuYfHyja1t4zA32Up6hN9bUOvK8tnzJg4d/rC8vlV4xbMqpw/ffYse0jxi/eHlkSK8ILvZ1lV4V/ZzLbe8/8v19IM7jEWH8L9WKJuPSTT3MJaHPCkFBzx+lnrp12mU8vvkRWxB1Zg4FI/7YKVicZ9lollMvkoeon4SYYrSP5Pu0zPcr/+uG9Qcsa8p1WWlp922ZOxnWx/Z2TFD6hgaZwZWfzlzmRMeqm4Z2axt5HICo89yFfucmcxd0zshFhmpgnvAQvLFVLabMq7vaJGabMFKQ0rcy+BTrKXEkpbzkhps7Pcrz9uSuOMeY5CSpsjRGlzY0rjaZy5ApQ2z3FKw7jnKaG0vchX7nLnC1Da/JAp7SmFlLaA8m5h1ChtgSClYWUuFOgkC5VQ2lOMlLYgy/3646Y0zpj3VkhpewtR2j4xpfE0zj4ClLav45SGce+rhNIWkq/c5e4nQGn7hUxpKxRS2v6UdwdEjdL2F6Q0rMwDBDrJAUoobQUjpe2f5X79cVMaZ8wHKqS0A4Uo7aCY0nga5yABSjvYcUrDuA9WQmkHkK/c5R4iQGmHhExpzyuktEMp7w6LGqUdKkhpWJmHCXSSw5RQ2vOMlHZolvv1x01pnDEfrpDSDheitCNiSuNpnCMEKO1IxykN4z5SCaUdRr5yl3uUAKUdFTKlvaCQ0o6mvDsmapR2tCClYWUeI9BJjlFCaS8wUtrRWe7XHzelccZ8rEJKO1aI0o6LKY2ncY4ToLTjHac0jPt4JZR2DPnKXe4JApR2QsiUtrvQJMCcF7Uo7UTKu5OiRmknClIaVuZJAp3kJCWUtjvDgOtT2olZ7tcfN6VxxnyyQko7WYjSFsWUxtM4iwQo7RTHKQ3jPkUJpZ1EvnKXe6oApZ2aVZccuNrMf2oIdz2cliXb/sn0tponfJ0m0P7TG7md9/ikLIm491Dy9HrG9vH2cPxxnV2Fcnym4zn+hFCOz1KS44zt481yPMe7COX4HMdz/EWhHJ+rJMcZ28eb63iOI6ueFhJXJ9Pbapaya/H1MEW+HhOir+mOIdjXJcamBY7306eFxuSFSsZkxvbxFjre1s8ItfW+IbW1Q+e5HmfM2B74eFV/qMRzgVXm7wdKou5FupC0Mdjp1I65ZvUjWp+m/3uG9FnS50gPoP8/jPQY0lZgZ1jl+U+g3Y0+LyetIK0knUpaRdoU7EyrnEVUzhn0+Yvkx0ukL5O+Qvoq6Wukr5O+Qfom6Vukb5O+Q/ou6Xuk75N+QPoh6UekH5N+Qvop6Wekn5N+Qfol6VekX5N+Q/ot6Xek35P+QPoj6UrSn0h/Jv2F9FfS30h/J/2D9E/SVaR/kRqq5wzSTNIEaRZpNmkOaS5pHmkjP89Im/jtS9qMtDlpC9KWfj6RtiZtQ9qWtB1pe9IOpB1JO5F2Ju1C2pW0G2l30h6kPUl7kfYm7UPal7QfaX/SAaQDSdchHUQ6mHQI6bqk65GuT5ok9UjzSQtIC0mHkhaRFpOWkJaSDiPdgHRD0uGkI0hHkpaRjiIdTTqGdCPSsaTjSDcm3YR0U9LNSDcnHU+6BemWpBNIJ5JuRTqJdGvSbUgnk25LOoV0O9LtSXcg3ZF0J9KdSXch3ZX0TNJq0ml+O4KdZY1L/o2hx6nfnE77neXnLdjZWXVXGHDPx/gz8gdYB2Aql3OVgRd8w66Pc2jCOjcrYqsMMPAlVrBYAWUB57iO6ScJN7Tt7+bvFyUDfnrnZPHFbLdTMr3N21/JCQ5n/Z23hrJKiqsqqosLC8qThdUVUE5RdVVBeX6pV11SAMUXFHoV5VXJqYUVxUWFRSXVxcmwVh2cl8UL6v52fla86oClcc7P4i/3Asakl4r7giz2NhK5MnYu+cpd7oGO/vpt0E/OXLqQcQI6kPkKBA5i6N8oE97a2nQm5OraW2UKd0Wo9yLqtxevgXpHp6izIPWONmun3lTlrJV6uRvJ9WUx2CAXCQxQF2Xxd7CLqYPZG/c6Xcb28i5mHPwu4evs1X59XsJfn3U6/0WO1uelzP3S37jPQM5ljPky5glDYgnhpQJj0cGO31rCuC8TiPsQJWfZjO3jHaLkdtpFjP36csYxViq/L8+SGS8421ri6uOWAkutr2CMGyHc/gFTLHugWW34eWMr//G9QhNf3k/ls10fV1KFXrWGE51eKeoveKLTy6z9RCdVOapPdPyKwkrsKeQvNsxVAoPSVUJg6fKJzlWMk9nVjg/q6N/VAnlztZK8udLRvLlGAQxI3Iq8VjhuDki7RqC/HK7gpO5agbiPUHJSx9g+HmfMYV2dv1ZoPDfMftp1cR1B6/UxtDZ88yvqOkFoxYa5XmBQuT6C0Ho9I3zc4Dh8oH83COTNDUry5jpH8+ZGBfB2o0DeHK0EYhjBw+OMGSfixqbuxl2nEvOX6z7exOmj1oYqVODjzdzJxO0gXiq5WWD0PNbRxV+BrVZPSjfmWxhn8GMVXDq4RSBvbs3inYHs0zXDWwdig8atCmag26QuHXDfxD6NsYPfruAmtkSnvMPxU0eM+2yBuI93fBDGTni7QNwnuPnVoTp+3snYHxnb2juhkZpJ7J+vnHDn5h0KJrE7OX3Ei9FNTN1VKBKO4wMSJwms2pmU4E3cJkYsccWSYqACH+/iPv/X2FAazv/vDguTk+lttTIq3VFkseO4iKPcYgFsuic+d/XuUTDt3+v6RTmpRbn3ZcXTu4bp/f54etcxvS+Rmt65L3MzZlStoNMdkZYqQIWlAqjwQIwK3gMKUOHBeCTWMWU+FDeUjinzYS1TJmNG5T/MOGU+omDKfERgylwWT5neMgVT5qPxSKxjynwsbigdU+bjWqZMxowqeJxxynxCwZT5hMCU+WQ8ZXpPKpgyl2u5S3QtY6d8ivGSFN57b2rq3nvPove1Ja0GfHiaGx80NpQGfHhGy+jyNOPo8qyCKf9ZgSn/OeYpP8fU3TjrVaJun1Mw5a/QcA96gsA96OeZEzSe3mV8fCGe3nVM7y9quTrAmFG1gk53RHpJASq8JIAKL8eo4L2sABVeiUdiHVPmq3FD6ZgyX9MyZTJmVP5rjFPm6wqmzNcFpsw34inTe0PBlPlmPBLrmDLfihtKx5T5tpYpkzGjCt5mnDLfUTBlviMwZb4bT5neuwqmzPe03CW6J8GXnO87/kCP7lDGfQKd8mTHH2zxGLTxvQJxL1LyYIsPGPOSsa29RQry5kGBvPnQ8ckb435UIO6PFMS9XCDujx2PG+cFiQe3n6agfz8lEPfpSuaFTxjnBca29k53PG+wv6wQyJuzFPSX5wXiPltJf/mUsb8wtrV3toL+8opA3nymYF59UyDuzxXE/Z5A3F8oiPt9gbjPc7x/4zWUxwQW952vZF74knFeYGxr73zmHxHKMHU37lzqxVdW0vb3q6zVv/iZmSIXcgRiMYHjBOuveYr3nL6A2IsqkrvcrxnvjEjF/XUWexuJ/twyZ51+wzjAJczqTmdvLg8kkn72VOJnD8M/MKM2o9ffQo59B/Y92A9gP4KtBPsJ7GewX8B+BfsN7HewP8Ba0P/aP+ecab2XCNRFI1P3l/DsO4BlTPEJTCY1P1udZ8VhAvE2p1hyeI87FY+VbWpvwUmrLEV9oq+d6HXVrDkLqhZUTVxQMWN65bgFsyrnT589a0z5jBl2IvgH8RMikSLI4PtZVoXk0uts6z3//3ItzeDuGTg69jZ1ayOZ5hbW7zZ+L3WvltfPfLsu/qSWX5X177/b+FeKOsuwXmfSPplr2CfjX8pZ6+82Mgfv+cFh4H8GnOE6BlbmKoHz11VCCca92Od7BmSqqv57+zPL/frjXkvBGfNfVlleSUF+fnEB7lcyNekVTq3ML8nPn1pRmKxMllfmV5UWeqXVhfmFBZVTKyugzHKvOlldXllaXfK3X2Gdu/7F2E61/M2Oz11ZGgcrkrvcjGy3z10x7oxs9jYS+fHNVeQrd7mZ2bwdEzshlplJnSMMSvtBIaUlKO+ysiNGaRi4FKVhZWYJdJKsbJkE46a0HxgpLZHtfv1xUxpnzNnZ+igtm3ky8LecmNJ4GidHgNJyHac0jDtXCaVlka/c5eYJUFpeyJT2o0JKa0R51zhqlNZIkNKwMhsLdJLGSijtR0ZKa5Ttfv1xUxpnzE0UUloTIUprGlMaT+M0FaC0Zo5TGsbdTAmlNSZfucttLkBpzUOmtF8VUloLyruWUaO0FoKUhpXZUqCTtFRCab8yUlqLbPfrj5vSOGNupZDSWglRWuuY0ngap7UApbVxnNIw7jZKKK0l+cpdblsBSmsbMqX9ppDS2lHetY8apbUTpDSszPYCnaS9Ekr7jZHS2mW7X3/clMYZcweFlNZBiNI6xpTG0zgdBSitk+OUhnF3UkJp7clX7nI7C1Ba55Ap7XeFlNaF8q5r1CitiyClYWV2FegkXZVQ2u+MlNYl2/3646Y0zpi7KaS0bkKU1j2mNJ7G6S5AaT0cpzSMu4cSSutKvnKX21OA0npm1yUHrjbrDWV8I/A1vl7Zsu2fTG+r+cZ/L4H2v6iR23mP35yXiPviRjrAgbF9vIsdf9RST6Ecv8zxHP9OKMcvV5LjjO3jXe54jvcQyvGrHM/xP4Ry/GolOc7YPt7Vjuc43vftFRJXJ9Pbam6/afG1a4i+pv2tZCPT369zPPdXCo1z1ysZ5xjbx7ve8bb+SaitbwqprR06d/Q4Y8b2wIdh+RcGka9Xmb8f/4OK3/FDbewrWG9qx1yz+oFaK2n/n0h/Jv2FtCX9f3vSrqStwPpY5fkXI/FX5lalULxj0reB+/dr4P79G7j/gAbuP7CB+6/TwP0HNXD/wQ3cf0gD91+3gfuv18D912/g/skG7u81cP/8Bu5fYO2f+S/754EV1nO/ofXcr6ie+xXXc7+Seu5XWs/9htVzvw3qud+G9dxveD33G1HP/UbWc7+yeu43qp77ja7nfmOs/abQfn1ofP4jK3XeBrUv7d+PtD/pANKBpOuQDiIdTDqEdF3S9UjXJ02SeqT5pAWkhaRDSYtIi0lLSEtJh5FuQLoh6XDSEaQjSctIR5GOJh2TXb/6iTUcHQy2UYrx91vK497UXhuRtgYbm113lQw3628FB7B/YjCZ3lbzu5pfCj+JOs2yveAbdv2Oo3PzjaO28gYDX2IFu7F1M437pMtPOu6TrlscP9n0Owd33Le6+TsUyYCf3jjGxQQbM5Z1W0j1l0xv8xjz22PMGe82JRe2OPNvkzWUVVJcVVFdXFhQniysroByiqqrCsrzS73qkgIovqDQqyivSk4trCguKiwqqS4O7bdLNhFawbVpvIKLp3E2FVjBtZnjK7gw7s2U3BHZmHzlLvcuRyegoJ+cubQ532Dk3cV85RkHMfRvlAnvewobp1Ef1bW3yhTuipwtjad+u8UazpZGp6iz4NnSaLP2s6VU5az1bIl9CV+27ACVTG/zsEHGCwxQ4wWWmG5BHczeuImZsb28LRgHvy35Onu1X59b8tdnnc4/3tH6nMDcL/2N+wyE86x1IvOEIbEce4LAWLTY8as8GPdEgbjvUXKWzdg+3j1KllGMZ+zXWzGOsVL5vVW2zHjB2dYSV60lfl3+fgVXrT8ViHuJkl9PnsTYHxnb2luiIG8+E8ibrR0fJzDuzwXi3kZB3F8IxD2ZMW68SIEXCPyr1di3MZ+wbifTRQz80VZ7WUqhiW/D+5tJsXH5bNfvtnQ1acoaLiz1svb/twtLvczaLyylKkf1hSW/orASewr5iw0zRQACp2SHAwXJ9DbWC0tTGE8etnN8kkD/thPIm+2U5M22jubN9iHVX7p+7sBYf44upxC5c4nj1fYC/e5BBRfjdhCI+yElF+MY28fjjDmsu6o7CI1rhtlPuy52JOLdKYbfhm9+Re0oCL/YMDsJDCo7RRB+d2KEmJ0dh1/0b2eBvNlZSd7s6Gje7CKcNxzwtotA3ixTAjGM4OFxxowTcQtTd+OuU4n5y3Ufd+X0UWtDFSrwcTfuZOJ2EC+57CYwej6m5FsjuzLOlOWMM/hjCi4dlAvkTUU27wzU3NTdOOtVom4rFMxAlVKXDrgXH/Vi7OBTFSw+kuiUVY6fOmLcYwXifsLxQRg74VSBuJ9UsviomrE/Mra192QjNZPYP18V5M7NKgWTWLWWSaw3Y1nTGDsNduiEqbuxD/BGpqG4/eypxM8ejH7aN0wuode7Q45NB9sDbE+wGWAzwWaBzQbbC2wO2FyweWDzwRaALQTbG2wfsH3B9gPbH+wAsAPBDgI7GOwQsEPBDgM7HOwIsCPBjgI7GuwYsGPBjgM7HuwEsBPBTgI7GWwR2Clgp4KdBnY62BlgZ4KdBXY22Dlg54KdB3Y+2AVgF4JdBHYx2CVgl4JdBnY52BVgV4JdBXY12DVg14JdB3Y92A1gN4LdBHYz2C1gt4LdBnY72B1gd4LdBXY32GKwe8DuBbsP7H6wJWBLwR4AexDsIbCHwR4BWwb2KNhjYI+DPQH2JNhysKfAngZ7BuxZsOfAVoA9D/YC2ItgL4G9DPYK2Ktgr4G9DvYG2Jtgb4G9DfYO2Ltg74G9D/YB2IdgH4F9DPYJ2Kdgn4F9DvYF2JdgX4F9DfYN2Ldg34F9D/YD2I9gK8F+AvsZ7BewX8F+A/sd7A+wP8FWgf0Fhl+azwDLBEuAZYFlg+WA5YLl5ay+pIU37ILfv29kjVv2jb1MU3vLsV6XMfUXge/716zczLPiMIF4m1MsOazHLffwWNmm9pYR+LssRX2ir23odWX5jBkT505fWD6/atyCWZXzp8+eZQ8pfvH+0JJIEV7w/SyrKvxnXWZb7/n/l2tpBvcYiz/iMS27bj0k09zCWhyAYzeXzync5Sq71k/DNaIEa5wTsQdUYeBSPw2HlYnGfZaJZTL5KHqJ2O4I6f40XKMc9+uP+wYlZ8xNrLK0/DRcE8Z2sv1tmhM/WIilcZrm8JfbjDHppeJulsPeRiIrPBqTr9zlNmfumNgJscxME96DcfZUSGktKO9aRo3SWghSGlZmS4FO0lIJpe3JSGktctyvP25K44y5lUJKayVEaa1jSuNpnNYClNbGcUrDuNsoobSW5Ct3uW0FKK1tyJQ2QyGltaO8ax81SmsnSGlYme0FOkl7JZQ2g5HS2uW4X3/clMYZcweFlNZBiNI6xpTG0zgdBSitk+OUhnF3UkJp7clX7nI7C1Ba55ApbY5CSutCedc1apTWRZDSsDK7CnSSrkoobQ4jpXXJcb/+uCmNM+ZuCimtmxCldY8pjadxugtQWg/HKQ3j7qGE0rqSr9zl9hSgtJ4hU9pchZTWi/Kud9QorZcgpWFl9hboJL2VUNpcRkrrleN+/XFTGmfMfRRSWh8hSusbUxpP4/QVoLR+jlMaxt1PCaX1Jl+5y+0vQGn9Q6a0eQopbQDl3cCoUdoAQUrDyhwo0EkGKqG0eYyUNiDH/frjpjTOmNdRSGnrCFHaoJjSeBpnkAClDXac0jDuwUoobSD5yl3uEAFKGxIypeUJTQLMeVGL0talvFsvapS2riClYWWuJ9BJ1lNCaXkMA65PaevmuF9/3JTGGfP6CiltfSFKS8aUxtM4SQFK8xynNIzbU0Jp65Gv3OXmC1Bafk5dcuBqM/+pIdz1UJAj2/7J9LaaJ3wVCLT/047/9BA+KUsi7meUPL2esX28Zxx/XGdPoRxf4XiOTxfK8eeV5Dhj+3jPO57jPYRy/CXHc3y+UI6/rCTHGdvHe9nxHEdWLQiJq5PpbTVL2bX42luRrwND9DXdMQT7usTY9Jrj/XSm0Jj8upIxmbF9vNcdb+tZQm39Vkht7dB5rscZM7YHPl7Vv4iJ5wKrzN8PlERtSdqetDFYIbVjrln9iNaZ9H+zSGeT7kXalf6/N+lA0lZgQ63y/hmy6fMM0kzSBGkWaTZpU7Aiq5xFVMxQ+nw++bGAdCHp3qT7kO5Luh/p/qQHkB5IehDpwaSHkB5Kehjp4aRHkB5JehTp0aTHkB5Lehzp8aQnkJ5IehLpyaSLSE8hPZX0NNLTSc8gPZP0LNKzSc8hPZf0PNLzSS8gvZD0ItKLSS8hvZT0MtLLSa8gvZL0KtKrSa8hvZb0OtLrSW8gvZH0JtKbSW8hvZX0NtLbSe8gvZP0LtK7SReT3kN6L+l9pPeTLiFdSvoA6YOkD5E+TPoI6TLSR0kfI32c9AnSJ0mXkz5F+jTpM6TPkj5HuoL0edIXSF8kfYn0ZdJXSF8lfY30ddI3SN8kfYv0bdJ3SN8lfY/0fdIPSD8k/Yj0Y9JPSD8l/Yz0c9IvSL8k/Yr0a9JvSL8l/Y70e9IfSH8kXUn6E+nPpL+Q/kr6G+nvpH+Q/km6ivQv0iIaZ3JIc0kHgRVb45J/Y2h3+r9C2q+YtDVYSU7dFQbc7LEVHODaLL7yJkF5n2St9pepXM5VC17wDbt+S2niGRa1VQsY+BIr2GHWjQhuCPSTjhsC33Ecfv3OwR33u27+DlQy4KdXyngjdhhjWe8p+RFMxvz2GHPGe0/JiTZn/m2whrJKiqsqqosLC8qThdUVUE5RdVVBeX6pV11SAMUXFHoV5VXJqYUVxUWFRSXVxcmwVr9sILT6ZcN49QtP42wosPpluOOrXzDu4Uqu0A4jX7nL/cjRCSjoJ2cujeAbjLyPmK+E4SCG/o0y4a3xHpZGfVTX3ipTuCtytjSS+m3ZGs6WRqeos+DZ0miz9rOlVOWs9WyJu5FcX56FDTJSYIAaKbA8r4w6mL1xEzNje3lljIPfKL7OXu3X5yj++qzT+Uc6Wp+jlay/5zxrHcM8YUgsZR0tMBZ94vhVHox7jEDcnyo5y2ZsH+9TJbd1RzL2640Yx1ip/N4oR2a84GxriavW9wlcvf1CwVXrDwTi/tLNq9Z1/BzL2B8Z29r7UkHefCiQN+McHycw7o8E4t5YQdwfC8S9CWPceJEClxr5V6uxb2M+Yd1uQhcx8Na7zwcDwQpNfBve30yKjctnu343pQtLm63hwlIva/9/u7DUy6z9wlKqclRfWPIrCiuxp5C/2DCbCUDgZkoeRMB5YWkzxpOHzR2fJNC/zQXyZnMlebOpo3kzPqT6S9fPLRjrz9HlFCJ3LnG8Gi/Q775RcDFuC4G4v1VyMY6xfTzOmMO6q7qF0LhmmP2062JLgt8JMfw2fPMraktB+MWGmSAwqEyIIPxOYISYiY7DL/o3USBvJirJmy0dzZuthPOGA962EsibH5RADCN4eJwx40Tc2tTduOtUYv5y3cdJnD5qbahCBT5uzZ1M3A7iJZetBUbPlUq+NTKJcabchnEGX6ng0sE2AnkzOYd3Bmpl6m6c9SpRt5MVzEDbSl064F58VMDYwacoWHwk0Sm3c/zUEeMuEYj7Z8cHYeyEUwTi/kXJ4qPtGfsjY1t7vzRSM4n981VB7tzcTsEktj2nj3gxuo2puzpGwnF8wPI3AquJvsniTdw2RixxxZJioAIfd+A+/9fYUBrO/3cMC5OT6W21MirdUWQnx3ERR7mdBLBp5/jc1dtZwbS/i1Sn5ObbXSOwuD7GBDkfd4sxQQcmlIc1IiXT2zgzqlbQ6Y6UFQqQo0IAOSpj5PAqFSDHVNfvA0p9H60qJ0YFDahQHaOCDlSYpgUVGDMqfxojKuyuABV2F0CF6TEqeNMVoMIeGlBB4ivce8aooAIVZsSooAMVZmpBBcaMKpjJiAqzFKDCLAFUmB2jgjdbASrspQEVJJ56MkdoZOO+q7oF42A0l/HSK65VaWvqrlXJoveDG9NxI41N87ixSWNDacCm+VrWbMxjHF0WKECdBQKos5AZdZqbuhtnvUrU7UIFqLO3ljUb+zBO0/czrtlYwrxmI8YEGR/3jTFBBybsp+XqCmNG1Qo63ZFyfwXIsb8AchwQI4d3gALkOFDD1ZXPBK6uHJQTo4IGVDg4RgUdqHCIFlRgzKj8QxhR4VAFqHCoACocFqOCd5gCVDhcAyp8LoAKR8SooAIVjoxRQQcqHKUFFRgzquAoRlQ4WgEqHC2ACsfEqOAdowAVjtWACl8IoMJxStZs7JDNF/Pxjj8wqjeUsavAYPS74w9OmgZtvItA3H8oeXDSCYx5ydjW3h+O5w32lyqBvPlLQX+ZKhC3aayjv5zI2F8Y29rjrj+J/rKnQN4kHI8b+8seAnFnKekvJzH2F8a29rIU9Jc5AnmTq6C/7CUQd56S/nIyY39hbGsvT0F/kfgBqyYK+stcgbibKukvixj7C2Nbe00V9Je9BfKmhYL+so9A3C2V9JdTGPsLY1t7LRX0lwMF8qaNgv5ykEDcbZX0l1MZ+wtjW3ttFfSXwwXypoOC/nKEQNwdlfSX0xj7C2Nbex0V9JdjBfKmi4L+cpxA3F2V9JfTGfsLY1t7XRX0l+MF8qaH43HjPWnsM9xx91TSX85g7C+Mbe1x1l/Cyht7486lfnxlJW1/z8z5+/kRuGWmyIUcgVhM4DjB+mue4j3Wg0s0zpk5/OWexbjCTipu9JG5jda4UCjdeuCs07M5b5iZ1Z3O3lweSCT97KvEzz6Gf2BGbUavz4EcOxfsPLDzwS4AuxDsIrCLwS4BuxTsMrDLwa4Aa0H/28jUHdwbWXmWYb1nD/64Wd2aLT6BySSJD0XKs+IwgXibUyw5vMedisfKNrW34KRVlqI+0ddO9Lpq1pwFVQuqJi6omDG9ctyCWZXzp8+eNaZ8xgw7EfyD+AmRSBFk8P0sq0Jy6XW29Z7/f7mWZnD3DBwd+5u6tZFMc0uYutnqVxan/+dJLern9TPfrosrKc2uylnd4BlWfWFi/JWizjKs15m0T+Ya9sn4l3L+rQeK4ZwfHAb+Z8AZrmNgZV4lcP56lVCCcX9p5DwGZKqq/nu7Msf9+stkrj/OmK+2yvJKCvLziwtwv5KpSa9wamV+SX7+1IrCZGWyvDK/qrTQK60uzC8sqJxaWQFllnvVyeryytLqkr/9Cuvc9WrGdrL9vSY+d+VpnGsEzl2vdfzcFeO+VujcVWKiuFZgArqOuWNiJ8QyM6lzhEFp5yuktOsp726IGqVdL0hpWJk3CHSSG5RQ2vmMlHZ9jvv1x01pnDHfqJDSbhSitJtiSuNpnJsEKO1mxykN475ZCaXdQL5yl3uLAKXdEjKlXaCQ0m6lvLstapR2qyClYWXeJtBJblNCaRcwUtqtOe7XHzelccZ8u0JKu12I0u6IKY2nce4QoLQ7Hac0jPtOJZR2G/nKXe5dApR2V8iUdqlCSrub8m5x1CjtbkFKw8pcLNBJFiuhtEsZKe3uHPfrj5vSOGO+RyGl3SNEaffGlMbTOPcKUNp9jlMaxn2fEkpbTL5yl3u/AKXdHzKlXaaQ0pZQ3i2NGqUtEaQ0rMylAp1kqRJKu4yR0pbkuF9/3JTGGfMDCintASFKezCmNJ7GeVCA0h5ynNIw7oeUUNpS8pW73IcFKO3hkCntcoWU9gjl3bKoUdojgpSGlblMoJMsU0JplzNS2iM57tcfN6VxxvyoQkp7VIjSHospjadxHhOgtMcdpzSM+3EllLaMfOUu9wkBSnsipy45cLVZfyjjbIF6eDJHtv2T6W013/h/UiDuPo3dznv85rxE3H0b6wAHxvbx+jr+qKW+Qjk+wPEcP1coxwcqyXHG9vEGOp7jfYRyfLDjOX6FUI4PUZLjjO3jDXE8xxdTWxveckV8XarI12Uh+ppuv8T+I9Hf13c89y8UGueSSsY5xvbxko639UVCbV0QUls7dO7occaM7YEPw/IvDCJfrzJ/P/4H9QbS20jh0GY5tWOuWf1ArQvp84tILya9hHQx6VLSZaStwJ6yyvMvRuKvla9KoXjH5OkG7v9MA/d/toH7P9fA/Vc0cP/nG7j/Cw3c/8UG7v9SA/d/uYH7v9LA/V9t4P6vNXD/1xu4/xsN3P9Na//Mf9k/D+yteu73dj33e6ee+71bz/3eq+d+79dzvw/qud+H9dzvo3ru93E99/uknvt9Ws/9Pqvnfp/Xc78v6rnfl9Z+U2i/p2h8viIndd4G9Wna7xnSZ0mfI11B+jzpC6Qvkr5E+jLpK6Svkr5G+jrpG6Rvkr5F+jbpO6Tvkr5H+j7pB6Qfkn5E+jHpJ6Sfkn5G+jnpF6Rf1rN+Yg1HB4N9lWL8PYfaaTnpV6Stwb7OqbtKhpv1vwbAsn+yPZne5n0D5Z0hdH4b3P7Psr3gG3b9fkO+f5sTsZU3GPgSK9hvrZtp3CddftJxn3QNdfxk0+8c3HEXufk7FMmAn943jIsJvmUsqzik+kumt3mM+e0x5oxXrOTCFmf+fbeGskqKqyqqiwsLypOF1RVQTlF1VUF5fqlXXVIAxRcUehXlVcmphRXFRYVFJdXFof12yXfMC0X87fuceAUXS+N8n8Nf7g+MSS8V9w9K7oh8S75yl7uBoxNQ0E/OXPqRbzDyNmC+8oyDGPo3yoT3PYVv06iP6tpbZQp3Rc6WVlK//WkNZ0ujU9RZ8GxptFn72VKqctZ6tsTdSK4vMcQGWSkwQK3M4e9gP1EHszduYmZsL+8nxsHvZ77OXu3X58/89Vmn8690tD5/Ye6X/sZ9BsJ51vor84QhsRz7F4GxaLjjV3kw7l8F4h6h5CybsX28EUqWUaxk7Ne/MY6xUvn9W47MeMHZ1hJXrfcRiHuUgqvWpwjEPVrJryf/ztgfGdvaG+143mB/OUggb8Yq6C+nCsQ9Tkl/+YOxvzC2tTdOQX85QiBvNlXQX04TiHszJf3lT8b+wtjW3mYK+stxAnmzhYL+crpA3Fsq6S+rGPsLY1t7nPWHF9Pbm9V3VZFBcV7FsWIVXWzvYGovnyw08XIxfzMpNi6f7fr9y/c9999vgPSy9v+3GyC9zNpvgKQqR/UNEL+isBJ7CvnrfxmEe7DEMrnqwWpDp2+A2DGnW38ZuW5PsuhfhkDeZCjJm78czZvMXB2QkuDz09VlfyIrbHC8yhTod1spuGmUEIh7kpKbRozt43HGHNbqn4TQuGaY/bTrIou+ZJsdw2/DN7+isBJ7Cvlb0zACg0p2BOE3mxFichyHX/QvRyBvcpTkTVaum3mTK5w3HPCWK5A3k5VADCN4eJwx40TcwdTduOtUYv5y3cc8Th+1NlShAh8bcScTt4N4yaWRwOg5Rcm3G/MYZ8rGjDP4FAWXDhoL5E2TXN4ZqL2pu3HWq0TdNlEwAzWVunSQyZxQTzIukm3G2MElGkWqUzZ3/NQR4/5aYHHC9o4PwtgJmwm09w5KFmW0YOyPjG3t7dBYzST2z1fauXOzuYJJrIWWSaw/Y1ktGTsNduiEqbtxN1Q/I9NQ3H72VeJnH0Y/7Rsml9DrVpBjrcHagLUFawfWHqwDWEewTmCdwbqAdQXrBtYdrAfelwDrBdYbrA9YX7B+YP3BBoANBFsHbBDYYLAhYOuCrQe2PlgSzAPLBysAKwQbClYEVgxWAlYKNgxsA7ANwYaDjQAbiX0DbBTYaLAxYBuBjQUbB7Yx2CZgm4JtBrY52HiwLcC2BJsANhFsK7BJYFuDbQM2GWxbsClg24FtD7YD2I5gO4HtDLYL2K5gu4GVg1WAVYJNBasCqwabBrY72HSwPcD2BJsBNhNsFthssL3A5oDNBZsHNh9sAdhCsL3B9gHbF2w/sP3BDgA7EOwgsIPBDgE7FOwwsMPBjgA7EuwosKPBjgE7Fuw4sOPBTgA7EewksJPBFoGdAnYq2Glgp4OdAXYm2FlgZ4OdA3Yu2Hlg54NdAHYh2EVgF4NdAnYp2GVgl4NdAXYl2FVgV4NdA3Yt2HVg14PdAHYj2E1gN4PdAtaCchFv2AWfE9PIGrfsG3uZpvZmLRJk6y8Cz6WpWbmZZ8VhAvE2p1hyWI9b7uGxsk3tLSPwd1mK+kRf29DryvIZMybOnb6wfH7VuAWzKudPnz3LHlL84v2hJZEivOD7WVZV5NLrbOs9//9yLc3gHmPxx6Za5po69ZBMcwtrcQCO3Vw+p3CXq+xaP2F6K9X3bbkRe5AiBi71E6ZYmWjcZ5m3CSUY9yViuyOk+xOmt+a6X3/cNyg5Y77dKkvLT5jezthOtr935MYPwGNpnDty+cu9kzHppeK+U4BOUvnKMdDdKTAB3cXcMbETYpmZJrwHuLVVSGl3U94tjhql3S1IaViZiwU6yWIllNaWkdLuznW//rgpjTPmexRS2j1ClHZvTGk8jXOvAKXd5zilYdz3KaG0xeQrd7n3C1Da/SFTWjuFlLaE8m5p1ChtiSClYWUuFegkS5VQWjtGSluS6379cVMaZ8wPKKS0B4Qo7cGY0nga50EBSnvIcUrDuB9SQmlLyVfuch8WoLSHQ6a0zgop7RHKu2VRo7RHBCkNK3OZQCdZpoTSOjNS2iO57tcfN6VxxvyoQkp7VIjSHospjadxHhOgtMcdpzSM+3EllLaMfOUu9wkBSnsiZErropDSnqS8Wx41SntSkNKwMpcLdJLlSiitCyOlPZnrfv1xUxpnzE8ppLSnhCjt6ZjSeBrnaQFKe8ZxSsO4n1FCacvJV+5ynxWgtGdDprSuCintOcq7FVGjtOcEKQ0rc4VAJ1mhhNK6MlLac7nu1x83pXHG/LxCSnteiNJeiCmNp3FeEKC0Fx2nNIz7RSWUtoJ85S73JQFKeylkSrtFIaW9THn3StQo7WVBSsPKfEWgk7yihNJuYaS0l3Pdrz9uSuOM+VWFlPaqEKW9FlMaT+O8JkBprztOaRj360oo7RXylbvcNwQo7Y3cuuTA1Wb+U0O46+HNXNn2T6a31Tzh602BuHd2/KeH8ElZEnHvouTp9Yzt4+3i+OM6+wrleLnjOd5aKMcrlOQ4Y/t4FY7neB+hHK9yPMe7CeV4tZIcZ2wfr9rxHH+F2trwlivi6zJFvi5X5OuKEH1N++dLjczYNN3xftpeaEzeQ8mYzNg+3h6Ot3UHobaeGVJbO3Se63HGjO2Bw6R/ERPPBVaZvx8oibqYdCkpHNq8Re2Ya1Y/orU9fd6BtCNpJ9JlpMtJV5C2AnvbKs9/Au019Pm1pNeRXk96A+mNpE3B3rHKWUTlvE2fdyPtTtqDtCdpL9LepH1I+5L2I+1POoB0IOk6pINIB5MOIV2XdD3S9UmTpB5pPmkBaSHpUNIi0mLSEtJS0mGkG5BuSDqcdATpSNIy0lGko0nHkG5EOpZ0HOnGpJuQbkq6GenmpONJtyDdknQC6UTSrUgnkW5Nug3pZNJtSaeQbke6PekOpDuS7kS6M+kupLuS7kZaTlpBWkk6lbSKtJp0GunupNNJ9yDdk3QG6UzSWaSzSfcinUM6l3Qe6XzSBaQLSfcm3Yd0X9L9SPcnPYD0QNKDSA8mPYT0UNLDSA8nPYL0SNKjSI8mPYb0WNLjSI8nPYH0RNKTSE8mXUR6CumppKeRnk56BumZpGeRnk16Dum5pOeRnk96AemFpBeRXkx6CemlpJeRXk56BemVpFeRXk36DulNpDeTDgJ7N3f1uOTfGGpFn79F+i5pa7D3cuuuMOBmj69hwN+C8Zdwv4HyFlmPY2cql3PVghd8w67f93P/1g9yI7ZqAQNfYgWLFVAWcI7rmH7ScUPgbMfh1+8c3HHv5ebvQCUDfnrv5/LF/AFjWXOU/AgmY357jDnjzVFyos2Zfx+uoayS4qqK6uLCgvJkYXUFlFNUXVVQnl/qVZcUQPEFhV5FeVVyamFFcVFhUUl1cTKs1S+2z8k0N9vfj3Lj1S8sjfNRLn+5HzMmvVTcH+eyt5HIFdoPyFfuchc4OgEF/eTMpU/4BiNvAfOVMBzE0L9RJrw13h+kUR/VtbfKFO6KnC19Sv32szWcLY1OUWfBs6XRZu1nS6nKWevZEncjub48CxvkU4EB6tNc/g72GXUwe+MmZsb28j5jHPw+5+vs1X59fs5fn3U6/6eO1ucXzP3S37jPQDjPWr9knjAklrJ+ITAW7e34VR6M+0uBuPdRcpbN2D7ePkpu637K2K+/YhxjpfL7q1yZ8YKzrSWuWu8qcPV2fwVXrU8QiPsAN69a1/Hza8b+yNjW3gGO5w32lyqBvDlYQX85USDuQ5T0l28Y+wtjW3uHKOgvewrkzeEK+stJAnEfoaS/fMvYXxjb2jtCQX+ZI5A3RyvoLycLxH2Mkv7yHWN/YWxrj7P+8GJ6J7P6rioyKM6rOFZ8RxfbO5vV57EDwQpNvFzM30yKjctnu36/pxsgP6zhBkgva/9/uwHSy6z9BkiqclTfAPErCiuxp5C/2DA/CFys+CE3nMEymd7GegPkB8aLXD86frEH/ftRIG9+VJI33zuaNytzdUDKT4z15+iyP5EVNjherRTod8cruGn0k0DcJyi5acTYPh5nzGGt/vlJaFwzzH7adfEzwe8vMfw2fPMr6mdB+MWG+UVgUPklgvD7CyPE/Oo4/KJ/vwrkza9K8uZnR/PmN+G84YC33wTy5mQlEMMIHh5nzDgRdzZ1N+46lZi/XPfxd04ftTZUoQIf/+BOJm4H8ZLLHwKj5ylKvt34O+NM+SfjDH6KgksHfwrkzapc3hmok6m7cdarRN2uUjAD/SV16SCTOaHe5PwmYh5fBUo0ilSnzMhzfzB6TyDu0xwfhLETYk5yx326kkUZmYz9kbGtvdMbq5nE/vlKO3duco8ZEj5mcvqIF6O7mLqrYyQcxx8COFtgNdbZObyJ28WIJa5YUgxU4GOCM3G1NpSG8/8sgVGwZuO+imhnVLqjSLbjuIijXLYANuXkqZn2xRI+R8G0nyvVKbn5No+Rb139EliMCXI+NooxQQcmNA5rREqmt3FmVK2g0x0pmyhAjiYCyNE0Rg6vqQLkaKYFOZozdnBXv0cbI4ecjy1i5NCBHC21IAdjRuW3ZESOVgqQo5UAcrSOkcNrrQA52mhBjraMyOHqowhi5JDzsV2MHDqQo70W5GDMqIL2jMjRQQFydBBAjo4xcngdFSBHJy3I0ZkROVx+mktXU3c9Sha9r60DaECRLtwoorGhNKBIVy3rMrow4kM3BfjQTQAfujPjQ3tTd+OsV4m67a4AH3powYeejPgwihEfRjNfsYgxQcbHXjEm6MCE3lquWDBmVK2g0x0p+yhAjj4CyNE3Rg6vrwLk6KcFOfozdvCxjMgxLkYOFcgxIEYOHcgxUAtyMGZU/kBG5FhHAXKsI4Acg2Lk8AYpQI7BWpBjCCNybMqIHJvFyKECOdaNkUMHcqynBTkYM6pgPUbkWF8BcqwvgBzJGDm8pALk8LQgRz4jcmzBiBxbOv4goP5QRp5ABz/L8bhb5hqTKxD32UoegFTA2F8Y29o7W0F/aS6QN+cp6C/NBOI+X0l/KWTsL4xt7Z2voL+0FcibixT0lzYCcV+spL8MZewvjG3tXaygv3QWyJvLFPSXTgJxX66kvxQx9hfGtvYuV9BfegjkzVUK+ktPgbivVtJfihn7C2Nbe1cr6C/9BPLmOgX9pb9A3Ncr6S8ljP2Fsa296xX0l8ECeXOTgv4yRCDum5X0l1LG/sLY1t7NCvqLJ5A3tynoL/kCcd+upL8MY+wvjG3t3e543uRDGUMNf97c5XjcJVDGKIG471bSXzZg7C+Mbe3d7XjenJUjc7/yXsfjxoUYBQJx36ekv2zI2F8Y29q7T0F/kbhfuVRBfykUiPsBJf1lOGN/YWxr7wEF/UXifuXDCvrLUIG4H1HSX0Yw9hfGtvYeUdBfJO5XPqagvxQJxP24kv4ykrG/MLa197iC/iJx3265gv5SLBD3U0r6Sxljf2Fsa+8pBf1F4r7dswr6S4lA3M8p6S+jGPsLY1t7zynoLxL37V5Q0F9KBeJ+UUl/Gc3YXxjb2ntRQX+RuG/3ioL+Mkwg7leV9JcxjP2Fsa09qfrLZM6fDMa22ChPR8yZjDGPVRJzgjHmcUpizmKMeWMlMWczxryJkphzGGPeVEnMuYwxb6Yk5kGMMW+uJOaBjDGPj2DMW0Qw5i0jGPMEJTFvwPjQmYkRbOetIhjzpAjGvHUEY94mgjFPjmDM20Yw5ikRjHm7CMa8fQRj3iGCMe8YwZh3imDMO0cw5l0iGPOuEYx5twjGXB7BmCsiGHNlBGOeGsGYqyIYc3UEY54WwZh3j2DM0yMY8x4RjHnPCMY8I4Ixz4xgzLMiGPPsCMa8VwRjnhPBmOdGMOZ5EYx5fgRjXhDBmBdGMOa9IxjzPhGMed8IxrxfBGPeP4IxHxDBmA+MYMwHRTDmgyMY8yERjPnQCMZ8WARjPjyCMR8RwZiPjGDMR0Uw5qMjGPMxEYz52AjGfFwEYz4+gjGfEMGYT4xgzCdFMOaTIxjzogjGfEoEYz41gjGfFsGYT49gzGdEMOYzIxjzWRGM+ewIxnxOBGM+N4IxnxfBmM+PYMwXRDDmCyMY80URjPniCMZ8SQRjvjSCMV8WwZgvj2DMV0Qw5isjGPNVEYz56gjGfE0EY742gjFfF8GYr49gzDdEMOYbIxjzTRGM+eYIxnxLBGO+NYIx3xbBmG+PYMx3RDDmOyMY810RjPnuCMa8OIIx3xPBmO+NYMz3RTDm+yMY85IIxrxUScwb5vHF/ICSmIczxvygkphHMMb8kJKYRzLG/LCSmMsYY35EScyjGGNepiTm0YwxP6ok5jGMMT8WQSZ5PIIxPxHBmJ+MYMzLIxjzUxGM+ekIxvxMBGN+VknMeYwxP6ck5kaMMa9QEnNjxpifVxJzE8aYX1ASc1PGmF9UEnMzxphfUhJzc8aYX1YScwvGmF9REnNLxphfVRJzK8aYX1MSc2vGmF9XEnMbxpjfUBJzW8aY31QSczvGmN9SEnN7xpjfZoy5PZWTQTEnwLLAssFywHLB8JwQz5HwnAEZGpkSGQuZA+dgnJNwjMYxC/sw5jS2cXt6H7cOYB3BOoF1BusC1hWsG1h3sB5gPcF6gfUG6wPWF6wfWH+wAWDnUVkbgUNjwcaBbQy2CdimYJuBbQ42HmwLsC3BJoBNBNsKbBLY1mDbgE0G2xZsCth2YNuD7QCGvxuPv6OOvyuOv7ONvzuNv8OMv0uMv9OLv1uLv+OKv2uKv/OJv3uJvwOJv4uIvxOIv5uHvyOHv6uGvzOGv7uFv0OFv8uEv1OEv9uDv2ODv+uCv3OCv/uBv4OBvwuBv5OAvxuAz9HH58rjc9bxueP4HG58LjU+pxmfW4zP8cXn2uJzXvG5p/gcUHwuJj4nEp+biM8RxOfq4XPm8Llr+BwyfC4XPqcKn9uEzzHC5/rgc27wuS/4HBR8Lgg+JwOfG4HPUcDnCuD37PF75/g9bPxeMn5PF7+3it/jxO814vf88Htv+D0w/F4Ufk8IvzeD3yPB71Xg9wxw3T2uQ8d12bhOGdft4jpWXNeJ6xxx3R+ug8N1YbhOCtcN4ToaXFeC6yxw3QHeh8f70nifFu9b4n08vK+F93nwvgfeB8Dr4nidGK+b4nVEvK6G15nwugteh8DzcjxPxfM2PI9BrkfORe5DDkIuwHkS5w0cR3FcwX7mb/8DNjoow/tNCQA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJzt3c2O5Mh1BtB36bVgZPwH9SqGF4J/AAOGbFjaCfPupoDJ6jaSas4gooonSa4kAczKLy5VN2406pB/+/Zf//2vf/rrf/73n//y7Y9/+/b4p+XbH//5b9/+8j9/+vPf//df/vqn//3rtz8+/vDt3//8b+t//vKHb//xn//179/+GH75w8tVMYeafr1y/e+tfVyd+sbl6wXPix/ff3CKv/zLH9Yc4aEECUqQqARJSpCsBClKkKoEaUqQrgRROmtUOmtUOmtUOmtUOmtUOmtUOmtUOmtUOmtUOmtUOmtSOmtSOmtSOmtSOmtSOmtSOmtSOmtSOmtSOmtSOmtWOmtWOmtWOmtWOmtWOmtWOmtWOmtWOmtWOmtWOmtROmtROmtROmtROmtROmtROmtROmtROmtROmtROmtVOmtVOmtVOmtVOmtVOmtVOmtVOmtVOmtVOmtVOmtTOmtTOmtTOmtTOmtTOmtTOmtTOmtTOmtTOmtTOmtXOmtXOmtXOmtXOmtXOmtXOmtXOmtXOmtXOmtXOuuidNZF6ayL0lkXpbMuSmddlM66KJ11UTrronTWRems4aG01vBQemt4KM01PJTuGh5Kew0Ppb+Gh9Jgw0PpsOGhtNjwYHosxLGYHuuALEdkOSTLMVkOynJUlsOyGJcVGJgVGJkVGJoVGJsVGJwVGJ0VGJ4VGJ8VGKAVGKEVGKIVGKMVGKQVGKUVGKYVGKcVGKgVGKkVGKoVGKsVGKwVGK0VGK4VGK8VGLAVGLEVGLIVGLMVGLQVGLUVGLYVGLcVGLgVGLkVGLoVGLsVGLwVGL0VGL4VGL8VGMAVGMEVGMIVGMMVGMQVGMUVGMYVGMcVGMgVGMkVGMoVGMsVGMwVGM0VGM4VGM8VGNAVGNEVGNIVGNMVGNQVGNUVGNYVGNcVGNgVGNkVGNoVGNsVGNwVGN0VGN4VGN8VGOAVGOEVGOIVGOMVGOQVGOUVGOYVGOcVGecVGecVGecVGecVH0qPjYzziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozziozzSozzSozzSozzSozzSg+lxybGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeSXGeWXGeWXGeWXGeWXGeeWH0mMz47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wy47wK47wK47wK47wK47zKQ+mxhXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFehXFelXFelXFelXFelXFe9aH02Mo4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8o4r8Y4r8Y4r8Y4r8Y4r/ZQemxjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdjnFdnnFdnnFdnnFdnnFd/KD22M86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM86rM85rYZzXwjivhXFeC+O8lofSYxfGeS2M81oY57UwzmthnNfCOK+FcV4L47wWxnktjPNaGOe1MM5rYZzXwjivhXFeC+O8FsZ5LYzzWhjntTDOa2Gc18I4r4VxXgvjvBbGeS2M81oY57UwzmthnNfCOK9lzHmtP/IjSQx5LMlQj52aZKjHTk0y1GOnJhnqsTOTjDmvqUmGeuzUJEM9dmqSoR47NclQj52ahOmxY85rahKmx445r6lJmB475rymJmF67JjzmpqE6bFjzmtqEqbHjjmvqUmYHjvmvKYmYXrsmPOamoTpsWPOa2oSpseOOa+pSZgeO+a8piZheuyY85qahOmxY85rahKmx445r6lJmB475rymJmF67JjzmpqE6bFjzmtqEqbHjjmvqUmYHjvmvKYmYXrsmPOamoTpsWPOa2oSpseOOa+pSZgeO+a8piZheuyY85qahOmxY85rahKmx445r6lJmB475rymJlF6bHiMQa+5UZQuu0ZR2uwaRemzaxSl0a5RlE67RlFa7RpF6bVrFKXZrlGcbjtGvuZGcbrtGPqaG8XptmPsa24Up9uOwa+5UZxuO0a/5kZxuu0Y/pobxem2Y/xrbhSn244BsLlRnG47RsDmRnG67RgCmxvF6bZjDGxuFKfbjkGwuVGcbjtGweZGcbotg8HWKE63ZTjYGsXptgwIW6M43ZYhYWsUp9syKGyN4nRbhoWtUZxuy8CwNYrTbRkatkZxui2Dw9YoTrdleNgaxem2DBBbozjdliFiaxSn2zJIbI3idFuGia1RnG7LQLE1itNtGSq2RnG6LYPF1ihOt2W42BrF6bYMGFujON2WIWNrFKfbMmhsjeJ0W4aNrVGcbsvAsTWK020ZOrZGcbotg8fWKE63ZfjYGsXptgwgW6M43ZYhZGsUp9syiGyN4nRbhpGtUZxuy0CyNYrTbRlKtkZhum1wLFlwLFlwLFlwLFl4MN02OJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOJYsOpYsOpYsOpYsOpYsPphuGx1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LFh1LlhxLlhxLlhxLlhxLlh5Mt02OJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJUuOJcuOJcuOJcuOJcuOJcsPpttmx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5Jlx5IVx5IVx5IVx5IVx5KVB9Nti2PJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJimPJqmPJqmPJqmPJqmPJ6oPpttWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZNWxZM2xZM2xZM2xZM2xZO3BdNvmWLLmWLLmWLLmWLLmWLLmWLLmWLLmWLLm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",
      "",
      "eJzVncGOJElyZP+lzw0iTFXNVHV+hdjDYJcLECCGBGdug/n39QYjs2oxnp0mneGeIicOCu5BibYM1ShJf6/+/st//Of//vPf/v0///LXX/70918e/xL1y5/+9e+//PW//vyX3/7gr3/783//7Zc/PX795d/+8n+O//uPX3/5v//+H//2y5/GP/7Xr79d3tDl84FdPrDLDbvcsctj9/Jf/+mq4cPerjz+d9T71T6frz4vffV16avnpa++/RP5h159+wf4j7z62v55/0Ovvv3x+EOvvv1p+kOvvv3h+0OvfulndV36WV2XflbXpZ/VdelndV36Wc1LP6t56Wc1L/2s5qWf1fzSZ9Vnv7+61/j51c8uXw9/v3w94p/DfOmj/eowX5oErw7zpcHx6jBfmjOvDvOlsfTiMPWlKfbqMF8aeq8O86UZ+eowXxqprw7DNIGLaQIX0wQupglcTBO4mCZwM03gZprAzTSBm2kCN9MEbqYJ3EwTuJkmcDNN4GaawOPBNILHg2kGjwfTEB4Ppik8HkxjeDyY5vB4MA3i8WCaxOPBNIrHg2oWD6pZPKhm8aCaxYNqFg+qWTyoZvGgmsWDahYPqlk8qGaxUc1io5rFRjWLjWoWG9UsNqpZbFSz2KhmsVHNYqOaxU41i51qFjvVLHaqWexUs9ipZrFTzWKnmsVONYudahYH1SwOqlkcVLM4qGZxUM3ioJrFQTWLg2oW70MWt6ShmsX7iMgtaahm8dcgETTN/PHc7spxkubWT/inaW78KQ7/cVLH/z45qa+BH2garx9pun7/8vb5vLjLf1zab8Fv/IF/bfAbv6e8Nvj2h/p5/fbH7nn99up7Xo8RgGOfyvif6/c5i+f1GAQ49lmI5/UYBjj2eYXn9eD57j/1/7wePN/9Z+ef14Pnu/8E+vN68Hz3n+N+Xg+e7/7T0M/rwfPdf6b4eT14vvtP5j6vB893//nW5/Xg+e4/Jfq8Hjzf/Wctn9eD57v/xOLzevB895/7e16Pna/tPzz3vB47X9t/AO15PXa+9sDO1/Yfs3pej52v7T+q9LweO1/bf9znf67ffyDneT14vvsPtTyvB893/8GQ5/Xg+e4/XPG8Hjzf/QcUnteD57v/S/7n9eD57v+i/Hk9eL77v2x+Xg+e7/4vbJ/Xg+e7/0vP5/Xg+e7/4vB5PXi++798e14Pnu/+L7Ce14Pnu/9LoOf14Pnu/yLleT14vvu/jHheD57vfqH/vB483/1S/Hk9eL77xfLzevB8QQOOgQocAx04BkpwDLTgGKjBsX0PzvN68Hz3a8Xn9eD57vtknteD57tf/T2vB893v+h6Xg+e77475Xk9eL5gf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf2Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+Vgf+VgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxVgfxXov0AG9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcB9lcT7K8m2F9NsL+aYH81wf5qgv3VBPurCfZXE+yvJthfTbC/mmB/NcH+aoL91QT7qwn2VxPsrybYX02wv5pgfzXB/mqC/dUE+6sJ9lcT7K8m2F9NsL+aYH81wf5qgv3VBPurCfZXE+yvJthfTbC/mmB/NcH+aoL91QT7qwn2VxPsrybYX02wv5pgfzXB/mqC/dUE+6sJ9lcT7K8m2F9NsL+aYH81wf5qgv3VBPurCfZXE+yvJthfTbC/mmB/NcH+aoL91QT7qwn2VxPsrybYX02wv5pgfzXB/mqC/dUE+6sJ9lcT7K8m2F9NsL+aYH81wf5qgv3VBPurCfZXE+yvJthfTbC/mmB/NcH+aoL91QT7qwn2VxPsrybYX02wv5pgfzXB/mqC/dUE+6sJ9lcT7K8m2F9NsL+aYH+1wP5qgf3VAvurBfZXC+yvFthfLbC/WmB/tcD+aoH91QL7qwX2VwvsrxbYXy2wv1pgf7XA/mqB/dUC+6sF9lcL7K8W2F8tsL9aYH+1wP5qgf3VAvurBfZXC+yvFthfLbC/WmB/tcD+aoH91QL7qwX2VwvsrxbYXy2wv1pgf7XA/mqB/dUC+6sF9lcL7K8W2F8tsL9aYH+1wP5qgf3VAvurBfZXC+yvFthfLbC/WmB/tcD+aoH91QL7qwX2VwvsrxbYXy2wv1pgf7XA/mqB/dUC+6sF9lcL7K8W2F8tsL9aYH+1wP5qgf3VAvurBfZXC+yvFthfLbC/WmB/tcD+aoH91QL7qwX2VwvsrxbYXy2wv1pgf7XA/mqB/dUC+6sF9lcL7K8W2F8tsL9aYH+1wP5qgf3VAvurBfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXCfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXBfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZXDfZX4wEWWMcN2AkfN2BHfNyAnfFxA3bIxw3YKR83YMd83ICd83EDdtDHDehJg1XWcQN60mCZddyAnjRYZx03oCcNFlrHDehJg5XWcQN60mCpddyAnjRYax03oCcNFlvHDehJg9XWcQN60mC5ddyAnjRYbx03oCcNFlzHDehJgxXXcQN60mDJddyAnjRYcx03oCcNFl3HDehJg1XXcQN60mDZddyAnjRYdx03oCcNFl7HDehJg5XXcQN60mDpddyAnjRYex03oCcNFl/HDehJg9XXcQN60mD5ddyAnjRYfx03oCcNFmDHDehJgxXYcQN60mAJdtyAnjRYgx03oCcNFmHHDehJg1XYcQN60mAZdtyAnjRYhx03oCcNFmLHDehJg5XYcQN60mApdtyAnjRYix03oCcNFmPHDehJ71djv/7TVRbHaH5eefzvXO9Xe51cPjLfLn78eGG39yjbP0PXR9n+6bw+yvbP/fVRtj9R10fZ/qxeH2V7ClwfZXu+XB9le3JdH2V7Jl4dZez31NdHoZm2Y79bvz4KzbQ9/s7NE4Vm2o7932FcH4Vm2o7937tcH4Vn2u7/ruj6KDzTdv/3W9dH4Zm2+7+Tuz4Kz7Td/z3i9VF4pu3+7z6vj8Izbfd/X3t9FJ5pu/875uuj8Ezb/d+LXx+FZ9ru/y7/+ig803b/+YPro/BM2/1nJq6PwjNt95/zuD4Kz7Tdfzbl+ig803b/eZrro/BM2/1ngK6PwjNt959buj4Kz7Tdf9bq+ig803b/+bDro/BM2/1n2q6PwjNt95/Duz4Kz7Tdf3bw+ig803b/ecfro/BM2/1nNK+PwjNt958rvT4Kz7Tdfxb2+ig803b/+d3ro/BM2/1njq+PwjNt95+Tvj4Kz7Tdf7b7+ig803b/efTro/BM2/1n6K+PwjNt95/7vz4Kz7TdZxWuj8Izbff5iuuj8EzbfSbk+ig803afY7k+Cs+03Wdvro/CM233eaHro/BM233G6fooPNN2n8u6PgrPtOVhyQYPSzZ4WLLBw5INHpZs8LBkg4clGzws2eBhyQYPS2Y8LJnxsGTGw5IZD0tmD5ppazwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSGQ9LZjwsmfGwZMbDkhkPS2Y8LJnxsGTGw5IZD0tmPCyZ8bBkxsOSOQ9L5jwsmfOwZM7DkvmDZto6D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTOw5I5D0vmPCyZ87BkzsOSOQ9L5jwsmfOwZM7DkjkPS+Y8LJnzsGTBw5IFD0sWPCxZ8LBk8aCZtsHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjwsWfCwZMHDkgUPSxY8LFnwsGTBw5IFD0sWPCxZ8LBkwcOSBQ9LFjws2eRhySYPSzZ5WLLJw5LNB820nTws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBkk4clmzws2eRhySYPSzZ5WLLJw5JNHpZs8rBki4clWzws2eJhyRYPS7YeNNN28bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5ItHpZs8bBki4clWzws2eJhyRYPS7Z4WLLFw5IlD0uWPCxZ8rBkycOS5YNm2iYPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMnDkiUPS5Y8LFnysGTJw5IlD0uWPCxZ8rBkycOSJQ9LljwsWfKwZMXDkhUPS1Y8LFnxsGT1oJm2xcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ8bBkxcOSFQ9LVjwsWfGwZMXDkhUPS1Y8LFnxsGTFw5IVD0tWPCxZ87BkzcOSNQ9L1jwsWT9opm3zsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUPS9Y8LFnzsGTNw5I1D0vWPCxZ87BkzcOSNQ9L1jwsWfOwZM3DkjUNS3b8Gcu0Pf6MZdoef8YybY8/Y5m2x5+xTNvjz1im7fFnLNP2+DOWaXv8Gcu0Pf6MZ9rSsGRHFJ5pS8OSHVF4pi0NS3ZE4Zm2NCzZEYVn2tKwZEcUnmlLw5IdUXimLQ1LdkThmbY0LNkRhWfa0rBkRxSeaUvDkh1ReKYtDUt2ROGZtjQs2RGFZ9rSsGRHFJ5pS8OSHVF4pi0NS3ZE4Zm2NCzZEYVn2tKwZEcUnmlLw5IdUXimLQ1LdkThmbY0LNkRhWfa0rBkRxSeaUvDkh1ReKYtDUt2ROGZtjQs2RGFZ9rSsGRHFJ5pS8OSHVF4pi0NS3ZEOZ225iPebvOevxtoxHhLPsLj/dpaN6Q/HdAy6U9nukz60zUgk/50c8ikP102MulP95NK+nNgTyb96RaUSX+6OGXSS+/ac/hQJr30rj1HHGXSS+/ac5BSJr30rj3HNWXSS+/acyhUJr30rj1HT2XSS+/ac8BVJr30rj3HaGXSS+/ac1hXJr30rj1HgmXSS+/ac/BYJr30rj3Hm2XSS+/ac4haJr3yrh3nqLZMeuVdO86BcJn0yrt2PJR37Tgn1WXSK+/acc7Dy6RX3rXjnLpXSX8O6sukl9615zoAmfTSu/ZcOiCTXnrXnqsNZNJL79pzgYJMeulde65pkEkvvWvPZRAy6aV37blyQia99K49F1vIpJfetef6DJn00rv2XNIhk156156rQGTSS+/ac+GITHrpXXuuNZFJL71rz+UpMumld+25okUmvfSuPRfByKSX3rXnuhmZ9NK79lxqI5Neeteeq3Nk0kvv2nNBj0x66V17rgGSSS+9a89lQzLppXftudJIJr30rj0XJ8mkl96153ommfTSu/ZcAiWTXnrXSnujhrQ3akh7o4a0N2pIe6OGtDdqSHujhrQ3akh7o4a0N2pIe6OGtDdqSHujhrQ3akh7o4a0N2pIe6OGtDdqSHujhrQ3akh7o4a0N2pIe6OGtDdqSHujhrQ3akh7o4a0N2pIe6OGtDdqSHujhrQ3akh7o4a0N2pIe6OGtDfKpL1RJu2NMmlvlEl7o+yhvGtN2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RJe6NM2htl0t4ok/ZGmbQ3yqS9USbtjTJpb5RLe6Nc2hvl0t4ol/ZG+UN517q0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeKJf2Rrm0N8qlvVEu7Y1yaW+US3ujXNob5dLeqJD2RoW0NyqkvVEh7Y2Kh/KuDWlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RIe2NCmlvVEh7o0LaGxXS3qiQ9kaFtDcqpL1RU9obNaW9UVPaGzWlvVHzobxrp7Q3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSnujprQ3akp7o6a0N2pKe6OmtDdqSXujlrQ3akl7o5a0N2o9lHftkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kYtaW/UkvZGLWlv1JL2Ri1pb9SS9kaltDcqpb1RKe2NSmlvVD6Ud21Ke6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjUppb1RKe6NS2huV0t6olPZGpbQ3KqW9USntjSppb1RJe6NK2htV0t6oeijv2pL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStobVdLeqJL2RpW0N6qkvVEl7Y0qaW9USXujStob1dLeqJb2RrW0N6qlvVH9UN61Le2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1tDeqpb1RLe2NamlvVEt7o1raG9XS3qiW9ka1sjfKH8reqCO98K490gvv2iO98K490gvv2iO98K490gvv2iO98K490gvv2iO99K5V9kYd6aV3rbI36kgvvWuVvVFHeuldq+yNOtJL71plb9SRXnrXKnujjvTSu1bZG3Wkl961yt6oI730rlX2Rh3ppXetsjfqSC+9a5W9UUd66V2r7I060kvvWmVv1JH+fNfGY77//wj73fQ2/D3PWP376Wu+vW71j+RpJ5e2v13a5T+S93vy8z2rkPx8xyokP9+vCsnPd6tA8g8cUQrJz3eqQvLzfaqQ/HyXKiQ/36MKyWV36AcuKIXksjv0AweUQnLZHfqB+0kh+b07tHO8/U3kYfX70avrLfqcn/wH8beXrfjpVf39Xd67b7/rXd67m7/rXd67x7/rXd6787/rXd77/eC73uW93yW+612+9nvHT8XTaZxh7zXVcPefA/3zxZ7reW2MfL90zffsr/3mcWv2D1xYGtlf++3j3uyv/U5xb/bXflO4N/tr9/+92V+71e/N/tpdfW/2127ge7ML79UPzFcS2T/wXmlkF96rHzivNLIL79UPfFca2YX36geuK43swnv1A8+VRnbhvfqB40oju/Be/cBvpZFdeK9+4LbSyC68Vz/wWmlkF96rHzitNLIL79UPfFYa2YX36gcuK43swnv1A4+VRnbhvfqBw0oju/Be/cBfpZFdd6+OD9xVGtl19+r4wFulkV13r46H7l4dHxirNLLr7tXxga1KI7vuXh0fmKoksn/gqdLILrxXP3BUaWQX3qsf+Kk0sgvv1Q/cVBrZhffqB14qjezCe/UDJ5VGduG9+oGPSiO78F79wEWlkV14r37godLILrxXP3BQaWQX3qsf+Kc0sgvv1Q/cUxrZhffqB94pjezCe/XF3ql7swvv1Re7p+7NLrxXX+yfuje78F59sYPq3uzCe/XFHqp7swvv1Re7qO7NLrxXX+yjuje78F59sZPq3uzCe/XFrql7swvv1Rd7oe7NLrxXX+xwuje78F4V9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h39IQ9i0NYd/SEPYtDWHf0hD2LQ1h35IJ+5ZM2Ldkwr4lE/Yt2UN3r5qwb8mEfUsm7FsyYd+SMfuWwvwt+08Zjuwnr5tv/+rfqB9vs8bb22RWM73ybRJv61e+TeLF/sfeZs+zt0n8HeCFb/PFmpH7/qlpe7Fk5M7kr/2Kdmfye/8Z4Vcmv/efBn5l8nv/ud9XJn/tV7M7k7/2i9mNyV+sFbkz+Wu/Pt2ZXHaHvlgocmdy2R36YpnInclld+iLRSJ3Jr93h3aOt78uPKx+P3r1218tes5P/oP428tW/PSq/v4u79233/QuX6wmYX2X9+7x73qX9+7873qX934/+K53ee93ie96l/d+7/iudyn8axhhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9aymLCWxYS1LCasZTFhLYsJa1lMWMtiwloWE9ayuLCWxYW1LC6sZXFhLYs/dPeqC2tZXFjL4sJaFhfWsjizluWz7MyulU+zC+9VZivKp9mF9+oQ3qtDeK8O4b06hPfqEN6rQ3ivmvBeNeG9+mI/1b3Zhffqix1V92YX3qsv9lTdm114r77YVXVvduG9+mJf1b3Zhffqi51V92YX3qsv9lbdm114r77YXXVvduG9+mJ/1b3Zhffqi11T92YX3qsv9kLdm114r77Y4XRvduG9KuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i25sG/JhX1LLuxbcmHfkgv7llzYt+TCviUX9i2FsG8phH1LIexbCmHfUjx092oI+5ZC2LcUwr6lEPYthbBvKYR9SyHsWwph31II+5ZC2LcUzL6lMH/L/lOGI/vJ6+bbv5Y+6sfbrPH+NolX8CvfJvG2fuXbJF7sf+xt9jx7m8TfAV74Ns81I4/nPY/ffYOz3157jfEjcb+/9ul/wte89rmm40Wvffo15EWvffo14UWvfbrGX/Tap2v2Ra99ugZf9Nqnu+dFr3068F/02hd+Ls81Aq957XPM/0WvfeHn8hyTf9FrX/i5PMfMX/TaF34uzzHtF732hZ/Lc8z5Ra994efyHBN+0Wtf+Lk8x2xf9NoXfi7PMdUXvfaFn8tzzPNFr33h5/Ick3zRa1/4uTzHDF/02pd9LuPxlV08fiNDf/xlp368vp/+Fcbzke+X56N+vvwtzhfGxBVxvjBZrojzhWF0RZwvzK8r4nxh5F0R5wtT8oo4XxisV8T5wiy+IM5XvlZdEefWqRzrR5y0szi3TuXP49w6lT+Pc+tUrh+Xl53+7Nw6lT+Pc+fcqfVTnHycxblz7nwe5ytfG6+Ic+fc2Yhz59zZiHPn3NmIc+fc2Yhz59zZiHPnt8GNOHd+G9yIwzWVz0UI3xbn3G3wfXG4pvK5geD74nBN5XNPwPfF4ZrK5zT/98XhmsrnzP33xeGayudk/PfF4ZrK5/z698XhmsrnlPn3xeGayucs+PfF4ZrK58T298XhmsrnXPX3xeGayuf08/fF4ZrK54zy98XhmsrnJPH3xeGayue87/fFoZrK45zK/b44VFN5nLOz3xeHaiqPB9VUHufQ6vfFoZrK4xwt/b44VFN5nAOg3xbnnOn8vjhcU/mcvPy+OFxT+ZyP/L44XFP5HE38vjhcU/kc9fu+OFxT2bimsnFNZeOaysY1lY1rKhvXVDauqWxcU/kryO4Vcbim8lfA4CvicE3lr+DHV8ThmspfgZyviMM1lb+CUl8Rh2sqfwXYviIO11T+ChZ+RRyuqXwrvbYRh2sq30qvbcThmsq30msbcbim8q302kYcrql8K722EYdrKt9Kr23E4ZrKt9JrG3G4pvJXNApXxOGaylxs3+Bi+wYX2ze42L7BxfYNLrZvcLF9g4vtG1xs3+Bi+wYX2ze42L7BxfYNLrZvcLF9g4vtG1xs3+Bi+wYX2ze42L7BxfYNLrZvcLF9g4vtG1xs3+Bi+wYX2ze42L7BxfYNLrZvcLF9g4vtG1xs3+Bi+wYX2ze42L7BxfYNLrZvcLF9g4vtG1xs3+Bi++xWXKxtvl/ekWdx7vygb8S58Uf5N2bl7fLfgJGzODf+KP92Fu9xbH1yefvbf8qun5L3e/Ibf+pfm/xOzOrFyW/8hvN7yd/i3PgNZyfOjYNvJ86Ng28nzo3fcHbi3PgNZycOyRx+i0MyXJ9x7kSgwh/+HscfcRbnzjG4EefOMbgR584xuBHnzjG4EefOMbgR584xuBHnzm/HG3HunMobce6cyp/HuROB2onDNZXvRKB24nBN5TsRqJ04XFP5TgRqJw7XVL4TgdqJwzWV70SgduJwTeU7EaidOFxT+U4EaifOnbV/1/u/ehSP0670VshnI86dtf/ncW6FfP7/OGc9+62Qz0acO+fOI37U/o88+2TdCfnsxLnz+85GnHt/R/PjZ+e44SzOnd93NuLc+X3n8zh3Yiw7ce78vrMR5865sxHnzrmzEefO7zsbce78W+hGnDun8kYcrql8J8ayE4drKt+JsezE4ZrKd2IsO3HuncqfPZNyJ8ayE+feqfxpnHun8qdxuJ5nuhNj2Ylz71T+LM6dGMtOnHun8qdx7p3Kn8bhmsp3Yiw7cbim8p0Yy04crql8J8ayE4drKt+JsezE4ZrKd2IsO3G4pvKdGMtOHK6pfCc3shOHagz6+b96ZKOe99mc73etH3edfh4/vev0Y/PpXac/3Z/edfpD+PFd//jH/wMANYd5",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n        // docs:end:storage\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // docs:start:storage_init\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n                // docs:end:storage_init\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub Field,\n        signing_pub_key_y: pub Field,\n    ) {\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, Option::none(), true);\n        // docs:end:initialize\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        // docs:start:get_note\n        let public_key = storage.signing_public_key.get_note();\n        // docs:end:get_note\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature(public_key.x, public_key.y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/main.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "71": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "86": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/account.nr"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/auth_witness.nr"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/entrypoint.nr"
      },
      "90": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_unique_siloed_note_hash,\n    },\n    hash::pedersen_hash,\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    context::PrivateContext,\n};\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier and to broadcast\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 3 fields\n    pub fn serialize(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        [self.x, self.y, self.owner]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    PublicKeyNote {\n        x: preimage[0],\n        y: preimage[1],\n        owner: preimage[2],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    pedersen_hash(note.serialize(),0)\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: PublicKeyNote) {\n    note.broadcast(context, slot);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/public_key_note.nr"
      }
    }
  }
}
