/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import TestContractArtifactJson from '../artifacts/test_contract.json' assert { type: 'json' };

export const TestContractArtifact = TestContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Test;
 */
export class TestContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, TestContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, TestContract.artifact, wallet) as Promise<TestContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<TestContract>(Point.ZERO, wallet, TestContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<TestContract>(publicKey, wallet, TestContractArtifact, Array.from(arguments).slice(2));
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TestContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** consume_mint_private_message(secret_hash_for_redeeming_minted_notes: field, amount: field, canceller: field, msg_key: field, secret_for_L1_to_L2_message_consumption: field) */
    consume_mint_private_message: ((
      secret_hash_for_redeeming_minted_notes: FieldLike,
      amount: FieldLike,
      canceller: FieldLike,
      msg_key: FieldLike,
      secret_for_L1_to_L2_message_consumption: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** consume_mint_public_message(to: field, amount: field, canceller: field, msg_key: field, secret: field) */
    consume_mint_public_message: ((
      to: FieldLike,
      amount: FieldLike,
      canceller: FieldLike,
      msg_key: FieldLike,
      secret: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** create_l2_to_l1_message_public(amount: field, secretHash: field) */
    create_l2_to_l1_message_public: ((amount: FieldLike, secretHash: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** create_nullifier_public(amount: field, secretHash: field) */
    create_nullifier_public: ((amount: FieldLike, secretHash: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** emit_msg_sender() */
    emit_msg_sender: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** emit_nullifier(nullifier: field) */
    emit_nullifier: ((nullifier: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** emit_unencrypted(value: field) */
    emit_unencrypted: ((value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_portal_contract_address(aztec_address: field) */
    get_portal_contract_address: ((aztec_address: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_public_key(address: field) */
    get_public_key: ((address: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_random(kindaSeed: field) */
    get_random: ((kindaSeed: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_this_address() */
    get_this_address: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_this_portal_address() */
    get_this_portal_address: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_time_equal(time: field) */
    is_time_equal: ((time: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** test_code_gen(aField: field, aBool: boolean, aNumber: integer, anArray: array, aStruct: struct, aDeepStruct: struct) */
    test_code_gen: ((
      aField: FieldLike,
      aBool: boolean,
      aNumber: bigint | number,
      anArray: FieldLike[],
      aStruct: { amount: FieldLike; secretHash: FieldLike },
      aDeepStruct: {
        aField: FieldLike;
        aBool: boolean;
        aNote: { amount: FieldLike; secretHash: FieldLike };
        manyNotes: { amount: FieldLike; secretHash: FieldLike }[];
      },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
