{
  "name": "Child",
  "functions": [
    {
      "name": "check_sender",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/82TQQ6CMBBFW7D0Ei56hJa2MN15B09AYYguxATq/SVxjCa6syT+zZ/Vy7xkRjLGduwVTn2g1r/FiJUhvnCtbpzDtkZjTafrEMFr52MDBowHP9RgLYKDNsTQ6mCcRTP6YEcCi3w76i28q5VRbeBd/bm3XBlyA2+Z2fuZIrM/z+hcZHSWxOHkXLLH3wu6U8k+w9/mknpPfcRpwFldbktSEVU6nRfVX6c0d326A1E0KppUBAAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "pubGetValue",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "base_value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "pubIncValue",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "new_value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "pubIncValueInternal",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "new_value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "pubSetValue",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "new_value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "setValueTwiceWithNestedFirst",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "setValueTwiceWithNestedLast",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "value",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "input",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZ28TWRTGcYdge/uyBRJ66C2AJ7aT8dYs2zvb2Q5enG303nvvvffee/t0iPOXBgESvMqxxNUz0qN5N5rf2B5PufecO6lU6njqwVKTrFuTda59S5S2baQfs918rrlQqLQ0VaJ8NC7XVCrHxVyhWG6OozgqxsXxTXE+X4kLcUupXGrJlaJCvhK1FUv5tmTDab99zFXDnbFtZKrgzjzl7qxtI1sFd9bZ/aTve3v3s95xP2uSY9mQbK/OctdSL7putHRNPjOOS6fkuHR9CvarW+rRpTZZtybrXPuWqLPjtrqk/L7vt1PV+V16H786R3N3x/2q1vHr4Hz8ahyPX49AzB0czT0DMdc6mnsFYu7oaO4diDntaG4IxJxxNPcJxJx1NPcNxNzN0dwvEHN3R3P/QMz1juYBguaBguZBgubBguYhguahguZhguZGQfNwQfMIQfNIQXNO0BwJmpsEzXlBc0HQXBQ0NwuaWwTNsaC5JGh+Q9D8pqD5LUHz24LmdwTN7wqaWwXN7wmaRwma3xc0fyBo/lDQ/JGg+WNB8yeC5k8FzZ8Jmj8XNH8haP5S0PyVoPlrQfNoQfM3guZvBc3fCZq/FzT/IGj+UdD8k6B5jKD5Z0HzL4LmXwXNvwmafxc0/yFo/lPQPFbQPE7QXBY0/yVoHi9orgia2wTNfwua/xE0/yto/k/Q/L+geYKgeaKgeZKgebKgeYqgeaqgeZqgebqgeYageaageZagebageY6gea6geZ6geb6geYGgeaGgeZGgebGgeYmgeamgeZmgebmgeYWgeaWgeZWgebWgeY2gea2geZ2geb2geYOgeaOgeZOgebOgeYugeaugeZugebugeYegeaegeZegebegeY+gea+geZ+geb+g+YCg+aCg+ZCg+bCg+Yig+aig+Zig+big+YSg+aSg+ZSg+XQg5mcczWcCMT/raD4biPk5R/O5QMzPO5rPB2J+wdF8IRDzi47mi4GYX3I0XwrE/LKj+XIg5k6O5iuBmF9xNF8NxPyqo/laIObXHM3XAzG/7mi+EYi5s6P5ZiDmLo7mW47mumQ7NYm51tLRkrZkLFkL94TcI3HPwDU015RcY3HNwX8w/0mcozln8RvmO81njLnuoWO6P1n3sPS09LL0tjRY+lj6WvpZ+lsGWAZaBlkGW4ZYhlqGWRotwy0jLCM5BpbIQp97+r7TB52+4PTJpm90bKGvMH126TtLH1b6ktKn837fSvoajrLQ944+cPRFo08YfbPoI0VfJfoM0XeHPjT0ZaFPCX07Rlvo60CfA+r+UwefuvDUSadu+BgLdaWps0zdYerwUpeWOq3ULR1roa5l2ULdQ+oAUhePOnHUTaOOGHW1qDNF3SXqEFGXhzo11G2ZYqGuB3UuqPtAHQTqAjBPnnnjcyzMK2aeLfNOmYfJvETm6TFvbYmFeU3LLMx7YR4I8yKYJ8C4ecaRM66accaMu2UcKuMyGafIuL0tFsZ1Mc6JcT+Mg2FcCOMkGDfAe3TeK/Oele8A7+F4L8V7Gt5bHLHwXPuYheeePAfkuRjPiXhuwnME7qu5z+S+i/sQrsu5TuW6jesY/tf5n+O8z3mQ8wK/k/vLPbfi0jNwngAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "valueInternal",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "input",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZ3MTVxTGcRkjKT2kgA0YEL0Z0FqSvUp1SO8kpJCOZcuBJBhii4R0Qnonjd577+3TMZz/zDLADLzy0YzvPJp5Zt/t7G+1Wm2595wLqVRqT+rKpyFZdibL/OA+UdrWkb7Oegv59mKx2tFWjQpRV76tXIlL+WKp0h5HcVSKSz1tcaFQjYtxR7lS7siXo2KhGvWWyoXeZMVpv23M18OdsXVk6uDODHF31taRrYM76+y+0fE+2O1sdtzOhmRf5pL1NVkuWppFl62W0cl3xn4ZkeyX0UNgu8akrv0MS5adyTI/uE/UkPI7Roel6vNbanQ2j3Rc1yjH/Xc+kP3X5Gge67hd9dp/Q/k31yJoHheIudHRPD4Q83BH84RAzGlHcy4Qc8bRPDEQc9bRPCkQ8xhH8+RAzGMdzVMCMTc7mqcKmqcJmqcLmmcImmcKmmcJmmcLmlsFzXMEzXMFzfMEzXlBcyRobhM0FwTNRUFzSdDcLmjuEDTHguayoPk+QfP9guYHBM0PCpofEjQ/LGjuFDQ/ImieL2h+VND8mKD5cUHzE4LmJwXNTwmanxY0PyNoflbQ/Jyg+XlB8wuC5hcFzQsEzS8Jml8WNC8UNL8iaH5V0PyaoPl1QfMiQfMbguY3Bc1vCZrfFjS/I2h+V9D8nqB5saC5S9BcETR3C5p7BM1VQXOvoPl9QfMSQfNSQfMHguYPBc0fCZqXCZr7BM3LBc0rBM0fC5r7Bc0DguaaoHmloPkTQfOnguZVgubPBM2fC5q/EDR/KWj+StD8taD5G0HzakHzt4LmNYLm7wTN3wuafxA0/yho/knQ/LOg+RdB86+C5t8Ezb8Lmv8QNP8paP5L0LxW0Py3oPkfQfO/gub/BM3/C5rXCZrXC5o3CJo3Cpo3CZo3C5q3CJq3Cpq3CZq3C5p3CJp3Cpp3CZp3C5r3CJr3Cpr3CZr3B2K+ydF8IBDzzY7mg4GYb3E0HwrEfKuj+XAg5tsczUcCMd/uaD4aiPkOR/OxQMx3OpqPB2Ie4Wg+EYj5LkfzyUDMdzuaTwVivsfRfDoQ872O5jOBmEc6ms8GYh7laD7naG5K1tOQmBstwy1pS8aStXBPyD0S9wxcQ3NNyTUW1xz8B/OfxDmacxa/YY5pvmPMTVft083JssUyzjLeMsGSs0y0TLJMtkyxTLVMs0y3zLDMtMyyzLa0WuZY5lrmsQ8skYU+9/R9pw86fcHpk03f6NhCX2H67NJ3lj6s9CWlT+flvpX0NZxvoe8dfeDoi0afMPpm0UeKvkr0GaLvDn1o6MtCnxL6diyw0NeBPgfU/acOPnXhqZNO3fBFFupKU2eZusPU4aUuLXVaqVu62EJdy4qFuofUAaQuHnXiqJtGHTHqalFnirpL1CGiLg91aqjbssJCXQ/qXFD3gToI1AVgnjzzxldZmFfMPFvmnTIPk3mJzNNj3tpqC/Oa1liY98I8EOZFME+AcfOMI2dcNeOMGXfLOFTGZTJOkXF7ay2M62KcE+N+GAfDuBDGSTBugPfovFfmPSvHAO/heC/FexreW+yw8Fx7l4XnnjwH5LkYz4l4bsJzBO6ruc/kvov7EK7LuU7luo3rGP7X+Z/jvM95kPMCvxOO68ufTLJsSZYLq3091f7cspUDtVylmqstWTqQ617eV+vv6q5dAiTDfdCUnwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDI0MjXSUUvNSgExjQ/NaHaW0zJxUIKc2trYWALLUFF4=",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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",
      "",
      "",
      "",
      "",
      "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDHSUUvNSgHStjlJaZk6qkpVhrQ6GKkNjY1NLqEog28IQrtrYBJtyEyMDE5hyEyMzAsotjU2hii0tjBFKLWpjdZRMhqKjTenoaKAauKONLS3IdXRtLQBsg6Ur",
      "eJzVzsEKwjAMgOF3ybmHpWlr21eRHYpOGIxObG8l724HWxUcCh4ET0ngI/wFpvkU8jjHBL4AgT8WSNcQlyvlcMvgOwFDPNfJAi7jNIBHFi8KibRbZd0tNk1qjyvZqY0raT5wR3rFztKDWu4FqH+M1j+MrqZFk7PfR5u9aNRObu+N1O/TJTZLeHiyPfMd/EXAcA=="
    ],
    "fileMap": {
      "1": {
        "source": "// A contract used along with `Parent` contract to test nested calls.\ncontract Child {\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        abi::CallContext,\n        context::{PrivateContext, PublicContext, Context},\n        selector::compute_selector,\n        log::emit_unencrypted_log,\n        state_vars::public_state::PublicState,\n        types::type_serialization::field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n    };\n\n    struct Storage {\n        current_value: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                current_value: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor()  {}\n\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values.\n    #[aztec(private)]\n    fn value(\n        input: Field,\n    ) -> Field {\n        input + context.chain_id() + context.version()\n    }\n\n    fn check_sender(call_context: CallContext) {\n        assert_eq(call_context.msg_sender, call_context.storage_contract_address, \"Sender must be this contract\");\n    }\n\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values. \n    // Can only be called from this contract.\n    #[aztec(private)]\n    fn valueInternal(\n        input: Field,\n    ) -> Field {\n        check_sender(inputs.call_context);\n        input + context.chain_id() + context.version()\n    }\n\n    // Returns base_value + chain_id + version + block_number + timestamp\n    #[aztec(public)]\n    fn pubGetValue(base_value: Field) -> Field {\n        let returnValue = base_value + context.chain_id() + context.version() + context.block_number() + context.timestamp();\n\n        returnValue\n    }\n\n    // Sets `current_value` to `new_value`\n    #[aztec(public)]\n    fn pubSetValue(new_value: Field) -> Field {\n        \n        storage.current_value.write(new_value);\n        emit_unencrypted_log(&mut context, new_value);\n        \n        new_value\n    }\n\n    // Increments `current_value` by `new_value`\n    #[aztec(public)]\n    fn pubIncValue(new_value: Field) -> Field {\n        \n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        emit_unencrypted_log(&mut context, new_value);\n\n        new_value\n    }\n\n    // Increments `current_value` by `new_value`. Can only be called from this contract.\n    #[aztec(public)] \n    fn pubIncValueInternal(new_value: Field) -> Field {\n        \n        check_sender(inputs.call_context);\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        emit_unencrypted_log(&mut context, new_value);\n        \n        new_value\n    }\n\n    #[aztec(public)]\n    fn setValueTwiceWithNestedFirst() {\n        let pubSetValueSelector = compute_selector(\"pubSetValue(Field)\");\n        let _ret = context.call_public_function(context.this_address(), pubSetValueSelector, [10]);\n\n        \n        storage.current_value.write(20);\n        emit_unencrypted_log(&mut context, 20);\n    }\n\n    #[aztec(public)]\n    fn setValueTwiceWithNestedLast() {\n        \n        storage.current_value.write(20);\n        emit_unencrypted_log(&mut context, 20);\n\n        let pubSetValueSelector = compute_selector(\"pubSetValue(Field)\");\n        let _ret = context.call_public_function(context.this_address(), pubSetValueSelector, [10]);\n    }\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/child_contract/src/main.nr"
      },
      "31": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "34": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "38": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "39": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "53": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "62": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"
      },
      "64": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "65": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "68": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n    \n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/selector.nr"
      },
      "72": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "78": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization.nr"
      },
      "84": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      }
    }
  }
}
