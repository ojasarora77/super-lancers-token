/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import DocsExampleContractArtifactJson from '../artifacts/docs_example_contract.json' assert { type: 'json' };

export const DocsExampleContractArtifact = DocsExampleContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract DocsExample;
 */
export class DocsExampleContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, DocsExampleContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, DocsExampleContract.artifact, wallet) as Promise<DocsExampleContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(
    wallet: Wallet,
    min_points: bigint | number,
    max_points: bigint | number,
    legendary_card_secret: FieldLike,
  ) {
    return new DeployMethod<DocsExampleContract>(
      Point.ZERO,
      wallet,
      DocsExampleContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    min_points: bigint | number,
    max_points: bigint | number,
    legendary_card_secret: FieldLike,
  ) {
    return new DeployMethod<DocsExampleContract>(
      publicKey,
      wallet,
      DocsExampleContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return DocsExampleContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** add_common_cards(secrets: array) */
    add_common_cards: ((secrets: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** become_queen() */
    become_queen: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_points_of_common_cards(account: field, offset: integer) */
    get_points_of_common_cards: ((account: FieldLike, offset: bigint | number) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** get_total_points(account: field) */
    get_total_points: ((account: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** lock() */
    lock: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** replace_queen(account: field, points: integer) */
    replace_queen: ((account: FieldLike, points: bigint | number) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** replace_queen_unsafe() */
    replace_queen_unsafe: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** send_to_l1() */
    send_to_l1: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** simple_macro_example(a: field, b: field) */
    simple_macro_example: ((a: FieldLike, b: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** simple_macro_example_expanded(a: field, b: field) */
    simple_macro_example_expanded: ((a: FieldLike, b: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** unlock() */
    unlock: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** update_legendary_card(new_points: integer, new_secret: field) */
    update_legendary_card: ((new_points: bigint | number, new_secret: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
