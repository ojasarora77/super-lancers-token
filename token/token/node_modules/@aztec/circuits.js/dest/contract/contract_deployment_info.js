import { computeCompleteAddress, computeFunctionTreeRoot, computeVarArgsHash, hashConstructor, } from '@aztec/circuits.js/abis';
import { FunctionSelector, encodeArguments } from '@aztec/foundation/abi';
import { CircuitsWasm, Fr, FunctionData } from '../index.js';
import { generateFunctionLeaves, hashVKStr, isConstructor } from './contract_tree/contract_tree.js';
/**
 * Generates the deployment info for a contract
 * @param artifact - The account contract build artifact.
 * @param args - The args to the account contract constructor
 * @param contractAddressSalt - The salt to be used in the contract address derivation
 * @param publicKey - The account public key
 * @returns - The contract deployment info
 */
export async function getContractDeploymentInfo(artifact, args, contractAddressSalt, publicKey) {
    const constructorArtifact = artifact.functions.find(isConstructor);
    if (!constructorArtifact) {
        throw new Error('Cannot find constructor in the artifact.');
    }
    if (!constructorArtifact.verificationKey) {
        throw new Error('Missing verification key for the constructor.');
    }
    const wasm = await CircuitsWasm.get();
    const vkHash = hashVKStr(constructorArtifact.verificationKey, wasm);
    const constructorVkHash = Fr.fromBuffer(vkHash);
    const functions = artifact.functions.map(f => ({
        ...f,
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
    }));
    const leaves = generateFunctionLeaves(functions, wasm);
    const functionTreeRoot = computeFunctionTreeRoot(wasm, leaves);
    const functionData = FunctionData.fromAbi(constructorArtifact);
    const flatArgs = encodeArguments(constructorArtifact, args);
    const argsHash = await computeVarArgsHash(wasm, flatArgs);
    const constructorHash = hashConstructor(wasm, functionData, argsHash, constructorVkHash.toBuffer());
    const completeAddress = computeCompleteAddress(wasm, publicKey, contractAddressSalt, functionTreeRoot, constructorHash);
    return {
        completeAddress,
        constructorHash: constructorVkHash,
        functionTreeRoot,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGVwbG95bWVudF9pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L2NvbnRyYWN0X2RlcGxveW1lbnRfaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixrQkFBa0IsRUFDbEIsZUFBZSxHQUNoQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBb0IsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUYsT0FBTyxFQUFFLFlBQVksRUFBa0IsRUFBRSxFQUFFLFlBQVksRUFBYSxNQUFNLGFBQWEsQ0FBQztBQUN4RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBHOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLHlCQUF5QixDQUM3QyxRQUEwQixFQUMxQixJQUFXLEVBQ1gsbUJBQXVCLEVBQ3ZCLFNBQW9CO0lBRXBCLE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztLQUM3RDtJQUNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7UUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwRSxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQztRQUNKLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUM7S0FDdkUsQ0FBQyxDQUFDLENBQUM7SUFDSixNQUFNLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkQsTUFBTSxnQkFBZ0IsR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RCxNQUFNLFFBQVEsR0FBRyxNQUFNLGtCQUFrQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRCxNQUFNLGVBQWUsR0FBRyxlQUFlLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVwRyxNQUFNLGVBQWUsR0FBRyxzQkFBc0IsQ0FDNUMsSUFBSSxFQUNKLFNBQVMsRUFDVCxtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLGVBQWUsQ0FDaEIsQ0FBQztJQUVGLE9BQU87UUFDTCxlQUFlO1FBQ2YsZUFBZSxFQUFFLGlCQUFpQjtRQUNsQyxnQkFBZ0I7S0FDakIsQ0FBQztBQUNKLENBQUMifQ==