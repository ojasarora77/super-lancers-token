/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import EasyPrivateTokenContractArtifactJson from '../artifacts/easy_private_token_contract.json' assert { type: 'json' };

export const EasyPrivateTokenContractArtifact = EasyPrivateTokenContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract EasyPrivateToken;
 */
export class EasyPrivateTokenContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, EasyPrivateTokenContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, EasyPrivateTokenContract.artifact, wallet) as Promise<EasyPrivateTokenContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, initial_supply: bigint | number, owner: FieldLike) {
    return new DeployMethod<EasyPrivateTokenContract>(
      Point.ZERO,
      wallet,
      EasyPrivateTokenContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    initial_supply: bigint | number,
    owner: FieldLike,
  ) {
    return new DeployMethod<EasyPrivateTokenContract>(
      publicKey,
      wallet,
      EasyPrivateTokenContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return EasyPrivateTokenContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** getBalance(owner: field) */
    getBalance: ((owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mint(amount: integer, owner: field) */
    mint: ((amount: bigint | number, owner: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** transfer(amount: integer, sender: field, recipient: field) */
    transfer: ((amount: bigint | number, sender: FieldLike, recipient: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
