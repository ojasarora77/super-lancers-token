{
  "name": "Test",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "consume_mint_private_message",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_hash_for_redeeming_minted_notes",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_for_L1_to_L2_message_consumption",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "consume_mint_public_message",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "to",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_l2_to_l1_message_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_nullifier_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "emit_msg_sender",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZ3MbVRTG8ZVkSZYDAQIYnN57UbUlaggdAoQSINREsRwCxDHBFFND6L3XUEzvPR8w5+9ZTTaKZ/IiR5nceXbmjGzLvtrfrrffe86hKIomoyNTKn7dGL8WT2wqZa2N7DTtVoqD1WprqNwqVUo7iuVGs14rVmvNwXqpXqrVa8PleqXSqlfrQ41mY6jYKFUrrdJIrVEZiRvO+s1jsRvunLWR64I7d4q789ZGvgvuvKM7Y21komMn72WRdl5XnZNT27VuLoOU4zJIJeYxHX99nsX5FgPx9wWLnvjrdOJnmQ5fIfF+e8r5L9vidPuA4glO7Pt6E46owzszfn9W/H1rz+7xraOt0Z37JsbGW8Ob9+5KJf4qG79mpmmp8+c9iSWV91WVC9HRayBKLLmo47OixOfnoiNLw2lepra25JJtz1f7c2Yk3s8mfqfgOx9TW09vh79zzXfhc6f8fcfx900zH30n0Z/8/N6O+Uxu3e33kkeloxr0mNFkm96HvoGoO4eRdBdWlpd5diDmtKN5TiDmjKN5biDmHkfzvEDMWUfz/EDMOUfzgkDMeUfzwkDMA47mRYLmxYLmJYLmpYLmZYLm5YLmFYLmlYLmVYLm1YLmNYLmtYLmdYLm9YLmDYLmoqC5JGguC5orguaqoLkmaB4UNA8JmuuC5oag+QJB84WC5osEzRcLmi8RNF8qaN4oaL5M0LxJ0Hy5oPkKQfOVguarBM1XC5qvETRfK2i+TtB8vaB5s6D5BkHzjYLmmwTNWwTNNwuabxE03ypovk3QvFXQfLug+Q5B852C5m2C5rsEzXcLmu8RNN8raL5P0Hy/oHm7oHmHoLkpaN4paB4WNLcEzSOC5l2C5gcEzbsFzQ8Kmh8SND8saN4jaB4VNO8VNI8Jmh8RNO8TND8qaB4XND8maH5c0PyEoPlJQfOEoPkpQfPTguZnBM3PCpqfEzQ/L2jeL2h+QdB8QND8oqD5JUHzy4LmVwTNrwqaXxM0vy5ofkPQ/Kag+S1B89uC5ncEze8Kmt8TNL8vaP5A0PyhoPkjQfPHguZPBM2fCpo/EzR/Lmj+QtB8UND8paD5K0Hz14LmbwTNk4LmbwXN3wmavxc0/yBo/jEQc6+j+adAzAVH88+BmPsczb8EYp7haP41EPNpjubfAjGf7mj+PRDzTEfzH4GYz3A0/xmI+UxH81+BmM9yNP8diHmWo/mfQMxnO5r/DcR8jqP5v0DM5zqa/w/E3O9oPuRo7o/bScXmjEWPRdYiZ5G34JqQaySuGTiH5pyScyzOOTgGc0xiH80+i22Y/2nWcX9ieR6MX2dbzLGYazHPYr7FAouFFossFlsssVhqscxiucUKi5UWqyxWW6yxWGuxzmK9xQaWgwU136mBTk1wamRTM5oaytQUpsZuw4IarNQkpUYnNSup4diuaUjNu00W1ESjRhg1s6ghRU0lagxRc4caNNRkoUYJNTuoYUFNhy0W5PwnBz454cmRTs5wcmiTU5ocy9ssyMFLTlpytJKzlBye5LTcbkHOw6YFOfHIEUfONHKIkVOLHFPkXCIHETl5yFFDzhZymJDTY8yCnA/kQCAnAGPkGTPOGGrGFDPGdsKCMZiMSWSMHmPWGMPFmKb9Fox5OWDBmAjGCNBnnj7k9KmmjzF9bumDSp9M+ijSZ48+bPTpoo8TfX7oA0OfEPpI0GeAZ+g8U+YZK88ceQbH/wLPaHhmwT187mlPWnDPk3uA3BPjHhH3TLiHwDU115hcc3ENwjk556ics3EOwzGdYxz7fPaB7BPYRtrTYQtw89mPoAAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "emit_nullifier",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "nullifier",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZMTWRTG8QyQZH1ZncEHtwHSkZnOKsu6s846BDK4u7u7uw3uzsejOP+qppCCV3OmiltPVz2Vd13963Q6LfeeczeVSrWkHi41yefw5DPXuiVK2zrST1lvIddYLFab8tWoEI3J5cuVuJQrliqNcRRHpbg0Lh8XCtW4GDeVK+WmXDkqFqpRc6lcaE5WnPbbxlxbuDO2jkwbuDPPuTtr68i2gTvr7H7W8d7a7axz3M6aZF/WJ+urtdyz1Il+Nlg6Jd8Z+6Vjsl86PQfb1Tn1+OJ9XHVJuRxXzcV88bHjv90T25lr3RLVOJq7ptrmN+9tbudo7haIub2juXsg5g6O5h6BmNOO5vpAzBlHc89AzFlHc69AzJ0dzb0DMdc5mvsImvsKmvsJmvsLmgcImgcKmgcJmgcLmhsEzUMEzUMFzcMEzTlBcyRozguaC4LmoqC5JGhuFDQ3CZpjQXNZ0PyeoPl9QfMHguYPBc0fCZo/FjQPFzR/ImgeIWj+VND8maD5c0HzF4LmLwXNXwmavxY0fyNo/lbQ/J2g+XtB8w+C5h8FzSMFzT8Jmn8WNP8iaP5V0PyboPl3QfMfguZRguY/Bc1/CZr/FjT/I2j+V9D8n6D5f0HzaEHzGEFzRdA8VtA8TtBcFTQ3C5rHC5onCJonCponCZonC5qnCJqnCpqnCZqnC5pnCJpnCppnCZpnC5rnCJrnCprnCZrnB2KudTQvEPyeFwqaFwmaFwualwialwqalwmalwuaVwiaVwqaVwmaVwua1wia1wqa1wma1wdi7uJo3iD4PW8UNG8SNG8WNG8RNG8VNG8TNG8XNO8QNO8UNO8SNO8WNO8RNO8VNO8TNO8XNB8QNB8UNB8SNB8WNB8RNB8VNB8TNB8XNJ8QNJ8UNLcImk8Jmk8Lms8Ims8Kms8FYn7B0Xw+EPOLjuYLgZhfcjRfDMT8sqP5UiDmVxzNlwMxv+povhKI+TVH89VAzK87mq8FYu7oaL4eiPkNR/ONQMxvOppvBmJ+y9F8KxDz247m24GY33E03wnE/K6j+a6juTZZT01ibm/pYElbMpashXtC7pG4Z+AammtKrrG45uA/mP8kztGcs/gNc0zzHWOufWSfHk4+u1q6WbpbeljqLT0tvSy9LX0sfS39LP0tAywDLYMsgy0NliGWoZZh7ANLZKHPPX3f6YNOX3D6ZNM3OrbQV5g+u/SdpQ8rfUnp0/mgbyV9DUdY6HtHHzj6otEnjL5Z9JGirxJ9hui7Qx8a+rLQp4S+HSMt9HWgzwF1/6mDT1146qRTN3yUhbrS1Fmm7jB1eKlLS51W6paOtlDXsmKh7iF1AKmLR5046qZRR4y6WtSZou4SdYioy0OdGuq2zLBQ14M6F9R9oA4CdQGYJ8+88QUW5hUzz5Z5p8zDZF4i8/SYt7bCwrymVRbmvTAPhHkRzBNg3DzjyBlXzThjxt0yDpVxmYxTZNzeDgvjuhjnxLgfxsEwLoRxEowb4D0675V5z8oxwHs43kvxnob3FicsPNdusfDck+eAPBfjORHPTXiOwH0195ncd3EfwnU516lct3Edw/86/3Oc9zkPcl7gd/JguQ9Pu3c5mJwAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "emit_unencrypted",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_portal_contract_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "aztec_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+3d928TdxjH8QuJbaAtpTOBMsJeAXweybkzQPdMN93ExKGDEpq4Ld2U7k33oINCd9nzv0M8b3QWVhR+4onEVx9O+siRQBe/zhff+n6f53gURbuj00tL+tqbvubPbokzto7MGOst5rtLpVpPoRYX4/58oVJNyvlSudqdxElcTsoDhaRYrCWlpKdSrfTkK3GpWIsHy5XiYLrijN97zI+HO2vryI6DO3uOu3O2jtw4uHPO7jPt72f7Pjsc32dLui070/W1W05YOkRfuyzT0s+M7TI13S7TzoH3Nd3SGp3en5oX77+x9sh3H2ssV1kmpz9PskwY5cg2/dzr9Puz/tvn1LEh2+RoLA3PFMvE9PNj2VCr9w0N1/s3rhnaVB/uX19fNTAwXBsZad42raM+y+b18TvaRv2/5u3X+LdcNMb+0euDjkPf+WZE53e+YHe+aIw35rXulsjv6DwzGp+zCG/zBEfzrEDMrY7m2YGY2xzNnYGYM47mOYGYs47muYGYc47meYGYpzua5wdinuFoXhCIucPRvFDQvEjQvFjQvETQvFTQvEzQ3CVoXi5oXiFoXilozguaY0FzQdBcFDSXBM1lQXO3oLlH0JwImiuC5qsFzdcImq8VNF8naL5e0HyDoLlX0LxK0Lxa0LxG0HyjoPkmQfPNguZbBM23CppvEzTfLmi+Q9B8p6D5LkHz3YLmewTNfYLmewXN9wma7xc0PyBoflDQ/JCg+WFB81pB8yOC5kcFzY8Jmh8XND8haH5S0PyUoHmdoLlf0FwVNK8XNA8ImmuC5kFB8wZB89OC5mcEzc8Kmp8TNG8UND8vaN4kaB4SNG8WNL8gaB4WNI8ImuuC5hcFzS8Jml8WNG8RNL8iaH5V0PyaoPl1QfMbguY3Bc1vCZq3CprfFjRvEzS/I2h+V9D8nqD5fUHzB4LmDwXNHwmaPxY0fyJo/lTQ/Jmg+XNB8xeC5u2C5i8FzV8Jmr8WNH8jaP5W0PydoPl7QfMPguYfBc0/CZp3CJp/FjT/Imj+VdD8m6B5p6D5d0HzLkHzbkHzH4LmPwXNfwma/xY0/xOIeaKj+d9AzJMczf8FYp7saP4/EPMFjuY9gZgvdDTvDcR8kaN5XyDmKY7m/YGYL3Y0HwjEPNXRfDAQ8yWO5kOBmC91NB8OxHyZo/lIIObLHc1HAzFf4Wg+Foj5SkfzcUdze7qeltTcammzZCxZS87CNSHXSFwzcA7NOSXnWJxzcAzmmMR3NN9Z/A2zT/MZY25v2qY70teZllmW2ZZOyxzLXMs8y3zLAstCyyLLYssSy1LLMkuXZbllhWUlfktsKbBdLfR9pw86fcHpk51Y6KNMX2H67NJ3lj6s9CVt9Omkj+NqC33+6HtHHzj6otEnjL5Z9JGirxJ9hui7Qx8a+rLQp6TPQh8L+jrQ54C6/9TBpy48ddLXWqijTV1p6ixTd5g6vNSlpU7rOgt1PKsW6jxS95A6gNTFo04cddOoI0ZdLepMUXeJOkTU5aFOzWYLdUyo60GdC+o+UAeBugDMk99iYR4184qZZ8u8U+ZhMi+ReXpbLczj2mZhng/zXpgHwrwI5gkwbp5x5IyrZpwx424Zh8q4TMYpbrcwjo1xXYxzYtwP42AYF8I4CcYN8Byd58p8/jx35Dkcz6V4TrPTwn38XRbu83Lfk/uA3BfjPhH3TbiPwHU115lcd3Edwnk556mct3Eew3Gd4xzf+3wP8r3A30ljOQk14T4C6qAAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_public_key",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+Xd928TZxzH8Ysd26QtozMBAoS9Avg8knNnQnfpSDfdxNihaVNKk9BCJ6V70z3ooJTuveGfQ3zf0lmcLPNTHks8+lj6yBFBl3udz+e78/N8v8eCIDgSnHx0xM9D8XN+Zo8wY8vItFhuMT9QKtUHC/WwGI7mC5VqVM6XytWBKIzCclSuFaJisR6VosFKtTKYr4SlYj0cK1eKY/GCM+7WMd8Od9aWkW2DO3uau3O2jFwb3DnH7lPt7zNdzx6H69kRb8u+eHndluOWHtHnfsv8+DVju8yLt8v802C9FljSwcn9Kflw/R7rDtzuY411TMc/L7T0WhZZZsf/1mVJNbmyiZ+HHK1Pq2NmfoaPTGJduxLr3PDMiX/f6fbvFrsS27R5X2jebkHi78+Ktz2PHfXpkd3VifHtW+p7h3fWRkYnp8dHJ4Zrtcn61FSrFy/d4g+lEvhM0/9LvrCN3+WCFjvyUOBkq4SNd29yb+Nd1Bs/L4qf51oWN61DqmldZnq0dvhOChcH7fmESrVh+7vafks8Maccmvs8Macdmpd6Yu50aF7miTnj0LzcE3PWoXmFJ+acQ/NKT8wLHJpXeWJe6NC82hNzr0PzGk/MPQ7NawXN6wTN6wXN/YLmDYLmjYLmTYLmvKA5FDQXBM1FQXNJ0FwWNA8ImgcFzZGguSJovlDQfJGg+WJB8yWC5ksFzZcJmocEzcOC5s2C5ssFzVcImq8UNF8laL5a0HyNoPlaQfN1guYtgubrBc03CJpvFDTfJGgeETTfLGi+RdB8q6D5NkHz7YLmOwTNdwqatwqa7xI03y1ovkfQfK+g+T5B8/2C5gcEzdsEzaOC5qqgebuguSZorguaxwTNOwTNDwqaxwXNDwmaHxY0TwiaHxE07xQ0Pypo3iVofkzQPClonhI0TwuadwuaHxc0PyFo3iNo3itoflLQ/JSg+WlB8zOC5mcFzc8JmvcJmp8XNO8XNL8gaH5R0PySoPllQfMrguZXBc2vCZpfFzS/IWh+U9D8lqD5bUHzO4LmA4LmdwXN7wma3xc0fyBo/lDQ/JGg+WNB8yeC5k8FzZ8Jmg8Kmj8XNH8haP5S0PyVoPmQoPlrQfNhQfM3guYjguZvBc3fCZq/FzT/IGj+UdD8kyfmWQ7NP3ti7nJo/sUT8xkOzb96Yj7Tofk3T8xnOTT/7ol5tkPzH56Y5zg0/+mJea5D81+emOc5NP/tiflsh+Z/PDGf49D8ryfmcx2a//PEfJ5D8/+emM93aD7qifkCh+ZjDs3d8XI6YnPa0mnJWLKWnIVrQq6RuGbgHJpzSs6xOOfgM5jPJI7RHLN4D7NP8xpj7k5s04Px8xJLn2WpZZlluWWFZaVllWW1ZY1lrWWdZb2l37LBstGyCbcltBTYnpaShT739H2nD3pkoU82faPpo0xfYfrs0ne20YeVPp2bLfRxpK8hff7oe0cfOPqi0SeMvln0kaKvEn2G6LtDH5oRC31K6NtBHwv6OtDngLr/1MHfaqFOOnXDqaNNXWnqLFN3mDq82yzUaa1aqONJXUvqPFL3kDqA1MWjThx106gjRl0t6kxRd4k6RLss1Kmhbgt1TKjrQZ0L6j5QB2GPhXnyzBtnHjXziplny7xT5mHuszBPb7+FeVzMa2KeD/NemAfCvAjmCTBunnHkjKtmnDHjbhmHesDCOEXG7TGOjXFdjHNi3A/jYBgXwjgJxg3wuvO9Mt+z8r0j38MdsvA9zWEL9/G5r819Xu57ch+Q+2LcJ+K+CfcRuK7mOpPrLq5DOC/nPJXzNs5j+Fznc47jPsdBjgu8TxqPE9qmuCs6oAAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_random",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "kindaSeed",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82UTQ7CIBCFB9qiaOIFXHgFvAErD+ANTNoYE3823j+2KZhPyq4YfQlhYGjfmx/QIqJkRAWbiHs+zG4e9qrcvxz16n7sgm3DmjCwfSF+Uz4/roFWm8Q3YNOPdWbfhBqWrpVk8ibgohb1Yy1Wpj085HMLfy2febP4vs6cY0zNF2Iij8c6cq2gof4DLTrRQr+GnzUxyTnez+hb9GMpY38POHfP4+nePm6HS3dt05tOsII6w1CBYfLC+TC7eXi3JwlURvALSNn5j3MFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_this_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8MRNzymPVJOH3PFloniI0TxWapwnN04XmGULzTKF5ltA8W2ieIzTPFZrnCc3zheabhOabheay0FwRmvuF5qrQXBOa60LzgNDcEJqbQnNLaL5FaL5VaL5NaL5daL5DaL5TaF4gNN8lNC8Umu8Wmu8Rmu8Vmu8Tmu8Xmh8Qmh8Umh8Smh8Wmh8Rmh8Vmh8Tmh8XmhcJzU8IzU8KzU8JzU8Lzc8Izc8KzYuF5ueE5ueF5heE5heF5peE5peF5leE5leF5iVC81KhuS00vyY0LxOaO0LzoND8utD8htD8ptD8ltD8ttD8jtD8rtD8ntD8vtC8XGj+QGj+UGj+SGj+WGj+RGj+VGheITR/JjR/LjR/ITR/KTR/JTR/LTR/IzR/KzSvFJq/E5pXCc3fC80/CM0/Cs0/Cc0/C82/CM2/Cs2/Cc2/C81/CM1/Cs1/Cc1/C83/CM3/Cs3/Cc3/C82rheY1QvNaoXmd0LxeaN4gNG8UmjcJzZuF5i1C81aheZvQvF1o3iE07xSad2ViviSheXcm5ksTmvdkYr4soXlvJubLE5r3ZWK+IqF5fybmKxOaD2Riviqh+WAm5qsTmg9lYr4moflwJuZrE5qPZGK+LqH5aCbm6xOaj2ViviGh+Xgm5hsTmk9kYu5LaD6Z0NzX3U5v1zw8MiJSiBQjpQjXhFwjcc3AOTTnlJxjcc7BMZhjEvto9ln8D/Ob5jvuO+vvuan7PioyOjImMjYyLjI+MiEyMTIpMjkyJTI1Mi0yPTIjMjMyKzI7MicyNzIvMj/CjHtmvvMlMhOcGdnMjGaGMjOFmbHbiDCDlZmkzOhkZiUzHJlpyIy/0zPvmIm2MMLMLGZIMVOJGUPM3GEGDTNZmFHCzA5mWDDTgRkH9PxfFKEnPD3S6RlOD216StNjeXGEHrz0pKVHKz1L6eFJT0t6PNLzcEmEnnjtCD3T6CFGTy16TNFziR5E9OShRw09W+hhQk8PelzQ82F5hJ4ArJFnzThrqFlTzBrbFRHWYLImkTV6rFljDRdrmljjw5qXlRHWRKyKUDNPDTk11dQYU3NLDSo1mdQoUrNHDRs1XdQ4UfNDDQw1IdRIUDPAM3SeKfOMlWeOPIPjmRTPaPhNcA+fe9rc4+We5/YI98S4R8Q9E+4hcE3NNSbXXFyDcE7OOSrnbJzDcEznGMc+n30g+wT+R06/TgFpW/Q0PJoAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_this_portal_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8MRNzyv32JOH3PFloniI0TxWapwnN04XmGULzTKF5ltA8W2ieIzTPFZrnCc3zheabhOabheay0FwRmvuF5qrQXBOa60LzgNDcEJqbQnNLaL5FaL5VaL5NaL5daL5DaL5TaF4gNN8lNC8Umu8Wmu8Rmu8Vmu8Tmu8Xmh8Qmh8Umh8Smh8Wmh8Rmh8Vmh8Tmh8XmhcJzU8IzU8KzU8JzU8Lzc8Izc8KzYuF5ueE5ueF5heE5heF5peE5peF5leE5leF5iVC81KhuS00vyY0LxOaO0LzoND8utD8htD8ptD8ltD8ttD8jtD8rtD8ntD8vtC8XGj+QGj+UGj+SGj+WGj+RGj+VGheITR/JjR/LjR/ITR/KTR/JTR/LTR/IzR/KzSvFJq/E5pXCc3fC80/CM0/Cs0/Cc0/C82/CM2/Cs2/Cc2/C81/CM1/Cs1/Cc1/C83/CM3/Cs3/Cc3/C82rheY1QvNaoXmd0LxeaN4gNG8UmjcJzZuF5i1C81aheZvQvF1o3iE07xSad2ViviSheXcm5ksTmvdkYr4soXlvJubLE5r3ZWK+IqF5fybmKxOaD2Riviqh+WAm5qsTmg9lYr4moflwJuZrE5qPZGK+LqH5aCbm6xOaj2ViviGh+Xgm5hsTmk9kYu5LaD6Z0NzX3U5v1zw8MiJSiBQjpQjXhFwjcc3AOTTnlJxjcc7BMZhjEvto9ln8D/Ob5jvuO+vvuan7PioyOjImMjYyLjI+MiEyMTIpMjkyJTI1Mi0yPTIjMjMyKzI7MicyNzIvMj/CjHtmvvMlMhOcGdnMjGaGMjOFmbHbiDCDlZmkzOhkZiUzHJlpyIy/0zPvmIm2MMLMLGZIMVOJGUPM3GEGDTNZmFHCzA5mWDDTgRkH9PxfFKEnPD3S6RlOD216StNjeXGEHrz0pKVHKz1L6eFJT0t6PNLzcEmEnnjtCD3T6CFGTy16TNFziR5E9OShRw09W+hhQk8PelzQ82F5hJ4ArJFnzThrqFlTzBrbFRHWYLImkTV6rFljDRdrmljjw5qXlRHWRKyKUDNPDTk11dQYU3NLDSo1mdQoUrNHDRs1XdQ4UfNDDQw1IdRIUDPAM3SeKfOMlWeOPIPjmRTPaPhNcA+fe9rc4+We5/YI98S4R8Q9E+4hcE3NNSbXXFyDcE7OOSrnbJzDcEznGMc+n30g+wT+R06/TgH08GCKPJoAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_time_equal",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "time",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test_code_gen",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "aField",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "aBool",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        },
        {
          "name": "aNumber",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        },
        {
          "name": "anArray",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        },
        {
          "name": "aStruct",
          "type": {
            "kind": "struct",
            "path": "Test::DummyNote",
            "fields": [
              {
                "name": "amount",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "secretHash",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "aDeepStruct",
          "type": {
            "kind": "struct",
            "path": "Test::DeepStruct",
            "fields": [
              {
                "name": "aField",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "aBool",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "aNote",
                "type": {
                  "kind": "struct",
                  "path": "Test::DummyNote",
                  "fields": [
                    {
                      "name": "amount",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "secretHash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manyNotes",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "struct",
                    "path": "Test::DummyNote",
                    "fields": [
                      {
                        "name": "amount",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "secretHash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+Xd5ZNTVxjH8exCknqpsmgW3QUWyI1sbtCFGnXq3kJKttSpe0upUaeCu7u7+7/F8HxnDgPMwKs9GfbMLzO/Oe/u5HNv5Mo5z3M2kUisSVx81bmxzY3Zjr2ipG0jeYXt5rOthUK1lKtG+WhqNleuxMVsoVhpjaM4KsbFabk4n6/GhbhUrpRL2XJUyFej9mI53+42nPT3HrO1cKdsG6kauFOd3J22baRr4E53cneDbaOhBu4Gj27eW72lh6XRbdP3fsjYNjI12A8Zz8c/cRV/R99ns+fjlb7kWHW3nHOfs3PuODL2dGMvN/Z2Yx839nVjxo2Nbuznxv5uHODGgW4c5MbBbmxyY/M1GlssQ9wxY790c/tlSCd4X0MTl7/q3djmxmzHXlFdwt9ndFiiNt8l3+Z6j+aWQMxdPJqHB2Lu6tE8IhBz0qN5ZCDmlEdzNhBz2qM5CsQ81KM5J2jOB2Ju9mguCJqLguZWQXNJ0BwLmsuC5lGC5tGC5jGC5rGC5nGC5vGC5jZB8wRB80RB8z2C5nsFzfcJmu8XND8gaJ4kaH5Q0PyQoPlhQfMjguZHBc2PCZofFzRPFjQ/IWh+UtD8lKD5aUHzM4LmZwXNzwmanxc0vyBoflHQ/JKg+WVB8yuC5lcFza8JmqcImqcKmiuC5tcFzdMEzVVBc7ug+Q1B83RB85uC5rcEzW8Lmt8RNL8raH5P0Py+oHmGoPkDQfOHguaPBM0fC5o/ETR/Kmj+TND8uaD5C0Hzl4LmrwTNXwuavxE0fyto/k7QPFPQ/L2geZag+QdB84+C5p8EzT8Lmn8RNM8WNP8qaP5N0Py7oPkPQfOfgua/BM1/C5rnCJr/ETT/K2j+T9D8v6B5rqB5nqB5vqB5gaB5oaB5kaB5saB5iaB5qaB5maB5uaB5haB5paB5laB5taB5jaB5raB5naB5vaB5g6B5o6B5k6B5s6B5i6B5q6B5m6B5u6B5h6B5p6B5l6B5t6B5j6B5r6B5XyDm6zya9wdivt6j+UAg5hs8mg8GYr7Ro/lQIOabPJoPB2K+2aP5SCDmWzyajwZivtWj+Vgg5m4ezccDMd/m0XwiEPPtHs0nAzHf4dF8KhDznR7NpwMx3+XRfCYQ890ezWc9mpvcduqcuYulqyVpSVnSFq4JuUbimoFzaM4pOcfinIP/YP6T+I3mN4vvMJ9pjjHm7pYGSw9LT0svS29LH0tfS8bSaOln6W8ZYBloGWQZbGm65JgsduMwS4tluGWEZST7wRJZcuxfS8FStLRaSpbYUraMsoy2jLGMtYyzjHf7c4JlooU+6vQVp882fafpwzzJQp9e+tbSx5W+pvT5pO8lfSAnW+gTSN88+sjRV40+Y/Tdog8VfZnoU0TfHvrY0NeFPif0/aAPxhQLfRIqFuroU1eeOuvUHacO93QLdZqpW0wdX+raUueVuqfUAZ1hoU4kdROpI0hdPerMUXeNOmTU5aJOFXWbqGNEXR/q3FD3hTooMy3UyZhloY4CdQVYZ8+6c9Zhz7awTpd1q6zjZF0j6/xY98Y6sDkW1gmxboZ1JKyrYJ0B8+6Zh868bOYpL3LHkXmdzHNk3h/z4FZYmCe1ysI8GuaVMM+CeQc8h+e5NM9peW7Jczyea/Gch+cePAfgvjj3iblvyn1E7qtxn4n7LtyH4Lqc61Su27iO4bye81zO+zgPOmHhf5L/DX5H+V3he3bhdR6jAswtMJ4AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [
    {
      "name": "ExampleEvent",
      "path": "Test::ExampleEvent",
      "fields": [
        {
          "name": "value",
          "type": {
            "kind": "field"
          }
        }
      ]
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpIHJiZ5YGKSByYmeWBikgcmJnlgYpJHJiZ5ZGKSRyYmeWRikscHUQUVmZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSRiUkemZjkkYlJHpmY5JGJSR6ZmOSJiUmemJjkiYlJnpiY5OlBVEElJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnliYpInJiZ5YmKSJyYmeWJikicmJnlmYpJnJiZ5ZmKSZyYm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",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "// A contract used for testing a random hodgepodge of small features from simulator and end-to-end tests.\ncontract Test {\n    // docs:start:unencrypted_import\n    use dep::aztec::log::emit_unencrypted_log;\n    // docs:end:unencrypted_import\n\n    use dep::aztec::{\n        abi,\n        abi::PrivateContextInputs,\n        hash::pedersen_hash,\n        context::PrivateContext,\n        oracle::{\n            get_public_key::get_public_key as get_public_key_oracle,\n            context::get_portal_address,\n            rand::rand\n        },\n        log::emit_unencrypted_log_from_private,\n        types::vec::BoundedVec,\n        constants_gen::EMPTY_NULLIFIED_COMMITMENT,\n    };\n    use dep::token_portal_content_hash_lib::{get_mint_private_content_hash, get_mint_public_content_hash};\n\n    #[event]\n    struct ExampleEvent {\n        value: Field,\n    }\n\n    #[aztec(private)]\n    // docs:start:empty-constructor\n    fn constructor() {}\n    // docs:end:empty-constructor\n\n    #[aztec(private)]\n    fn get_public_key(\n        address: Field,\n    ) -> [Field; 2]{\n        let pub_key = get_public_key_oracle(address);\n        \n        [pub_key.x, pub_key.y]\n    }\n\n    // Get the portal contract address through an oracle call\n    #[aztec(private)]\n    fn get_portal_contract_address(\n        aztec_address: Field\n    ) -> Field {\n        get_portal_address(aztec_address)\n    }\n\n    // Get the address of the l1 portal for this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_portal_address() -> Field {\n        context.this_portal_address()\n    }\n\n    // Get the address of this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_address() -> Field {\n        context.this_address()\n    }\n\n    // Test codegen for Aztec.nr interfaces\n    // See yarn-project/acir-simulator/src/client/private_execution.test.ts 'nested calls through autogenerated interface'\n    // Note; this function is deliberately NOT annotated with #[aztec(private)] due to its use in tests\n    fn test_code_gen(\n        inputs: PrivateContextInputs,\n        aField: Field,\n        aBool: bool,\n        aNumber: u32,\n        anArray: [Field; 2],\n        aStruct: DummyNote,\n        aDeepStruct: DeepStruct,\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let mut args: BoundedVec<Field, 17> = BoundedVec::new(0);\n        args.push(aField);\n        args.push(aBool as Field);\n        args.push(aNumber as Field);\n        args.push_array(anArray);\n        args.push(aStruct.amount);\n        args.push(aStruct.secretHash);\n        args.push(aDeepStruct.aField);\n        args.push(aDeepStruct.aBool as Field);\n        args.push(aDeepStruct.aNote.amount);\n        args.push(aDeepStruct.aNote.secretHash);\n        for note in aDeepStruct.manyNotes {\n            args.push(note.amount);\n            args.push(note.secretHash);            \n        }\n        let args_hash = abi::hash_args(args.storage);\n        let mut context = PrivateContext::new(inputs, args_hash);\n        context.return_values.push(args_hash);\n        context.finish()\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_l2_to_l1_message_public(\n        amount: Field,\n        secretHash: Field,\n    ) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secretHash);\n        \n        // Public oracle call to emit new commitment.\n        context.message_portal(note.get_commitment());\n        \n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_nullifier_public(\n        amount: Field,\n        secretHash: Field,\n    ) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secretHash);\n        \n        // Public oracle call to emit new commitment.\n        context.push_new_nullifier(note.get_commitment(), EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    // Forcefully emits a nullifier (for testing purposes)\n    #[aztec(private)]\n    fn emit_nullifier(nullifier: Field) {\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    #[aztec(private)]\n    fn emit_msg_sender() {\n        // Note: don't use emit_unencrypted_log_from_private in production code\n        emit_unencrypted_log_from_private(&mut context, context.msg_sender());\n    }\n\n    // docs:start:is-time-equal\n    #[aztec(public)]\n    fn is_time_equal(\n        time: Field,\n    ) -> Field {\n        assert(context.timestamp() == time);\n        time\n    }\n    // docs:end:is-time-equal\n\n    #[aztec(public)]\n    fn emit_unencrypted(\n        value: Field\n    ) -> Field {\n        // docs:start:emit_unencrypted\n        emit_unencrypted_log(&mut context, value);\n        // docs:end:emit_unencrypted\n        0\n    }\n\n    #[aztec(public)]\n    fn consume_mint_public_message(\n        to: Field,\n        amount: Field,\n        canceller: Field,\n        msg_key: Field,\n        secret: Field,\n    ) {\n        let content_hash = get_mint_public_content_hash(to, amount, canceller);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n    }\n\n     #[aztec(private)]\n    fn consume_mint_private_message(\n        secret_hash_for_redeeming_minted_notes: Field, \n        amount: Field,\n        canceller: Field,\n        msg_key: Field,\n        secret_for_L1_to_L2_message_consumption: Field, \n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount, canceller);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n    }\n\n    // Purely exists for testing\n    unconstrained fn get_random(\n        kindaSeed: Field\n    ) -> Field {\n        kindaSeed * rand()\n    }\n\n    struct DummyNote {\n        amount: Field,\n        secretHash: Field\n    }\n\n    impl DummyNote {\n        fn new(amount: Field, secretHash: Field) -> pub Self {\n            Self {\n                amount: amount,\n                secretHash: secretHash\n            }\n        }\n\n        fn get_commitment(self) -> pub Field {\n            pedersen_hash([self.amount, self.secretHash],0)\n        }\n    }\n\n    struct DeepStruct {\n        aField: Field,\n        aBool: bool,\n        aNote: DummyNote,\n        manyNotes: [DummyNote; 3],\n    }\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/test_contract/src/main.nr"
      },
      "3": {
        "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_portal_content_hash_lib/src/lib.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "41": {
        "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(l1_to_l2_root: Field, storage_contract_address: Field, msg_key: Field, content: Field, secret: Field) -> Field{\n\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging.nr"
      },
      "42": {
        "source": "use crate::constants_gen::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr"
      },
      "43": {
        "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse crate::constants_gen::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start), secret, fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields, [0; L1_TO_L2_MSG_TREE_HEIGHT], L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1],\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message_getter_data.nr"
      },
      "56": {
        "source": "#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: Field) -> Field {}\n\nunconstrained pub fn get_portal_address(contract_address: Field) -> Field {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/context.nr"
      },
      "58": {
        "source": "\nuse crate::constants_gen::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_l1_to_l2_message.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "61": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/rand.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      }
    }
  }
}
