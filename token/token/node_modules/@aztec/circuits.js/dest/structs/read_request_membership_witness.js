import { toBufferBE } from '@aztec/foundation/bigint-buffer';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_CALL, NOTE_HASH_TREE_HEIGHT } from '../cbind/constants.gen.js';
import { makeTuple, range } from '../utils/jsUtils.js';
import { serializeToBuffer } from '../utils/serialize.js';
/**
 * A ReadRequestMembershipWitness is similar to a MembershipWitness but includes
 * some additional fields used to direct the kernel regarding whether a read is transient
 * and if so which commitment it corresponds to.
 */
export class ReadRequestMembershipWitness {
    constructor(
    /**
     * Index of a leaf in the Merkle tree.
     */
    leafIndex, 
    /**
     * Sibling path of the leaf in the Merkle tree.
     */
    siblingPath, 
    /**
     * Whether or not the read request corresponds to a pending commitment.
     */
    isTransient = false, 
    /**
     * When transient, the commitment being read was created by some app circuit in the current TX.
     * The kernel will need some hint to efficiently find that commitment for a given read request.
     * When not transient, this can be 0.
     */
    hintToCommitment) {
        this.leafIndex = leafIndex;
        this.siblingPath = siblingPath;
        this.isTransient = isTransient;
        this.hintToCommitment = hintToCommitment;
        if (hintToCommitment.value > MAX_NEW_COMMITMENTS_PER_CALL) {
            throw new Error(`Expected ReadRequestMembershipWitness' hintToCommitment(${hintToCommitment}) to be <= NEW_COMMITMENTS_LENGTH(${MAX_NEW_COMMITMENTS_PER_CALL})`);
        }
    }
    toBuffer() {
        return serializeToBuffer(toBufferBE(this.leafIndex.toBigInt(), 32), ...this.siblingPath, this.isTransient, this.hintToCommitment);
    }
    static mock(size, start) {
        return new ReadRequestMembershipWitness(new Fr(start), range(size, start).map(x => new Fr(BigInt(x))), false, new Fr(0));
    }
    /**
     * Creates a random membership witness. Used for testing purposes.
     * @returns Random membership witness.
     */
    static random() {
        return new ReadRequestMembershipWitness(new Fr(0n), makeTuple(NOTE_HASH_TREE_HEIGHT, () => Fr.random()), false, new Fr(0));
    }
    /**
     * Creates a read request membership witness whose sibling path is full of zero fields.
     * @param leafIndex - Index of the leaf in the Merkle tree.
     * @returns Membership witness with zero sibling path.
     */
    static empty(leafIndex) {
        const arr = makeTuple(NOTE_HASH_TREE_HEIGHT, () => Fr.ZERO);
        return new ReadRequestMembershipWitness(new Fr(leafIndex), arr, false, new Fr(0));
    }
    /**
     * Creates a transient read request membership witness.
     * @returns an empty transient read request membership witness.
     */
    static emptyTransient() {
        const arr = makeTuple(NOTE_HASH_TREE_HEIGHT, () => Fr.ZERO);
        return new ReadRequestMembershipWitness(new Fr(0), arr, true, new Fr(0));
    }
    static fromBufferArray(leafIndex, siblingPath, isTransient, hintToCommitment) {
        return new ReadRequestMembershipWitness(leafIndex, siblingPath.map(x => Fr.fromBuffer(x)), isTransient, hintToCommitment);
    }
    static fromMembershipWitness(membershipWitness, isTransient, hintToCommitment) {
        return new ReadRequestMembershipWitness(new Fr(membershipWitness.leafIndex), membershipWitness.siblingPath, isTransient, hintToCommitment);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized `ReadRequestMembershipWitness`.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const leafIndex = reader.readFr();
        const siblingPath = reader.readArray(NOTE_HASH_TREE_HEIGHT, Fr);
        const isTransient = reader.readBoolean();
        const hintToCommitment = reader.readFr();
        return new ReadRequestMembershipWitness(leafIndex, siblingPath, isTransient, hintToCommitment);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZF9yZXF1ZXN0X21lbWJlcnNoaXBfd2l0bmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3JlYWRfcmVxdWVzdF9tZW1iZXJzaGlwX3dpdG5lc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFTLE1BQU0sNkJBQTZCLENBQUM7QUFFbEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QztJQUNFOztPQUVHO0lBQ0ksU0FBYTtJQUNwQjs7T0FFRztJQUNJLFdBQW9EO0lBQzNEOztPQUVHO0lBQ0ksY0FBYyxLQUFLO0lBQzFCOzs7O09BSUc7SUFDSSxnQkFBb0I7UUFkcEIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUliLGdCQUFXLEdBQVgsV0FBVyxDQUF5QztRQUlwRCxnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQU1uQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUk7UUFFM0IsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsNEJBQTRCLEVBQUU7WUFDekQsTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQsZ0JBQWdCLHFDQUFxQyw0QkFBNEIsR0FBRyxDQUNoSixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxF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