import { BufferReader, serializeToBuffer } from '@aztec/circuits.js/utils';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { toBigIntBE, toBufferBE } from '@aztec/foundation/bigint-buffer';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
/**
 * L1AndL2Message and Index (in the merkle tree) as one type
 */
export class L1ToL2MessageAndIndex {
    constructor(
    /** the index in the L1 to L2 Message tree. */
    index, 
    /** The message. */
    message) {
        this.index = index;
        this.message = message;
    }
    toBuffer() {
        return Buffer.concat([toBufferBE(this.index, 32), this.message.toBuffer()]);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(data) {
        const buffer = Buffer.from(data, 'hex');
        return L1ToL2MessageAndIndex.fromBuffer(buffer);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const index = toBigIntBE(reader.readBytes(32));
        const message = L1ToL2Message.fromBuffer(reader);
        return new L1ToL2MessageAndIndex(index, message);
    }
}
/**
 * The format of an L1 to L2 Message.
 */
export class L1ToL2Message {
    constructor(
    /**
     * The sender of the message on L1.
     */
    sender, 
    /**
     * The recipient of the message on L2.
     */
    recipient, 
    /**
     * The message content.
     */
    content, 
    /**
     * The hash of the spending secret.
     */
    secretHash, 
    /**
     * The deadline for the message.
     */
    deadline, 
    /**
     * The fee for the message.
     */
    fee, 
    /**
     * The entry key for the message - optional.
     */
    entryKey) {
        this.sender = sender;
        this.recipient = recipient;
        this.content = content;
        this.secretHash = secretHash;
        this.deadline = deadline;
        this.fee = fee;
        this.entryKey = entryKey;
    }
    /**
     * Returns each element within its own field so that it can be consumed by an acvm oracle call.
     * @returns The message as an array of fields (in order).
     */
    toFieldArray() {
        return [
            ...this.sender.toFieldArray(),
            ...this.recipient.toFieldArray(),
            this.content,
            this.secretHash,
            new Fr(BigInt(this.deadline)),
            new Fr(BigInt(this.fee)),
        ];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.recipient, this.content, this.secretHash, this.deadline, this.fee);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const sender = reader.readObject(L1Actor);
        const recipient = reader.readObject(L2Actor);
        const content = reader.readFr();
        const secretHash = reader.readFr();
        const deadline = reader.readNumber();
        const fee = reader.readNumber();
        return new L1ToL2Message(sender, recipient, content, secretHash, deadline, fee);
    }
    static empty() {
        return new L1ToL2Message(L1Actor.empty(), L2Actor.empty(), Fr.ZERO, Fr.ZERO, 0, 0);
    }
    static random() {
        return new L1ToL2Message(L1Actor.random(), L2Actor.random(), Fr.random(), Fr.random(), Math.floor(Math.random() * 1000), Math.floor(Math.random() * 1000));
    }
}
/**
 * The sender of an L1 to L2 message.
 */
export class L1Actor {
    constructor(
    /**
     * The sender of the message.
     */
    sender, 
    /**
     * The chain id on which the message was sent.
     */
    chainId) {
        this.sender = sender;
        this.chainId = chainId;
    }
    static empty() {
        return new L1Actor(EthAddress.ZERO, 0);
    }
    toFieldArray() {
        return [this.sender.toField(), new Fr(BigInt(this.chainId))];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.chainId);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const ethAddr = new EthAddress(reader.readBytes(32));
        const chainId = reader.readNumber();
        return new L1Actor(ethAddr, chainId);
    }
    static random() {
        return new L1Actor(EthAddress.random(), Math.floor(Math.random() * 1000));
    }
}
/**
 * The recipient of an L2 message.
 */
export class L2Actor {
    constructor(
    /**
     * The recipient of the message.
     */
    recipient, 
    /**
     * The version of the protocol.
     */
    version) {
        this.recipient = recipient;
        this.version = version;
    }
    static empty() {
        return new L2Actor(AztecAddress.ZERO, 0);
    }
    toFieldArray() {
        return [this.recipient.toField(), new Fr(BigInt(this.version))];
    }
    toBuffer() {
        return serializeToBuffer(this.recipient, this.version);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const aztecAddr = AztecAddress.fromBuffer(reader);
        const version = reader.readNumber();
        return new L2Actor(aztecAddr, version);
    }
    static random() {
        return new L2Actor(AztecAddress.random(), Math.floor(Math.random() * 1000));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDFfdG9fbDJfbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sMV90b19sMl9tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBNEI5Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEM7SUFDRSw4Q0FBOEM7SUFDOUIsS0FBYTtJQUM3QixtQkFBbUI7SUFDSCxPQUFzQjtRQUZ0QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBRWIsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUNyQyxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQVk7UUFDNUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEMsT0FBTyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELE1BQU0s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