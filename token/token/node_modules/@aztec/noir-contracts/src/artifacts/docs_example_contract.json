{
  "name": "DocsExample",
  "functions": [
    {
      "name": "add_common_cards",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secrets",
          "type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "become_queen",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "min_points",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "max_points",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "legendary_card_secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_points_of_common_cards",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "account",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "offset",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_total_points",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "account",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "lock",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "replace_queen",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "account",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "points",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "replace_queen_unsafe",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "send_to_l1",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "simple_macro_example",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "a",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "b",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZXMTXRjG8ZSS5PGHR9uixa1ANtImaHF3dwikuLu7u7sVd4dvx3D/Z5YBZuBVT2c4c+3MNftuJ79NsnrOfb+PRCK1kc9LUbiuDteJui1B1LYR/cZ2U4nKdLpQlSwEqWBuIpnLZzOJdCZfmQ2yQSabmZ/MplKFbDpblcvnqhK5IJ0qBDWZXKom3HDU3WdM1Ic7ZtuI1YM79oO747aNeD24447d3/u91/Vzljn8nEXhviwPt1di+WApDddlYusKS+PwO2O/NAr3S+Mf4HM1iXy9FIfr6nCdqNsSlDjcVmnE3e+9aaR+/pcNHO+/IofmZp6YGzg0N/fEXOzQ3MITc0OH5nJPzFGH5paemGMOza08Mccdmlt7Ym7i0NzGE3NTh+a2npjLHJrbCZrbC5o7CJo7Cpo7CZo7C5orBM1dBM1dBc3dBM0JQXMgaE4KmlOC5rSgOSNorhQ0Vwmas4LmnKC5u6C5h6C5p6C5l6C5t6C5j6C5WtDcV9DcT9DcX9A8QNA8UNA8SNA8WNA8RNA8VNA8TNA8XNA8QtA8UtA8StA8WtA8RtA8VtA8TtA8XtA8QdA8UdA8SdA8WdA8RdA8VdA8TdA8XdA8Q9A8U9A8S9A8W9A8R9A8V9CcFzTPEzTPFzQXBM01guYFguaFguZFgubFguYlgualguZlgublguYVguaVguZVgubVguY1gua1guZ1gub1guYNguaNguZNgubNguYtguatguZtgubtguYdguadguZdgubdguY9gua9guZ9gub9guYDguaDguZDgubDguYjguajguZjgubjguYTguaTguZTgubTguYzguazguZzgubzguYLguaLguZLgubLguYrguarguZrgubrguYbguabguZbguZaQfNtQfMdQfNdQfM9QfN9QfMDT8w/OTQ/9MT8s0PzI0/Mvzg0P/bE/KtD8xNPzL85ND/1xPy7Q/MzT8x/ODQ/98T8p0PzC0/MjRyaX3pi/suh+ZUn5r8dml97Yv7HofmNJ+Z/HZrfemL+z6H5nSfm/x2a3zs0l4bbKQrNxZaGlqglZolbuCfkHol7Bq6huabkGotrDs7BnJM4RnPM4j/Mb5rvGHOJpfSL/XolXDezNLe0sJRbWlpaWVpb2ljaWtpZ2ls6WDpaOlk6WyosXSxdLd3YB5bAkmTfWuj9Ti90eoPTK5ve0TkLvYXptUvvWXqx0pv0U69Oejn2s9Drj9539IKjNxq9wuidRS8peivRa4jeO/SioTcLvUrGWOhlQW8Heh1Q+59a+NSGp1Y6tcOnWqgtTa1lag9Ti5fatNRqnWOhlmfeQq1Hah9SC5DaeNSKo3YatcSorUWtKWovUYuI2jzUqllpoZYJtT2odUHtB2ohUBuAufLMHd9kYW4xc22Ze8pcTOYmMldvp4W5XLstzPVh7gtzQZgbwVwBxs4zlpyx1Yw1ZuwtY1EZm8lYxZMWxrIxtouxToz9YSwMY0MYK8HYAd6l826Z7593j7yL490U72puWniWX2vhWS/PPnkWyLMxnhXx7IRnCdxbc6/JvRf3Ilybc63KtRvXMpzbOddx7OdYyLGB/8qn5SNuYNBhNJ0AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "simple_macro_example_expanded",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "a",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "b",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZXMTXRjG8ZSS5PGHR9uixa1ANtImaHF3dwikuLu7u7sVd4dvx3D/Z5YBZuBVT2c4c+3MNftuJ79NsnrOfb+PRCK1kc9LUbiuDteJui1B1LYR/cZ2U4nKdLpQlSwEqWBuIpnLZzOJdCZfmQ2yQSabmZ/MplKFbDpblcvnqhK5IJ0qBDWZXKom3HDU3WdM1Ic7ZtuI1YM79oO747aNeD24447d3/u91/Vzljn8nEXhviwPt1di+WApDddlYusKS+PwO2O/NAr3S+Mf4HM1iXy9FIfr6nCdqNsSlDjcVmnE3e+9aaR+/pcNHO+/IofmZp6YGzg0N/fEXOzQ3MITc0OH5nJPzFGH5paemGMOza08Mccdmlt7Ym7i0NzGE3NTh+a2npjLHJrbCZrbC5o7CJo7Cpo7CZo7C5orBM1dBM1dBc3dBM0JQXMgaE4KmlOC5rSgOSNorhQ0Vwmas4LmnKC5u6C5h6C5p6C5l6C5t6C5j6C5WtDcV9DcT9DcX9A8QNA8UNA8SNA8WNA8RNA8VNA8TNA8XNA8QtA8UtA8StA8WtA8RtA8VtA8TtA8XtA8QdA8UdA8SdA8WdA8RdA8VdA8TdA8XdA8Q9A8U9A8S9A8W9A8R9A8V9CcFzTPEzTPFzQXBM01guYFguaFguZFgubFguYlgualguZlgublguYVguaVguZVgubVguY1gua1guZ1gub1guYNguaNguZNgubNguYtguatguZtgubtguYdguadguZdgubdguY9gua9guZ9gub9guYDguaDguZDgubDguYjguajguZjgubjguYTguaTguZTgubTguYzguazguZzgubzguYLguaLguZLgubLguYrguarguZrgubrguYbguabguZbguZaQfNtQfMdQfNdQfM9QfN9QfMDT8w/OTQ/9MT8s0PzI0/Mvzg0P/bE/KtD8xNPzL85ND/1xPy7Q/MzT8x/ODQ/98T8p0PzC0/MjRyaX3pi/suh+ZUn5r8dml97Yv7HofmNJ+Z/HZrfemL+z6H5nSfm/x2a3zs0l4bbKQrNxZaGlqglZolbuCfkHol7Bq6huabkGotrDs7BnJM4RnPM4j/Mb5rvGHOJpfSL/XolXDezNLe0sJRbWlpaWVpb2ljaWtpZ2ls6WDpaOlk6WyosXSxdLd3YB5bAkmTfWuj9Ti90eoPTK5ve0TkLvYXptUvvWXqx0pv0U69Oejn2s9Drj9539IKjNxq9wuidRS8peivRa4jeO/SioTcLvUrGWOhlQW8Heh1Q+59a+NSGp1Y6tcOnWqgtTa1lag9Ti5fatNRqnWOhlmfeQq1Hah9SC5DaeNSKo3YatcSorUWtKWovUYuI2jzUqllpoZYJtT2odUHtB2ohUBuAufLMHd9kYW4xc22Ze8pcTOYmMldvp4W5XLstzPVh7gtzQZgbwVwBxs4zlpyx1Yw1ZuwtY1EZm8lYxZMWxrIxtouxToz9YSwMY0MYK8HYAd6l826Z7593j7yL490U72puWniWX2vhWS/PPnkWyLMxnhXx7IRnCdxbc6/JvRf3Ilybc63KtRvXMpzbOddx7OdYyLGB/8qn5SNuYNBhNJ0AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "unlock",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "update_legendary_card",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "new_points",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "private"
        },
        {
          "name": "new_secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "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",
      "",
      "",
      "",
      "",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsDHSUUvNSgHStjlJaZk6qkpVhrQ6GKkNjY1NLqEog28IQrtrYBJtyEyMDE5hyEyMzAsotjU2hii0tjBFKLWpjdZRMhqKjTenoaKAauKONLS3IdXRtLQBsg6Ur",
      "eJyrVsrJT04syczPK1ayqlYyVrKKrlYqLkjMA/GKSxKLSpSsLI3NjHWUUvNSQExzs1odpbTMnFQlK8NaHQy1hsbGppZQxUC2hSFctbEJNuUmRgYmMOUmRmYElFsam8IcYmGMUGpRG6ujZDJ0nW5Kd6cD1cCdbmxpQa7Ta2sBX+ypFQ==",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod account_contract_interface;\nmod actions;\nmod options;\nmod types;\n\ncontract DocsExample {\n    use dep::std::option::Option;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            immutable_singleton::ImmutableSingleton, map::Map, public_state::PublicState, set::Set,\n            singleton::Singleton,\n        },\n    };\n    // docs:start:state_vars-PublicStateBoolImport\n    use dep::aztec::types::type_serialization::bool_serialization::{\n        BoolSerializationMethods, BOOL_SERIALIZED_LEN,\n    };\n    // docs:end:state_vars-PublicStateBoolImport\n    use crate::account_contract_interface::AccountContractInterface;\n    use crate::actions;\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{\n        card_note::{CardNote, CardNoteMethods, CARD_NOTE_LEN},\n        profile_note::{ProfileNote, ProfileNoteMethods, PROFILE_NOTE_LEN},\n        queen::{Queen, QueenSerializationMethods, QUEEN_SERIALIZED_LEN},\n        rules_note::{RulesNote, RulesNoteMethods, RULES_NOTE_LEN},\n    };\n\n    // docs:start:storage-struct-declaration\n    struct Storage {\n        locked: PublicState<bool, BOOL_SERIALIZED_LEN>,\n        queen: PublicState<Queen, QUEEN_SERIALIZED_LEN>,\n        game_rules: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>,\n        // docs:start:storage-singleton-declaration\n        legendary_card: Singleton<CardNote, CARD_NOTE_LEN>,\n        // docs:end:storage-singleton-declaration\n        cards: Set<CardNote, CARD_NOTE_LEN>,\n        profiles: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>,\n    }\n    // docs:end:storage-struct-declaration\n\n    // docs:start:storage-declaration\n    // docs:start:state_vars-PublicState\n    // docs:start:state_vars-PublicStateCustomStruct\n    // docs:start:state_vars-Singleton\n    // docs:start:state_vars-ImmutableSingleton\n    // docs:start:state_vars-Set\n    // docs:start:state_vars-MapSingleton\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // highlight-next-line:state_vars-PublicState\n                locked: PublicState::new(context, 1, BoolSerializationMethods),\n                // highlight-next-line:state_vars-PublicStateCustomStruct\n                queen: PublicState::new(\n                    context,\n                    2,\n                    QueenSerializationMethods,\n                ),\n                // highlight-next-line:state_vars-ImmutableSingleton\n                game_rules: ImmutableSingleton::new(context, 3, RulesNoteMethods),\n                // highlight-next-line:state_vars-Singleton\n                // docs:start:start_vars_singleton\n                legendary_card: Singleton::new(context, 4, CardNoteMethods),\n                // docs:end:start_vars_singleton\n                // highlight-next-line:state_vars-Set\n                cards: Set::new(context, 5, CardNoteMethods),\n                // highlight-next-line:state_vars-MapSingleton\n                profiles: Map::new(\n                    context,\n                    6,\n                    |context, slot| {\n                        Singleton::new(context, slot, ProfileNoteMethods)\n                    },\n                ),\n            }\n        }\n    }\n    // docs:end:state_vars-PublicState\n    // docs:end:state_vars-PublicStateCustomStruct\n    // docs:end:state_vars-Singleton\n    // docs:end:state_vars-ImmutableSingleton\n    // docs:end:state_vars-Set\n    // docs:end:state_vars-MapSingleton\n    // docs:end:storage-declaration\n\n    global REPLACE_QUEEN_FUNCTION_SELECTOR = 11111111;\n    global GET_POINTS_OF_COMMON_CARD_FUNCTION_SELECTOR = 11111111;\n\n    #[aztec(private)]\n    fn constructor(\n        min_points: u8,\n        max_points: u8,\n        legendary_card_secret: Field,\n    ) {\n        let mut game_rules = RulesNote::new(min_points, max_points, Option::some(0));\n        actions::init_game_rules(storage.game_rules, &mut game_rules);\n\n        let mut legendary_card = CardNote::new(0, legendary_card_secret, 0);\n        actions::init_legendary_card(storage.legendary_card, &mut legendary_card);\n    }\n\n    // docs:start:storage-init\n    #[aztec(public)]\n    fn lock() {\n        // highlight-next-line:storage-init\n        \n        storage.locked.write(true);\n    }\n    // docs:end:storage-init\n\n    // docs:start:functions-OpenFunction\n    #[aztec(public)]\n    fn unlock() {\n        \n        actions::unlock(storage.locked);\n    }\n    // docs:end:functions-OpenFunction\n\n    #[aztec(public)]\n    fn replace_queen(\n        account: Field,\n        points: u8,\n    ) {\n        \n\n        let new_queen = Queen { account, points };\n        \n        assert(actions::can_replace_queen(storage.queen, new_queen));\n        \n        actions::replace_queen(storage.queen, new_queen);\n    }\n\n    // docs:start:state_vars-PublicStateWriteBeforeCall\n    #[aztec(public)]\n    fn replace_queen_unsafe() {\n        \n\n        let account = context.msg_sender();\n        let points = actions::get_total_points(storage.cards, account, 0);\n\n        let current_queen = storage.queen.read();\n        assert(account != current_queen.account);\n        assert(points > current_queen.points);\n\n        AccountContractInterface::at(account).send_rewards(current_queen.points);\n        \n        let new_queen = Queen { account, points };\n        storage.queen.write(new_queen);\n    }\n    // docs:end:state_vars-PublicStateWriteBeforeCall\n\n    // docs:start:functions-SecretFunction\n    #[aztec(private)]\n    fn add_common_cards(secrets: [Field; 4]) {\n        \n\n        for i in 0..secrets.len() as u8 {\n            let mut card = CardNote::new(0, secrets[i], 0);\n            actions::add_new_card(storage.cards, &mut card);\n        }\n    }\n    // docs:end:functions-SecretFunction\n\n    #[aztec(private)]\n    fn update_legendary_card(\n        new_points: u8,\n        new_secret: Field,\n    ) {\n        \n\n        let owner = inputs.call_context.msg_sender;\n        let mut updated_card = CardNote::new(new_points, new_secret, owner);\n\n        assert(actions::is_valid_card(storage.game_rules, updated_card));\n\n        actions::update_legendary_card(storage.legendary_card, &mut updated_card);\n    }\n\n    #[aztec(private)]\n    fn become_queen() {\n        \n\n        let legendary_card = actions::get_legendary_card(storage.legendary_card);\n\n        let owner = legendary_card.owner;\n        let result = context.call_private_function(\n            inputs.call_context.storage_contract_address, \n            GET_POINTS_OF_COMMON_CARD_FUNCTION_SELECTOR,\n            [owner, 0]\n        );\n        let total_points = legendary_card.points + result[0] as u8;\n\n        context.call_public_function(\n            inputs.call_context.storage_contract_address, \n            REPLACE_QUEEN_FUNCTION_SELECTOR,\n            [owner, total_points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn get_points_of_common_cards(\n        account: Field,\n        offset: u32,\n    ) {\n        \n\n        let mut total_points = 0;\n        let options = create_account_card_getter_options(account, offset);\n        let cards = actions::get_cards(storage.cards, options);\n        for i in 0..cards.len() {\n            if (cards[i].is_some()) {\n                let card = cards[i].unwrap_unchecked();\n                assert(card.owner == account);\n                total_points += card.points;\n            }\n        }\n\n        context.return_values.push(total_points as Field);\n    }\n\n    // docs:start:functions-UncontrainedFunction\n    unconstrained fn get_total_points(account: Field) -> u8 {\n        \n        actions::get_total_points(storage.cards, account, 0)\n    }\n    // docs:end:functions-UncontrainedFunction\n\n\n    /// Macro equivalence section\n    use dep::aztec::abi;\n    use dep::aztec::abi::Hasher;\n    use dep::aztec::abi::PrivateContextInputs;\n    use dep::aztec::abi::PrivateCircuitPublicInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field\n        \n        // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n\n\n    // Cross chain messaging section\n    // Demonstrates a cross chain message \n    // docs:start:l1_to_l2_cross_chain_message \n    #[aztec(private)]\n    fn send_to_l1() {\n\n\n    }\n    // docs:end:l1_to_l2_cross_chain_message  \n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/main.nr"
      },
      "15": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "16": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "31": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "34": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "35": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "38": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "39": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "44": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "47": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "50": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n    pub fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    pub fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_viewer_options.nr"
      },
      "51": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "53": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "54": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "58": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "59": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "61": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "63": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "64": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "65": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "66": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "67": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "70": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"
      },
      "72": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "73": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"
      },
      "78": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "84": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "86": {
        "source": "use dep::aztec::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse dep::aztec::note::{\n    note_getter_options::NoteGetterOptions, note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::{\n    immutable_singleton::ImmutableSingleton, map::Map, public_state::PublicState, set::Set,\n    singleton::Singleton,\n};\nuse dep::aztec::types::type_serialization::bool_serialization::BOOL_SERIALIZED_LEN;\nuse dep::std::option::Option;\n\nuse crate::types::{\n    card_note::{CardNote, CARD_NOTE_LEN},\n    profile_note::{ProfileNote, PROFILE_NOTE_LEN},\n    queen::{Queen, QUEEN_SERIALIZED_LEN},\n    rules_note::{RulesNote, RULES_NOTE_LEN},\n};\n\n// docs:start:state_vars-PublicStateRead\npub fn is_locked(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) -> bool {\n    state_var.read()\n}\n// docs:end:state_vars-PublicStateRead\n\n// docs:start:state_vars-PublicStateWrite\npub fn lock(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) {\n    state_var.write(true);\n}\n// docs:end:state_vars-PublicStateWrite\n\npub fn unlock(state_var: PublicState<bool, BOOL_SERIALIZED_LEN>) {\n    state_var.write(false);\n}\n\n// docs:start:state_vars-PublicStateReadCustom\npub fn get_current_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>) -> Queen {\n    state_var.read()\n}\n// docs:end:state_vars-PublicStateReadCustom\n\npub fn can_replace_queen(\n    state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>,\n    new_queen: Queen,\n) -> bool {\n    let current_queen = get_current_queen(state_var);\n    new_queen.points > current_queen.points\n}\n\n// docs:start:state_vars-PublicStateWriteCustom\npub fn replace_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>, new_queen: Queen) {\n    state_var.write(new_queen);\n}\n// docs:end:state_vars-PublicStateWriteCustom\n\n// docs:start:state_vars-PublicStateReadWriteCustom\npub fn add_points_to_queen(state_var: PublicState<Queen, QUEEN_SERIALIZED_LEN>, new_points: u8) {\n    let mut queen = state_var.read();\n    queen.points += new_points;\n    state_var.write(queen);\n}\n// docs:end:state_vars-PublicStateReadWriteCustom\n\n// docs:start:state_vars-SingletonInit\npub fn init_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.initialize(card, Option::some(card.owner), true);\n}\n// docs:end:state_vars-SingletonInit\n\n// docs:start:state_vars-SingletonReplace\npub fn update_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.replace(card, true);\n}\n// docs:end:state_vars-SingletonReplace\n\n// docs:start:state_vars-SingletonGet\npub fn get_legendary_card(state_var: Singleton<CardNote, CARD_NOTE_LEN>) -> CardNote {\n    state_var.get_note(true)\n}\n// docs:end:state_vars-SingletonGet\n\n// docs:start:state_vars-ImmutableSingletonInit\npub fn init_game_rules(\n    state_var: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>,\n    rules: &mut RulesNote,\n) {\n    state_var.initialize(rules, Option::none(), true);\n}\n// docs:end:state_vars-ImmutableSingletonInit\n\n// docs:start:state_vars-ImmutableSingletonGet\npub fn is_valid_card(state_var: ImmutableSingleton<RulesNote, RULES_NOTE_LEN>, card: CardNote) -> bool {\n    let rules = state_var.get_note();\n    card.points >= rules.min_points & card.points <= rules.max_points\n}\n// docs:end:state_vars-ImmutableSingletonGet\n\n// docs:start:state_vars-SetInsert\npub fn add_new_card(state_var: Set<CardNote, CARD_NOTE_LEN>, card: &mut CardNote) {\n    state_var.insert(card, true);\n}\n// docs:end:state_vars-SetInsert\n\n// docs:start:state_vars-SetRemove\npub fn remove_card(state_var: Set<CardNote, CARD_NOTE_LEN>, card: CardNote) {\n    state_var.remove(card);\n}\n// docs:end:state_vars-SetRemove\n\n// docs:start:state_vars-SetGet\npub fn get_cards<FILTER_PARAMS>(\n    state_var: Set<CardNote, CARD_NOTE_LEN>,\n    options: NoteGetterOptions<CardNote, CARD_NOTE_LEN, FILTER_PARAMS>,\n) -> [Option<CardNote>; MAX_READ_REQUESTS_PER_CALL] {\n    state_var.get_notes(options)\n}\n// docs:end:state_vars-SetGet\n\n// docs:start:state_vars-SetView\nunconstrained pub fn view_cards(\n    state_var: Set<CardNote, CARD_NOTE_LEN>,\n    options: NoteViewerOptions<CardNote, CARD_NOTE_LEN>,\n) -> [Option<CardNote>; MAX_NOTES_PER_PAGE] {\n    state_var.view_notes(options)\n}\n// docs:end:state_vars-SetView\n\nunconstrained pub fn get_total_points(\n    state_var: Set<CardNote, CARD_NOTE_LEN>,\n    account: Field,\n    offset: u32,\n) -> u8 {\n    let options = NoteViewerOptions::new()\n        .select(2, account)\n        .set_offset(offset);\n    let mut total_points = 0;\n    let notes = view_cards(state_var, options);\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            total_points += notes[i].unwrap_unchecked().points;\n        }\n    }\n    if notes[notes.len() - 1].is_some() {\n        total_points += get_total_points(state_var, account, offset + notes.len() as u32);\n    }\n    total_points\n}\n\n// docs:start:state_vars-MapAtSingletonInit\npub fn add_new_profile(\n    state_var: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>,\n    account: Field,\n    profile: &mut ProfileNote,\n) {\n    state_var.at(account).initialize(profile, Option::some(account), true);\n}\n// docs:end:state_vars-MapAtSingletonInit\n\n// docs:start:state_vars-MapAtSingletonGet\npub fn get_profile(\n    state_var: Map<Singleton<ProfileNote, PROFILE_NOTE_LEN>>,\n    account: Field,\n) -> ProfileNote {\n    state_var.at(account).get_note(true)\n}\n// docs:end:state_vars-MapAtSingletonGet\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/actions.nr"
      },
      "89": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\nstruct CardNote {\n    points: u8,\n    secret: Field,\n    owner: Field,\n    header: NoteHeader,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, secret: Field, owner: Field) -> Self {\n        CardNote {\n            points,\n            secret,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; CARD_NOTE_LEN] {\n        [self.points as Field, self.secret, self.owner]\n    }\n\n    pub fn deserialize(preimage: [Field; CARD_NOTE_LEN]) -> Self {\n        CardNote {\n            points: preimage[0] as u8,\n            secret: preimage[1],\n            owner: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash([\n            self.points as Field, \n            self.secret,\n            self.owner,\n        ],0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(CardNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; CARD_NOTE_LEN]) -> CardNote {\n    CardNote::deserialize(preimage)\n}\n\nfn serialize(note: CardNote) -> [Field; CARD_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: CardNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: CardNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: CardNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut CardNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: CardNote) {\n    note.broadcast(context, slot);\n}\n\nglobal CardNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/card_note.nr"
      },
      "90": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    oracle::get_public_key::get_public_key,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal PROFILE_NOTE_LEN: Field = 2;\n\nstruct ProfileNote {\n    avatar: Field,\n    xp: Field,\n    maybe_owner: Option<Field>,\n    header: NoteHeader,\n}\n\nimpl ProfileNote {\n    pub fn new(avatar: Field, xp: Field, maybe_owner: Option<Field>) -> Self {\n        ProfileNote {\n            avatar,\n            xp,\n            maybe_owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; PROFILE_NOTE_LEN] {\n        [self.avatar, self.xp]\n    }\n\n    pub fn deserialize(preimage: [Field; PROFILE_NOTE_LEN]) -> Self {\n        ProfileNote {\n            avatar: preimage[0],\n            xp: preimage[1],\n            maybe_owner: Option::none(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash([\n            self.avatar, \n            self.xp,\n        ],0)\n    }\n\n    pub fn compute_nullifier(_self: Self) -> Field {\n        assert(false); // Not allowed.\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    pub fn set_owner(&mut self, owner: Field) {\n        self.maybe_owner = Option::some(owner);\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(self.maybe_owner.is_some(), \"Note owner must be set when the broadcast flow is triggered.\");\n        let owner = self.maybe_owner.unwrap_unchecked();\n\n        let encryption_pub_key = get_public_key(owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; PROFILE_NOTE_LEN]) -> ProfileNote {\n    ProfileNote::deserialize(preimage)\n}\n\nfn serialize(note: ProfileNote) -> [Field; PROFILE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ProfileNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ProfileNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ProfileNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ProfileNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ProfileNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ProfileNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/profile_note.nr"
      },
      "91": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:state_vars-CustomStruct\nstruct Queen {\n    account: Field,\n    points: u8,\n}\n// docs:end:state_vars-CustomStruct\n\n// docs:start:state_vars-PublicStateCustomStruct\nglobal QUEEN_SERIALIZED_LEN: Field = 2;\n\nfn deserialize(fields: [Field; QUEEN_SERIALIZED_LEN]) -> Queen {\n    Queen {\n        account: fields[0],\n        points: fields[1] as u8,\n    }\n}\n\nfn serialize(queen: Queen) -> [Field; QUEEN_SERIALIZED_LEN] {\n    [queen.account, queen.points as Field]\n}\n\nglobal QueenSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n// docs:end:state_vars-PublicStateCustomStruct",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/queen.nr"
      },
      "92": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    oracle::get_public_key::get_public_key,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal RULES_NOTE_LEN: Field = 2;\n\nstruct RulesNote {\n    min_points: u8,\n    max_points: u8,\n    maybe_owner: Option<Field>,\n    header: NoteHeader,\n}\n\nimpl RulesNote {\n    pub fn new(min_points: u8, max_points: u8, maybe_owner: Option<Field>) -> Self {\n        RulesNote {\n            min_points,\n            max_points,\n            maybe_owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; RULES_NOTE_LEN] {\n        [self.min_points as Field, self.max_points as Field]\n    }\n\n    pub fn deserialize(preimage: [Field; RULES_NOTE_LEN]) -> Self {\n        RulesNote {\n            min_points: preimage[0] as u8,\n            max_points: preimage[1] as u8,\n            maybe_owner: Option::none(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash([\n            self.min_points as Field, \n            self.max_points as Field, \n        ],0)\n    }\n\n    pub fn compute_nullifier(_self: Self) -> Field {\n        // Not used\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    pub fn set_owner(&mut self, owner: Field) {\n        self.maybe_owner = Option::some(owner);\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(self.maybe_owner.is_some(), \"Note owner must be set when the broadcast flow is triggered.\");\n        let owner = self.maybe_owner.unwrap_unchecked();\n\n        let encryption_pub_key = get_public_key(owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; RULES_NOTE_LEN]) -> RulesNote {\n    RulesNote::deserialize(preimage)\n}\n\nfn serialize(note: RulesNote) -> [Field; RULES_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: RulesNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: RulesNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: RulesNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut RulesNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: RulesNote) {\n    note.broadcast(context, slot);\n}\n\nglobal RulesNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/docs_example_contract/src/types/rules_note.nr"
      }
    }
  }
}
