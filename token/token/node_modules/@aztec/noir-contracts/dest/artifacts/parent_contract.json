{
    "name": "Parent",
    "functions": [
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToChildWithNestedFirst",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToChildWithNestedLast",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallsToPubEntryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToChild",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToChildTwice",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "enqueueCallToPubEntryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+2dB3Qc1RWG72qtlW1wgRRbBoyxTbENZpukXdFkDKIZcGimg7TaNcayXEXvvaSQnkAKIb2TnpBGSO+k94SQ3nsPhvfjOzCSVpzdo/v27Du/5px77kq6evu+1+af3Zn7ZidEZjmLjuhlj/r0xI5MqyujtUq5uXRnPl/uypYzuUxfOlvsL3Sk8x39nYVMIdNR6BjIFnK5ciFf6Cr2F7vSxUw+V85UOoq5ihbcalfHtA/ulCsj5YE71eTcba6MNg/cbcbc4433idZznmE9E9qWC7S8Oc62O5urvl39PBK/v7PdtM/QLrO1XXZrgnrtHqvXgsn+eqJd9qjSX3s0Qb3mO0vKk/M/oT/HD+u1cY7Yr2HWdZwbQB3bxXaNjY49nU3X19OctcjIIxV73WPz/rmUffs8ro1SMY7oiHhmOpvqbIb+vKmvtH7FlrXDG8pD27bGGyQ5qgMTsUKSsTeYUuV3UVz0t7gosG7FjFShtCp7vtipgz3t6pVOytgVK95ZVvwt4kd5WY2B/nQ2V+zMVHy2wXyxX3Hgoxm4wNlezhY6W+RssbO9ne3jbF9n+zlb4myps2Wy4ww2S/83PgFbYr8bPXkbtKKlfa1oU2McMop3prKkbN93AO/VKiOP0YtYT5X2RF3b9XV5aPNwebi8erh/cF2pd3iotG3dxqGVfYOD8YEQvUk0IJJVIEf/fkqsQdr0dWvsd9H/tcW8txU4KWNHl4j9TFwozb0a6ZGNt8UB6pfHOih+KkVHPlqlzRKx1y0a0/IUMYlxyhlvxngbDBEcwB8ZVRmr91iuDWp9Ab9c/AywpDH/QgPmcmXHcUAA7Wct6yyZD4yVlSnkstmuHOIKA+lMfqCULWSzA/35dCndV8qWi/lMsZLP5nOlgVK/K7MvU0lX+krFSmFHveIXpfHDev4cKPaS5vGyZKwciY9/D/JghPyv1n5eFztfnZP2UG5G7Aa9L+6MfR9VravFQpfxUG5WbCcmJmFWfaNU2iLxcxIwHhcjVFpOfV7IVBrAfam0vDao9STJi58BZq3SFhkwRyotF0D7Was0S+YOCU+ldYjtySA6OmVSpZl0TqeHcrukuVUauLvs+8iLSstrXa3LLYjtxMQkLEhjVdpi8XMSMB4XI1RaUX23kKk0gPtSad3aoNaTpFv8DDBrlbbYgDlSacUA2s9apVkyHyThqbSDxPZkEB0Hy6RKM+mcgz2Ue4g0t0oD9yH2feRFpXVrXa3LPVRsJyYm4aHSWJW2RPycBIzHxQiVdlisbCqVBnBfKq1Hy7KeJD3iZ4BZq7QlBsyRSjssgPazVmmWzCskPJW2QmxPBtFxuEyqNJPOOdxDuSuluVUauFfa95EXldajdbUu9wixnZiYhEdIY1XaUvFzEjAeFyNU2pHqe4VMpQHcl0rr1Qa1niS94meAWau0pQbMkUo7MoD2s1ZplsxHSXgq7SixPRlEx9EyqdJMOudoD+UeI82t0sB9jH0feVFpvVpX63KPFduJiUl4rDRWpS0TPycB43ExQqUdp36VkKk0gPtSaau0Qa0nySrxM8CsVdoyA+ZIpR0XQPtZqzRL5uMlPJV2vNieDKLjBJlUaSadc4KHck+U5lZp4D7Rvo+8qLRVWlfrcleL7cTEJFwtY9WZ9YLaYtgGC8TPScS6r/YyqGe1p9+t+8YyA8L+Deqb9MSOJ75sbfZ69gZSz0YJu4mOzxZD5r0JmfeRMNbeZ4nd2ou6IblCJFxRNvJMLVefV9+tHjmGTlKmKF9e1K/bY35f9fvJU+ez2sXZybHyIrE8Xjyu6E+pM/7UOuNPqzN+TZ3xp9cZf0ad8WfWGX9WnfFn1xl/Tp3x59YZf16d8efXGd9XZ3x/nfGlWHzLOPHIyjJQY1y5xrhKjXFra4y7oMa4dTXGXVhj3Poa4wZrjNtQY9xQjXEba4zbVGPc5hrjttQYtzUWt0bjTta/z5fa8hKeov5U9aepX6P+dPVnqD9T/Vnqz1Z/jvpz1Z+n/nz1fer71ZfUD6gvq6+oX6v+AvXr1F+ofr36QfUb1A+p36h+k/rN6reo31pj+0z6xnh8OLxNxq6/kS45Sf029bs6G5aRh/U1aELstN9F0hhdnp7YYfqZyMWBMCcNmS8JhHmKIfOlgTC3GjJfFghzypD58kCY2wyZrwiEeXdD5isDYZ5nyHwVIfPVhMzXEDJfS8h8HSHz9YTMNxAy30jIfBMh882EzLcQMt9KyHwbIfPthMzPJmR+DiHzcwmZn0fIfAch8/MJmV9AyPxCQuYXETK/mJD5JYTMLyVkfhkh88sJme8kZL6LkPkVhMyvJGR+FSHzqwmZ7yZkfg0h8z2EzK8lZH4dIfPrCZnfQMj8RkLmNxEyv5mQ+S2EzG8lZH4bIfPbCZnfQcj8TkLmewmZ30XI/G5C5vcQMr+XkPl9hMzvJ2T+ACHzBwmZP0TIfB8h84cJmT9CyPxRQuaPETJ/nJD5fkLmTxAyP0DI/ElC5k8RMn+akPkzhMyfJWT+HCHz5wmZv0DI/EVC5i8RMn+ZkPkrhMxfJWR+kJD5a4TMXydk/gYh8zcJmb9FyPxtQubvEDJ/l5D5e4TM3ydk/gEh8w8JmX9EyPxjQuafEDI/RMj8U0LmhwmZf0bI/HNC5l8QMv+SkPlXhMy/JmT+DSHzbwmZf0fI/HtC5j8QMv+RkPlPhMx/JmT+CyHzXwmZ/0bI/HdC5n8EwjxsyPxPwn7+FyHzvwmZ/0PI/F9C5v8RMv+fkPkRQubthMyPEjJLgo85EQjzVEPmlkCYpxkyJwNhnm7IPCUQ5p0MmVsDYd7ZkDkVCPMMQ+a2QJhnGjJPDYR5liHztECYZxsyTw+EeRdD5p0CYd7VkHnnQJifZsg8IxDmpxsyzwyE+RmGzLMCYX6mIfNsQ+Z2LSehzElnU5y1Oks5a3OGa0JcI+GaARoamhIaC5oD52Cck7BGY83CHMaYRh+DeY6zuc7aY217l/qLnF3s7BJnlzq7zNnlzq5wdqWzq5xd7ewaZ9c6u87Z9c5ucHajs5uc3ezsFme3OrvN2e3OsN899n/HfujYH/wOZ9g/GvspY39h7LeL/WexHyv2J8V+ndi/8k6tG/b7w/532A8O+6Pd7Qz7Z93jDPsrYb8h7L+D/WiwPwv2K8H+HdjPAvs7YL8D5P9HPnzkh7/XGfKHI5828ksj3zLyDyMfL/LTIl8r8pfe5wz5LZHvEfkPkQ8Q+fHud4b8aQ84Q34t5JtC/iXkI0J+HuSrQf4W5DNBfg/ku0D+B+RDQH6AB53h+XE8T43ni/G8LZ4/xfOYeD4Rz+vh+TU8z4Xnm/C8D55/wfMgeD7iIWe4f/5hZ7i/Gvcb4/5b3I+K+zNxvyLu38P9bLi/C/c74f4f3A+D+0NwvwTuH8D36fh+Gd+34vtHfB+H76fwfQ2+v8Dn+fh8G5/34vNPfB6Iz8cwOPH5CT5PwPU1rjdx/YXrEehz6FXoN+gZnN9xvsP6j/UQ6wPmS3Q8BibiSWX48AAA",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entryPoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubEntryPoint",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "initValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubEntryPointTwice",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "targetContract",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "targetSelector",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "initValue",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "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",
            "",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "// A contract used along with `Child` contract to test nested calls.\ncontract Parent {\n    use dep::aztec::selector::compute_selector;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Private function to call another private function in the targetContract using the provided selector\n    #[aztec(private)]\n    fn entryPoint(\n        targetContract: Field,\n        targetSelector: Field,\n    ) -> Field {\n        // Call the target private function\n        let return_values = context.call_private_function(targetContract, targetSelector, [0]);\n\n        // Copy the return value from the call to this function's return values\n        return_values[0]\n    }\n\n    // Public function to directly call another public function to the targetContract using the selector and value provided\n    #[aztec(public)]\n    fn pubEntryPoint(\n        targetContract: Field,\n        targetSelector: Field,\n        initValue: Field\n    ) -> Field {\n        let return_values = context.call_public_function(targetContract, targetSelector, [initValue]);\n\n        return_values[0]\n    }\n\n    // Same as pubEntryPoint, but calls the target contract twice, using the return value from the first invocation as the argument for the second.\n    #[aztec(public)]\n    fn pubEntryPointTwice(\n        targetContract: Field,\n        targetSelector: Field,\n        initValue: Field\n    ) -> Field {\n        let returnValue = context.call_public_function(targetContract, targetSelector, [initValue])[0];\n        let return_values = context.call_public_function(targetContract, targetSelector, [returnValue]);\n\n        return_values[0]\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChild(\n        targetContract: Field,\n        targetSelector: Field,\n        targetValue: Field,\n    ) {\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one through a nested call to enqueueCallToChild with value 10,\n    // - followed by one issued directly from this function with value 20.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedFirst(\n        targetContract: Field,\n        targetSelector: Field,\n    ) {\n        let enqueueCallToChildSelector = compute_selector(\"enqueueCallToChild(Field,Field,Field)\");\n        let _ret = context.call_private_function(context.this_address(), enqueueCallToChildSelector, [targetContract, targetSelector, 10]);\n        context.call_public_function(targetContract, targetSelector, [20]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one issued directly from this function with value 20,\n    // - followed by one through a nested call to enqueueCallToChild with value 10.\n    #[aztec(private)]\n    fn enqueueCallsToChildWithNestedLast(\n        targetContract: Field,\n        targetSelector: Field,\n    ) {\n        context.call_public_function(targetContract, targetSelector, [20]);\n        let enqueueCallToChildSelector = compute_selector(\"enqueueCallToChild(Field,Field,Field)\");\n        let _ret = context.call_private_function(context.this_address(), enqueueCallToChildSelector, [targetContract, targetSelector, 10]);\n    }\n\n    // Private function to enqueue a call to the targetContract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueueCallToChildTwice(\n        targetContract: Field,\n        targetSelector: Field,\n        targetValue: Field,\n    ) {\n        // Enqueue the first public call\n        context.call_public_function(targetContract, targetSelector, [targetValue]);\n        // Enqueue the second public call\n        context.call_public_function(targetContract, targetSelector, [targetValue + 1]);\n    }\n\n    // Private function to enqueue a call to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallToPubEntryPoint(\n        targetContract: Field,\n        targetSelector: Field,\n        targetValue: Field,\n    ) {\n        let pubEntryPointSelector = compute_selector(\"pubEntryPoint(Field,Field,Field)\");\n        let thisAddress = context.this_address();\n        let _void = context.call_public_function(thisAddress, pubEntryPointSelector, [targetContract, targetSelector, targetValue]);\n    }\n\n    // Private function to enqueue two calls to the pubEntryPoint function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueueCallsToPubEntryPoint(\n        targetContract: Field,\n        targetSelector: Field,\n        targetValue: Field,\n    ) {\n        let pubEntryPointSelector = compute_selector(\"pubEntryPoint(Field,Field,Field)\");\n        let thisAddress = context.this_address();\n        \n        context.call_public_function(thisAddress, pubEntryPointSelector, [targetContract, targetSelector, targetValue]);\n\n        context.call_public_function(thisAddress, pubEntryPointSelector, [targetContract, targetSelector, targetValue + 1]);\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/parent_contract/src/main.nr"
            },
            "34": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
            },
            "37": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
            },
            "38": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
            },
            "53": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
            },
            "54": {
                "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
            },
            "61": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
            },
            "62": {
                "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"
            },
            "66": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
            },
            "67": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
            },
            "78": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
            }
        }
    }
}
