{
  "name": "SchnorrHardcodedAccount",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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/TbG9RipwLvfmrgeIxV499sN12OkAu9+C+F6jFTg3W8LXI+RCrzb6l+PkQq8275fj5EKvNuSX4+RCrzbZl+PkQq82zpfj5EKvNsOX4+RCrzb4l6PgQo8d9vW6zFQgeduK3o9BirwfEAFnruN5PUYqMBztzm8HgMVeO42fJdjdlu76zFSgXebuOsxUoF3m7jrMVKBJRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRM3JRO3JBO3JBO3JBO3JBO3HlCBl2TilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTilmTi4iGhuHMN1OBzDRThcw1U4XMNlOFzDdThcw0U4nMNVOJzDZTicw3VYonHnWuoFktA7lxDtVgicucaqsUSkjvXUC2WmNy5hmqxBOXONVSLJSp3rqFaLGG5cw3VYonLnWuoFktg7lxDtVgic+caqsUSmjvXUC2W2Ny5hmqxBOfONVSLJTp3rqFaLOG5cw3VYonPnWuoFkuA7lxDtVgidOcaqsUSojvXUC2WGN25hmqxBOnONVSLJUp3rqFaLGG6cw3VYonTnWuoFkug7lxDtVgidecaqsUSqjvXUC2WWN25hmqxBOvONVSLJVp3rqFaLOG6cw3VYonXnWuoFkvA7lxDtVgiducaqsUSsjvXUC2WmN25hmqxBO3ONVSLJWp3rqFaLGG7cw3VYonbnWuoFkvg7lxDtVgid+caqsUSujvXUC2W2N25RmpxUO4uKHcXlLsLyt3FQ2pxUO4uKHcXlLsLyt0F5e6CcndBubug3F1Q7i4odxeUuwvK3QXl7oJyd0G5u6DcXVDuLih3F5S7C8rdBeXugnJ3Qbm7oNxdUO4uKHcXlLsLyt0F5e6CcndBubug3F1Q7i4odxeUuwvK3QXl7oJyd0G5u6DcXVDuLih3F5S7C8rdBeXugnJ3Qbm7oNxdUO4uKHcXlLsLyt0F5e6CcndBubug3F1Q7i4odxeUuwvK3QXl7oJyd0G5u6DcXVDuLih3F5S7C8rdBeXugnJ3Qbm7oNxdUO4uKHcXlLsLyt0F5e6CcndBubug3F1Q7i4odxeUuwvK3QXl7oJyd0G5u6DcXVDuLih3F5S7C8rdBeXugnJ3Qbm7pNxdUu4uKXeXlLvLh9TipNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Sbm7pNxdUu4uKXeXlLtLyt0l5e6ScndJubuk3F1S7i4pd5eUu0vK3SXl7pJyd0m5u6TcXVLuLil3l5S7S8rdJeXuknJ3Rbm7otxdUe6uKHdXD6nFRbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUuyvK3RXl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6uKHdXlLsryt0V5e6KcndFubui3F1R7q4od1eUuyvK3RXl7opyd0W5u6LcXVHurih3V5S7K8rdFeXuinJ3Rbm7otxdUe6udru7bPm65rzN/GHN5hZXn5/WHPO3a8Zf3v6nOeav/5y//vrjvz/y9v7LH3k7+Jc/8naVL37kiP7lp/n4Q198no8/9MUn+vhDX3imDx/+A/cp0uE=",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "// docs:start:contract\n// Account contract that uses Schnorr signatures for authentication using a hardcoded public key.\ncontract SchnorrHardcodedAccount {\n    use dep::std;\n    use dep::aztec::{\n        abi::{ PrivateCircuitPublicInputs, PrivateContextInputs, Hasher },\n        types::{ vec::BoundedVec, point::Point },\n        context::PrivateContext,\n    };\n\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    global public_key_x: Field = 0x0ede3d33c920df8fdf43f3e39ed38b0882c25b056620ef52fd016fe811aa2443;\n    global public_key_y: Field = 0x29155934ffaa105323695b5f91faadd84acc21f4a8bda2fad760f992d692bc7f;\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    // docs:start:is-valid\n    #[contract_library_method]\n    fn is_valid_impl(_context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature using hardcoded public key\n        let verification = std::schnorr::verify_signature(public_key_x, public_key_y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        true\n    }\n    // docs:end:is-valid\n\n}\n// docs:end:contract",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_hardcoded_account_contract/src/main.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization.nr"
      },
      "86": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/account.nr"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/auth_witness.nr"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/usr/src/yarn-project/aztec-nr/authwit/src/entrypoint.nr"
      }
    }
  }
}
