import { createConsoleLogger } from '@aztec/foundation/log';
import { generateContractArtifact, generateNoirContractInterface, generateTypescriptContractInterface, } from '@aztec/noir-compiler';
import { readFileSync, writeFileSync } from 'fs';
import camelCase from 'lodash.camelcase';
import omit from 'lodash.omit';
import snakeCase from 'lodash.snakecase';
import upperFirst from 'lodash.upperfirst';
import { join as pathJoin } from 'path';
import { format } from 'util';
// const STATEMENT_TYPES = ['type', 'params', 'return'] as const;
const log = createConsoleLogger('aztec:noir-contracts');
const PROJECT_CONTRACTS = [
    { name: 'SchnorrSingleKeyAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
    { name: 'SchnorrAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
    { name: 'EcdsaAccount', target: '../aztec.js/src/artifacts/', exclude: [] },
];
const INTERFACE_CONTRACTS = ['private_token', 'private_token_airdrop', 'test'];
/**
 * Writes the contract to a specific project folder, if needed.
 * @param artifact - The artifact to write.
 */
function writeToProject(artifact) {
    for (const projectContract of PROJECT_CONTRACTS) {
        if (artifact.name === projectContract.name) {
            const toWrite = {
                ...artifact,
                functions: artifact.functions.map((f) => omit(f, projectContract.exclude)),
                // If we maintain debug symbols they will get committed to git.
                debug: undefined,
            };
            const targetFilename = pathJoin(projectContract.target, `${snakeCase(artifact.name)}_contract.json`);
            writeFileSync(targetFilename, JSON.stringify(toWrite, null, 2) + '\n');
            log(`Written ${targetFilename}`);
        }
    }
}
const main = () => {
    const name = process.argv[2];
    if (!name)
        throw new Error(`Missing argument contract name`);
    const projectName = `${snakeCase(name)}_contract`;
    const contractName = upperFirst(camelCase(name));
    const artifactFile = `${projectName}-${contractName}.json`;
    const buildJsonFilePath = `./target/${artifactFile}`;
    const buildJson = JSON.parse(readFileSync(buildJsonFilePath).toString());
    const debugArtifactFile = `debug_${artifactFile}`;
    let debug = undefined;
    try {
        const debugJsonFilePath = `./target/${debugArtifactFile}`;
        const debugJson = JSON.parse(readFileSync(debugJsonFilePath).toString());
        if (debugJson) {
            debug = debugJson;
        }
    }
    catch (err) {
        // Ignore
    }
    // Remove extraneous information from the buildJson (which was output by Nargo) to hone in on the function data we actually care about:
    const artifactJson = generateContractArtifact({ contract: buildJson, debug });
    // Write the artifact:
    const artifactsDir = 'src/artifacts';
    const artifactFileName = `${snakeCase(name)}_contract.json`;
    writeFileSync(pathJoin(artifactsDir, artifactFileName), JSON.stringify(artifactJson, null, 2) + '\n');
    log(`Written ${pathJoin(artifactsDir, artifactFileName)}`);
    // Write some artifacts to other packages in the monorepo:
    writeToProject(artifactJson);
    // Write a .ts contract interface, for consumption by the typescript code
    const tsInterfaceDestFilePath = `src/types/${name}.ts`;
    const tsAbiImportPath = `../artifacts/${artifactFileName}`;
    writeFileSync(tsInterfaceDestFilePath, generateTypescriptContractInterface(artifactJson, tsAbiImportPath));
    log(`Written ${tsInterfaceDestFilePath}`);
    // Write a .nr contract interface, for consumption by other Aztec.nr contracts
    if (INTERFACE_CONTRACTS.includes(name)) {
        const projectDirPath = `src/contracts/${projectName}`;
        const noirInterfaceDestFilePath = `${projectDirPath}/src/interface.nr`;
        try {
            writeFileSync(noirInterfaceDestFilePath, generateNoirContractInterface(artifactJson));
            log(`Written ${noirInterfaceDestFilePath}`);
        }
        catch (err) {
            log(`Error generating Aztec.nr interface for ${name}: ${err}`);
        }
    }
};
try {
    main();
}
catch (err) {
    log(format(`Error copying build output`, err));
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weV9vdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9jb3B5X291dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLDZCQUE2QixFQUM3QixtQ0FBbUMsR0FDcEMsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQztBQUNqRCxPQUFPLFNBQVMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxTQUFTLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksSUFBSSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QixpRUFBaUU7QUFDakUsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUV4RCxNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLEVBQUUsSUFBSSxFQUFFLHlCQUF5QixFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO0lBQ3RGLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO0lBQzdFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsNEJBQTRCLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtDQUM1RSxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUUv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