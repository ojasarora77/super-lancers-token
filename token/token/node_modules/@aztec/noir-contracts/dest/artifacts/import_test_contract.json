{
    "name": "ImportTest",
    "functions": [
        {
            "name": "callNoArgs",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "callOpenFn",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "main",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubCallOpenFn",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "function_selector",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "note_hash_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "events": [],
    "debug": {
        "debugSymbols": [
            "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",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJzl3F1P2zAUxvHvkusK2T5+O/0q0y7QxiQkVKa1d6jfnVRgp0u9x+oI0VNxBYhT9Isb8jcv6cvw9Pzj/vD4vNsP25dBhu23l2H/+353+mh/uP9zGLZmMzzsfo5vj5vh1+PTw7C1x83FlBUJ+j45vp9tnRbfGvfO+DLuXeyMq4T3Yc0yjebj983gbxEdVkSPMxUtmv8fHVtoa6SuSYoO0kMW9z4b1Pg6m0NjOLtUFiS700SxpM99atKXOMr8JY5SmY9yse9La9Y9TLHFksXH88M8YezKGOMAxq2MCalgvM/4BMgaytmiJl3Imy3mkKtL5cxVp2Eubwb5JuTNKt+EfOU0LyhfObcLyldO6ILylbO4nNytXbrl5GtncTk5cUM7cuaGiqsbOvFuLmduKJYzNxTLmRuK5cwNxXLmhmI5c0OhXJgbiuXMDcVy5oZiOXVDU6xylbmcuqFQTt1QKKduKJRTNxTKqRsK5dQNRXJP3VAop24olFM3FMqZG5rUFnk2eS5nbiiWMzcUy5kbiuXMDcVy5oZiOXNDoTwwNxTLmRuK5cwNxXLmhmafqjzOfwsdmBuK5cwNxXLmhmI5c0OxnLmhWM7cUCiPzA3FcuaGYjlzQ7GcuaFqa/3V6VzO3FAsZ24oljM3FMuZG4rlzA3FcuaGQnlibiiWMzcUy5kbiuXEDbVORArDSZj/LTcRV7RrJ+5o105c0q6duKVdO3FNu3binvbsmbioXTtxU7t24qp27dxdzabavbNzO3VXvehk1/l9Rpm6q6HeaTa+Hy7s1F0NabJHM99HZuauinGVISZfnO/MXRWj093RNvi5nbmrYpOr9vEiObMrc1fFhXp9F/l7/GRn7qpIjNXuL/4HVpm7Oi71tO5ePR73qQz7szuOY2yZxVZzcGfn4tU3YTOn/QaWj3l3cd3yhWlJTp9HyxfVldmo5/d1t5bPG1vM3iT9wFoz74Y+ba1T8uULp9RbvnEfVm65c1HcB9aaeff2eWudY5lNKh85Vak3kNddVW356SqcHWZz+fDLYNy1TyktX97Z6dkJ8vYCEXfNzex4iPXiPV27x93k22Oam8jOY9qv0tF7UHPb9O8HHY+vQDiDww==",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod test_contract_interface;\n\n// Contract that uses the autogenerated interface of the Test contract for calling its functions.\n// Used for testing calling into other contracts via autogenerated interfaces.\ncontract ImportTest {\n    use crate::test_contract_interface::{\n        TestPrivateContextInterface,\n        TestPublicContextInterface,\n        AStructTestCodeGenStruct,\n        ADeepStructTestCodeGenStruct,\n        ANoteADeepStructTestCodeGenStruct,\n        ManyNotesADeepStructTestCodeGenStruct,\n    };\n\n\n    #[aztec(private)]\n    fn constructor(\n    ) {}\n \n    // Calls the testCodeGen on the Test contract at the target address\n    // Used for testing calling a function with arguments of multiple types\n    // See yarn-project/acir-simulator/src/client/private_execution.ts\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn main(\n        target: Field\n    ) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.test_code_gen(\n            &mut context,\n            1,\n            true,\n            1 as u32,\n            [1, 2],\n            AStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n            ADeepStructTestCodeGenStruct {\n                aField: 1, \n                aBool: true, \n                aNote: ANoteADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                manyNotes: [\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                ]\n            }\n        );\n\n        return_values[0]\n    }\n\n    // Calls the getThisAddress on the Test contract at the target address\n    // Used for testing calling a function with no arguments\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callNoArgs(\n        target: Field\n    ) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.get_this_address(&mut context);\n        \n        return_values[0]\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callOpenFn(\n        target: Field,\n    ) {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        test_contract_instance.create_nullifier_public(&mut context, 1, 2);\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function from another open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(public)]\n    fn pubCallOpenFn(\n        target: Field,\n    ) -> Field {\n        let test_contract_instance = TestPublicContextInterface::at(target);\n        let ret = test_contract_instance.create_nullifier_public(context, 1, 2);\n        \n        ret[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/main.nr"
            },
            "34": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
            },
            "37": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
            },
            "38": {
                "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
            },
            "53": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
            },
            "54": {
                "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
            },
            "61": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
            },
            "62": {
                "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"
            },
            "66": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
            },
            "67": {
                "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
            },
            "78": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
            },
            "85": {
                "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::aztec::constants_gen::RETURN_VALUES_LENGTH;\n\nstruct AStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\nstruct ADeepStructTestCodeGenStruct {\n  aField: Field,\n  aBool: bool,\n  aNote: ANoteADeepStructTestCodeGenStruct,\n  manyNotes: [ManyNotesADeepStructTestCodeGenStruct;3],\n}\n\nstruct ANoteADeepStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\nstruct ManyNotesADeepStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\n\n// Interface for calling Test functions from a private context\nstruct TestPrivateContextInterface {\n  address: Field,\n}\n\nimpl TestPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn consume_mint_private_message(\n    self,\n    context: &mut PrivateContext,\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret_for_L1_to_L2_message_consumption: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = secret_hash_for_redeeming_minted_notes;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret_for_L1_to_L2_message_consumption;\n\n    context.call_private_function(self.address, 0x8999306a, serialized_args)\n  }\n  \n\n  pub fn consume_mint_public_message(\n    self,\n    context: &mut PrivateContext,\n    to: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret: Field\n  ) {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = to;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret;\n\n    context.call_public_function(self.address, 0x1c60863d, serialized_args)\n  }\n  \n\n  pub fn create_l2_to_l1_message_public(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secretHash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0x9749ca06, serialized_args)\n  }\n  \n\n  pub fn create_nullifier_public(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secretHash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0xdf02db8d, serialized_args)\n  }\n  \n\n  pub fn emit_msg_sender(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x11fb5d45, serialized_args)\n  }\n  \n\n  pub fn emit_nullifier(\n    self,\n    context: &mut PrivateContext,\n    nullifier: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = nullifier;\n\n    context.call_private_function(self.address, 0x82a8b183, serialized_args)\n  }\n  \n\n  pub fn emit_unencrypted(\n    self,\n    context: &mut PrivateContext,\n    value: Field\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialized_args)\n  }\n  \n\n  pub fn get_portal_contract_address(\n    self,\n    context: &mut PrivateContext,\n    aztec_address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = aztec_address;\n\n    context.call_private_function(self.address, 0x98ff64fd, serialized_args)\n  }\n  \n\n  pub fn get_public_key(\n    self,\n    context: &mut PrivateContext,\n    address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = address;\n\n    context.call_private_function(self.address, 0x5ccf578f, serialized_args)\n  }\n  \n\n  pub fn get_this_address(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0x95a7b2ae, serialized_args)\n  }\n  \n\n  pub fn get_this_portal_address(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 0];\n\n    context.call_private_function(self.address, 0xc71384f5, serialized_args)\n  }\n  \n\n  pub fn is_time_equal(\n    self,\n    context: &mut PrivateContext,\n    time: Field\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = time;\n\n    context.call_public_function(self.address, 0x61fa2bda, serialized_args)\n  }\n  \n\n  pub fn test_code_gen(\n    self,\n    context: &mut PrivateContext,\n    aField: Field,\n    aBool: bool,\n    aNumber: u32,\n    anArray: [Field;2],\n    aStruct: AStructTestCodeGenStruct,\n    aDeepStruct: ADeepStructTestCodeGenStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 17];\n    serialized_args[0] = aField;\n    serialized_args[1] = aBool as Field;\n    serialized_args[2] = aNumber as Field;\n    serialized_args[3] = anArray[0];\n    serialized_args[4] = anArray[1];\n    serialized_args[5] = aStruct.amount;\n    serialized_args[6] = aStruct.secretHash;\n    serialized_args[7] = aDeepStruct.aField;\n    serialized_args[8] = aDeepStruct.aBool as Field;\n    serialized_args[9] = aDeepStruct.aNote.amount;\n    serialized_args[10] = aDeepStruct.aNote.secretHash;\n    serialized_args[11] = aDeepStruct.manyNotes[0].amount;\n    serialized_args[12] = aDeepStruct.manyNotes[0].secretHash;\n    serialized_args[13] = aDeepStruct.manyNotes[1].amount;\n    serialized_args[14] = aDeepStruct.manyNotes[1].secretHash;\n    serialized_args[15] = aDeepStruct.manyNotes[2].amount;\n    serialized_args[16] = aDeepStruct.manyNotes[2].secretHash;\n\n    context.call_private_function(self.address, 0x0f054f9b, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Test functions from a public context\nstruct TestPublicContextInterface {\n  address: Field,\n}\n\nimpl TestPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn consume_mint_public_message(\n    self,\n    context: PublicContext,\n    to: Field,\n    amount: Field,\n    canceller: Field,\n    msg_key: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = to;\n    serialized_args[1] = amount;\n    serialized_args[2] = canceller;\n    serialized_args[3] = msg_key;\n    serialized_args[4] = secret;\n\n    context.call_public_function(self.address, 0x1c60863d, serialized_args)\n  }\n  \n\n  pub fn create_l2_to_l1_message_public(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secretHash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0x9749ca06, serialized_args)\n  }\n  \n\n  pub fn create_nullifier_public(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secretHash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0xdf02db8d, serialized_args)\n  }\n  \n\n  pub fn emit_unencrypted(\n    self,\n    context: PublicContext,\n    value: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialized_args)\n  }\n  \n\n  pub fn is_time_equal(\n    self,\n    context: PublicContext,\n    time: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = time;\n\n    context.call_public_function(self.address, 0x61fa2bda, serialized_args)\n  }\n  \n}\n  \n  \n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/test_contract_interface.nr"
            }
        }
    }
}
