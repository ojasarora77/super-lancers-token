/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';

import BenchmarkingContractArtifactJson from '../artifacts/benchmarking_contract.json' assert { type: 'json' };

export const BenchmarkingContractArtifact = BenchmarkingContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Benchmarking;
 */
export class BenchmarkingContract extends ContractBase {
  private constructor(completeAddress: CompleteAddress, wallet: Wallet, portalContract = EthAddress.ZERO) {
    super(completeAddress, BenchmarkingContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, BenchmarkingContract.artifact, wallet) as Promise<BenchmarkingContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<BenchmarkingContract>(
      Point.ZERO,
      wallet,
      BenchmarkingContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
    return new DeployMethod<BenchmarkingContract>(
      publicKey,
      wallet,
      BenchmarkingContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return BenchmarkingContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** broadcast(owner: field) */
    broadcast: ((owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** create_note(owner: field, value: field) */
    create_note: ((owner: FieldLike, value: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** increment_balance(owner: field, value: field) */
    increment_balance: ((owner: FieldLike, value: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** recreate_note(owner: field, index: integer) */
    recreate_note: ((owner: FieldLike, index: bigint | number) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
