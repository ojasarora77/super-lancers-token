import { MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, } from '@aztec/circuits.js';
import { serializeToBuffer } from '@aztec/circuits.js/utils';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, numToUInt32BE } from '@aztec/foundation/serialize';
import times from 'lodash.times';
import { ContractData } from './contract_data.js';
import { PublicDataWrite } from './public_data_write.js';
import { TxHash } from './tx/tx_hash.js';
/**
 * The string encoding used for serializing L2Tx objects to strings.
 */
const STRING_ENCODING = 'hex';
/**
 * Represents an L2 transaction.
 */
export class L2Tx {
    constructor(
    /**
     * New commitments created by the transaction.
     */
    newCommitments, 
    /**
     * New nullifiers created by the transaction.
     */
    newNullifiers, 
    /**
     * New public data writes created by the transaction.
     */
    newPublicDataWrites, 
    /**
     * New L2 to L1 messages created by the transaction.
     */
    newL2ToL1Msgs, 
    /**
     * New contracts leafs created by the transaction to be inserted into the contract tree.
     */
    newContracts, 
    /**
     * New contract data created by the transaction.
     */
    newContractData, 
    /**
     * The unique identifier of the block containing the transaction.
     */
    blockHash, 
    /**
     * The block number in which the transaction was included.
     */
    blockNumber) {
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.newPublicDataWrites = newPublicDataWrites;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.newContracts = newContracts;
        this.newContractData = newContractData;
        this.blockHash = blockHash;
        this.blockNumber = blockNumber;
        this.txHash = new TxHash(this.newNullifiers[0].toBuffer());
    }
    /**
     * Deserializes the L2Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new L2Tx(reader.readArray(MAX_NEW_COMMITMENTS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, Fr), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, ContractData), reader.readBytes(32), reader.readNumber());
    }
    /**
     * Deserializes an L2Tx object from a string.
     * @param str - String to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromString(str) {
        return L2Tx.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer() {
        return serializeToBuffer([
            this.newCommitments,
            this.newNullifiers,
            this.newPublicDataWrites,
            this.newL2ToL1Msgs,
            this.newContracts,
            this.newContractData,
            this.blockHash,
            numToUInt32BE(this.blockNumber),
        ]);
    }
    /**
     * Returns a string representation of the Tx object.
     */
    toString() {
        return this.toBuffer().toString(STRING_ENCODING);
    }
    static random() {
        return new L2Tx(times(MAX_NEW_COMMITMENTS_PER_TX, Fr.random), times(MAX_NEW_NULLIFIERS_PER_TX, Fr.random), times(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite.random), times(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.random), times(MAX_NEW_CONTRACTS_PER_TX, Fr.random), times(MAX_NEW_CONTRACTS_PER_TX, ContractData.random), Fr.random().toBuffer(), 123);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfdHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbDJfdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLHlCQUF5QixFQUN6QixzQ0FBc0MsR0FDdkMsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRSxPQUFPLEtBQUssTUFBTSxjQUFjLENBQUM7QUFFakMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLGVBQWUsR0FBbUIsS0FBSyxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLElBQUk7SUFPZjtJQUNFOztPQUVHO0lBQ0ksY0FBb0I7SUFDM0I7O09BRUc7SUFDSSxhQUFtQjtJQUMxQjs7T0FFRztJQUNJLG1CQUFzQztJQUM3Qzs7T0FFRztJQUNJLGFBQW1CO0lBQzFCOztPQUVHO0lBQ0ksWUFBa0I7SUFDekI7O09BRUc7SUFDSSxlQUErQjtJQUN0Qzs7T0FFRztJQUNJLFNBQWlCO0lBQ3hCOztPQUVHO0lBQ0ksV0FBbUI7UUE1Qm5CLG1CQUFjLEdBQWQsY0FBYyxDQUFNO1FBSXBCLGtCQUFhLEdBQWIsYUFBYSxDQUFNO1FBSW5CLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBbUI7UUFJdEMsa0JBQWEsR0FBYixhQUFhLENBQU07UUFJbkIsaUJBQVksR0FBWixZQUFZLENB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