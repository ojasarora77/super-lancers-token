import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * The string encoding used for serializing HistoricBlockData objects.
 */
const STRING_ENCODING = 'hex';
/**
 * Information about the tree roots used for both public and private kernels.
 */
export class HistoricBlockData {
    constructor(
    /**
     * Root of the note hash tree at the time of when this information was assembled.
     */
    noteHashTreeRoot, 
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot, 
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot, 
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot, 
    /**
     * Root of the historic blocks tree at the time of when this information was assembled.
     */
    blocksTreeRoot, 
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot, // future enhancement
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot, 
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash) {
        this.noteHashTreeRoot = noteHashTreeRoot;
        this.nullifierTreeRoot = nullifierTreeRoot;
        this.contractTreeRoot = contractTreeRoot;
        this.l1ToL2MessagesTreeRoot = l1ToL2MessagesTreeRoot;
        this.blocksTreeRoot = blocksTreeRoot;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicDataTreeRoot = publicDataTreeRoot;
        this.globalVariablesHash = globalVariablesHash;
    }
    static from(fields) {
        return new HistoricBlockData(...HistoricBlockData.getFields(fields));
    }
    static random() {
        return new HistoricBlockData(Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random());
    }
    static getFields(fields) {
        return [
            fields.noteHashTreeRoot,
            fields.nullifierTreeRoot,
            fields.contractTreeRoot,
            fields.l1ToL2MessagesTreeRoot,
            fields.blocksTreeRoot,
            fields.privateKernelVkTreeRoot,
            fields.publicDataTreeRoot,
            fields.globalVariablesHash,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...HistoricBlockData.getFields(this));
    }
    toString() {
        // originally this was encoding as utf-8 (the default). This caused problems decoding back the data.
        return this.toBuffer().toString(STRING_ENCODING);
    }
    /**
     * Return the historic block data as an array of items in the order they are serialized in noir.
     * @returns Array of items in the order they are stored in the contract
     */
    toArray() {
        return [
            this.noteHashTreeRoot,
            this.nullifierTreeRoot,
            this.contractTreeRoot,
            this.l1ToL2MessagesTreeRoot,
            this.blocksTreeRoot,
            // it is not present in noir,
            this.publicDataTreeRoot,
            this.globalVariablesHash,
        ];
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new HistoricBlockData(reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr());
    }
    static fromString(str) {
        return HistoricBlockData.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    isEmpty() {
        return (this.noteHashTreeRoot.isZero() &&
            this.nullifierTreeRoot.isZero() &&
            this.contractTreeRoot.isZero() &&
            this.l1ToL2MessagesTreeRoot.isZero() &&
            this.blocksTreeRoot.isZero() &&
            this.privateKernelVkTreeRoot.isZero() &&
            this.publicDataTreeRoot.isZero() &&
            this.globalVariablesHash.isZero());
    }
    static empty() {
        return new HistoricBlockData(Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yaWNfYmxvY2tfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9oaXN0b3JpY19ibG9ja19kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHM0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFN0Q7O0dBRUc7QUFDSCxNQUFNLGVBQWUsR0FBbUIsS0FBSyxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QjtJQUNFOztPQUVHO0lBQ0ksZ0JBQW9CO0lBQzNCOztPQUVHO0lBQ0ksaUJBQXFCO0lBQzVCOztPQUVHO0lBQ0ksZ0JBQW9CO0lBQzNCOztPQUVHO0lBQ0ksc0JBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksY0FBa0I7SUFDekI7O09BRUc7SUFDSSx1QkFBMkIsRUFBRSxxQkFBcUI7SUFDekQ7O09BRUc7SUFDSSxrQkFBc0I7SUFDN0I7O09BRUc7SUFDSSxtQkFBdUI7UUE1QnZCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBSTtRQUlwQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQUk7UUFJckIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFJO1FBSXBCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBSTtRQUkxQixtQkFBYyxHQUFkLGNBQWMsQ0FBSTtRQUlsQiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQUk7UUFJM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFJO1FBSXRCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSTtJQUM3QixDQUFDO0lBRUosTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFtQztRQUM3QyxPQUFPLElBQUksaUJBQWlCLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU07UUFDWCxPQUFPLElBQUksaUJBQWlCLENBQzFCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQ1gsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUNYLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQ1gsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUNYLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFDWCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQ1osQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQW1DO1FBQ2xELE9BQU87WUFDTCxNQUFNLENBQUMsZ0JBQWdCO1lBQ3ZCLE1BQU0sQ0FBQyxpQkFBaUI7WUFDeEIsTUFBTSxDQUFDLGdCQUFnQjtZQUN2QixNQUFNLENBQUMsc0JBQXNCO1lBQzdCLE1BQU0sQ0FBQyxjQUFjO1lBQ3JCLE1BQU0sQ0FBQyx1QkFBdUI7WUFDOUIsTUFBTSxDQUFDLGtCQUFrQjtZQUN6QixNQUFNLENBQUMsbUJBQW1CO1NBQ2xCLENBQUM7SUFDYixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsUUFBUTtRQUNOLG9HQUFvRztRQUNwRyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU87UUFDTCxPQUFPO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQjtZQUNyQixJQUFJLENBQUMsaUJBQWlCO1lBQ3RCLElBQUksQ0FBQyxnQkFBZ0I7WUFDckIsSUFBSSxDQUFDLHNCQUFzQjtZQUMzQixJQUFJLENBQUMsY0FBYztZQUNuQiw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLGtCQUFrQjtZQUN2QixJQUFJLENBQUMsbUJBQW1CO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxpQkFBaUIsQ0FDMUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUNmLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFDZixNQUFNLENBQUMsTUFBTSxFQUFFLEVBQ2YsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUNmLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFDZixNQUFNLENBQUMsTUFBTSxFQUFFLEVBQ2YsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUNmLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sQ0FDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUM5QixJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQzVCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUU7WUFDckMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRTtZQUNoQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLENBQ2xDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkcsQ0FBQztDQUNGIn0=